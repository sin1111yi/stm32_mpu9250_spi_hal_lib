
c8t6_mpu9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08006fa0  08006fa0  00016fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007494  08007494  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007494  08007494  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007494  08007494  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800749c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  200001dc  08007678  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  08007678  00020b04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6c0  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237a  00000000  00000000  0002c8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002f638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b9c  00000000  00000000  0002ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b68c  00000000  00000000  00048ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008633d  00000000  00000000  00054170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da4ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b0  00000000  00000000  000da500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f84 	.word	0x08006f84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006f84 	.word	0x08006f84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a23      	ldr	r2, [pc, #140]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d76:	f043 0320 	orr.w	r3, r3, #32
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0320 	and.w	r3, r3, #32
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a11      	ldr	r2, [pc, #68]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_GPIO_Init+0xa8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GY_CS_GPIO_Port, GY_CS_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbe:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_GPIO_Init+0xac>)
 8000dc0:	f001 fb92 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GY_CS_Pin;
 8000dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GY_CS_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_GPIO_Init+0xac>)
 8000dde:	f001 f9ff 	bl	80021e0 <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010c00 	.word	0x40010c00

08000df4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000df4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dfc:	f000 ffac 	bl	8001d58 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e00:	f000 f8d0 	bl	8000fa4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e04:	f7ff ff9e 	bl	8000d44 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000e08:	f000 fd26 	bl	8001858 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000e0c:	f000 fece 	bl	8001bac <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	MPU9250_Init(&mpu);
 8000e10:	4858      	ldr	r0, [pc, #352]	; (8000f74 <main+0x180>)
 8000e12:	f000 fa6b 	bl	80012ec <MPU9250_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	u1_printf("System start up!\n");
 8000e16:	4858      	ldr	r0, [pc, #352]	; (8000f78 <main+0x184>)
 8000e18:	f000 ff46 	bl	8001ca8 <u1_printf>
	while (1) {
		ak8963_WhoAmI = mpu_r_ak8963_WhoAmI(&mpu);
 8000e1c:	4855      	ldr	r0, [pc, #340]	; (8000f74 <main+0x180>)
 8000e1e:	f000 fa09 	bl	8001234 <mpu_r_ak8963_WhoAmI>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b55      	ldr	r3, [pc, #340]	; (8000f7c <main+0x188>)
 8000e28:	701a      	strb	r2, [r3, #0]
		mpu9250_WhoAmI = mpu_r_WhoAmI(&mpu);
 8000e2a:	4852      	ldr	r0, [pc, #328]	; (8000f74 <main+0x180>)
 8000e2c:	f000 fa12 	bl	8001254 <mpu_r_WhoAmI>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b52      	ldr	r3, [pc, #328]	; (8000f80 <main+0x18c>)
 8000e36:	701a      	strb	r2, [r3, #0]
		MPU9250_ReadAccel(&mpu);
 8000e38:	484e      	ldr	r0, [pc, #312]	; (8000f74 <main+0x180>)
 8000e3a:	f000 fac9 	bl	80013d0 <MPU9250_ReadAccel>
		MPU9250_ReadGyro(&mpu);
 8000e3e:	484d      	ldr	r0, [pc, #308]	; (8000f74 <main+0x180>)
 8000e40:	f000 fb46 	bl	80014d0 <MPU9250_ReadGyro>
		MPU9250_ReadMag(&mpu);
 8000e44:	484b      	ldr	r0, [pc, #300]	; (8000f74 <main+0x180>)
 8000e46:	f000 fbb7 	bl	80015b8 <MPU9250_ReadMag>
		u1_printf("AK8963: 0x%x\nMPU9250: 0x%x\n", ak8963_WhoAmI,
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <main+0x188>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <main+0x18c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	484b      	ldr	r0, [pc, #300]	; (8000f84 <main+0x190>)
 8000e58:	f000 ff26 	bl	8001ca8 <u1_printf>
				mpu9250_WhoAmI);
		u1_printf("AX:%d \tAY:%d\t AZ:%d\n", mpu.mpu_data.Accel_row[0],
 8000e5c:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <main+0x180>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4619      	mov	r1, r3
				mpu.mpu_data.Accel_row[1], mpu.mpu_data.Accel_row[2]);
 8000e64:	4b43      	ldr	r3, [pc, #268]	; (8000f74 <main+0x180>)
 8000e66:	885b      	ldrh	r3, [r3, #2]
 8000e68:	b21b      	sxth	r3, r3
		u1_printf("AX:%d \tAY:%d\t AZ:%d\n", mpu.mpu_data.Accel_row[0],
 8000e6a:	461a      	mov	r2, r3
				mpu.mpu_data.Accel_row[1], mpu.mpu_data.Accel_row[2]);
 8000e6c:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <main+0x180>)
 8000e6e:	889b      	ldrh	r3, [r3, #4]
 8000e70:	b21b      	sxth	r3, r3
		u1_printf("AX:%d \tAY:%d\t AZ:%d\n", mpu.mpu_data.Accel_row[0],
 8000e72:	4845      	ldr	r0, [pc, #276]	; (8000f88 <main+0x194>)
 8000e74:	f000 ff18 	bl	8001ca8 <u1_printf>
		u1_printf("AX:%.3f \tAY:%.3f\t AZ:%.3f\n", mpu.mpu_data.Accel[0],
 8000e78:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <main+0x180>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fad3 	bl	8000428 <__aeabi_f2d>
 8000e82:	4680      	mov	r8, r0
 8000e84:	4689      	mov	r9, r1
				mpu.mpu_data.Accel[1], mpu.mpu_data.Accel[2]);
 8000e86:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <main+0x180>)
 8000e88:	699b      	ldr	r3, [r3, #24]
		u1_printf("AX:%.3f \tAY:%.3f\t AZ:%.3f\n", mpu.mpu_data.Accel[0],
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff facc 	bl	8000428 <__aeabi_f2d>
 8000e90:	4604      	mov	r4, r0
 8000e92:	460d      	mov	r5, r1
				mpu.mpu_data.Accel[1], mpu.mpu_data.Accel[2]);
 8000e94:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <main+0x180>)
 8000e96:	69db      	ldr	r3, [r3, #28]
		u1_printf("AX:%.3f \tAY:%.3f\t AZ:%.3f\n", mpu.mpu_data.Accel[0],
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fac5 	bl	8000428 <__aeabi_f2d>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000ea6:	e9cd 4500 	strd	r4, r5, [sp]
 8000eaa:	4642      	mov	r2, r8
 8000eac:	464b      	mov	r3, r9
 8000eae:	4837      	ldr	r0, [pc, #220]	; (8000f8c <main+0x198>)
 8000eb0:	f000 fefa 	bl	8001ca8 <u1_printf>
		u1_printf("GX:%d \tGY:%d\t GZ:%d\n", mpu.mpu_data.Gyro_row[0],
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <main+0x180>)
 8000eb6:	88db      	ldrh	r3, [r3, #6]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4619      	mov	r1, r3
				mpu.mpu_data.Gyro_row[1], mpu.mpu_data.Gyro_row[2]);
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <main+0x180>)
 8000ebe:	891b      	ldrh	r3, [r3, #8]
 8000ec0:	b21b      	sxth	r3, r3
		u1_printf("GX:%d \tGY:%d\t GZ:%d\n", mpu.mpu_data.Gyro_row[0],
 8000ec2:	461a      	mov	r2, r3
				mpu.mpu_data.Gyro_row[1], mpu.mpu_data.Gyro_row[2]);
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <main+0x180>)
 8000ec6:	895b      	ldrh	r3, [r3, #10]
 8000ec8:	b21b      	sxth	r3, r3
		u1_printf("GX:%d \tGY:%d\t GZ:%d\n", mpu.mpu_data.Gyro_row[0],
 8000eca:	4831      	ldr	r0, [pc, #196]	; (8000f90 <main+0x19c>)
 8000ecc:	f000 feec 	bl	8001ca8 <u1_printf>
		u1_printf("GX:%.3f \tGY:%.3f\t GZ:%.3f\n", mpu.mpu_data.Gyro[0],
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <main+0x180>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff faa7 	bl	8000428 <__aeabi_f2d>
 8000eda:	4680      	mov	r8, r0
 8000edc:	4689      	mov	r9, r1
				mpu.mpu_data.Gyro[1], mpu.mpu_data.Gyro[2]);
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <main+0x180>)
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		u1_printf("GX:%.3f \tGY:%.3f\t GZ:%.3f\n", mpu.mpu_data.Gyro[0],
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff faa0 	bl	8000428 <__aeabi_f2d>
 8000ee8:	4604      	mov	r4, r0
 8000eea:	460d      	mov	r5, r1
				mpu.mpu_data.Gyro[1], mpu.mpu_data.Gyro[2]);
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <main+0x180>)
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		u1_printf("GX:%.3f \tGY:%.3f\t GZ:%.3f\n", mpu.mpu_data.Gyro[0],
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fa99 	bl	8000428 <__aeabi_f2d>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000efe:	e9cd 4500 	strd	r4, r5, [sp]
 8000f02:	4642      	mov	r2, r8
 8000f04:	464b      	mov	r3, r9
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <main+0x1a0>)
 8000f08:	f000 fece 	bl	8001ca8 <u1_printf>
		u1_printf("MX:%d \tMY:%d\t MZ:%d\n", mpu.mpu_data.Magn_row[0],
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <main+0x180>)
 8000f0e:	899b      	ldrh	r3, [r3, #12]
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4619      	mov	r1, r3
				mpu.mpu_data.Magn_row[1], mpu.mpu_data.Magn_row[2]);
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <main+0x180>)
 8000f16:	89db      	ldrh	r3, [r3, #14]
 8000f18:	b21b      	sxth	r3, r3
		u1_printf("MX:%d \tMY:%d\t MZ:%d\n", mpu.mpu_data.Magn_row[0],
 8000f1a:	461a      	mov	r2, r3
				mpu.mpu_data.Magn_row[1], mpu.mpu_data.Magn_row[2]);
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <main+0x180>)
 8000f1e:	8a1b      	ldrh	r3, [r3, #16]
 8000f20:	b21b      	sxth	r3, r3
		u1_printf("MX:%d \tMY:%d\t MZ:%d\n", mpu.mpu_data.Magn_row[0],
 8000f22:	481d      	ldr	r0, [pc, #116]	; (8000f98 <main+0x1a4>)
 8000f24:	f000 fec0 	bl	8001ca8 <u1_printf>
		u1_printf("MX:%f \tMY:%f\t MZ:%f\n", mpu.mpu_data.Magn[0],
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <main+0x180>)
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fa7b 	bl	8000428 <__aeabi_f2d>
 8000f32:	4680      	mov	r8, r0
 8000f34:	4689      	mov	r9, r1
				mpu.mpu_data.Magn[1], mpu.mpu_data.Magn[2]);
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <main+0x180>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		u1_printf("MX:%f \tMY:%f\t MZ:%f\n", mpu.mpu_data.Magn[0],
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa74 	bl	8000428 <__aeabi_f2d>
 8000f40:	4604      	mov	r4, r0
 8000f42:	460d      	mov	r5, r1
				mpu.mpu_data.Magn[1], mpu.mpu_data.Magn[2]);
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <main+0x180>)
 8000f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		u1_printf("MX:%f \tMY:%f\t MZ:%f\n", mpu.mpu_data.Magn[0],
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fa6d 	bl	8000428 <__aeabi_f2d>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f56:	e9cd 4500 	strd	r4, r5, [sp]
 8000f5a:	4642      	mov	r2, r8
 8000f5c:	464b      	mov	r3, r9
 8000f5e:	480f      	ldr	r0, [pc, #60]	; (8000f9c <main+0x1a8>)
 8000f60:	f000 fea2 	bl	8001ca8 <u1_printf>
		u1_printf("*************************\n");
 8000f64:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <main+0x1ac>)
 8000f66:	f000 fe9f 	bl	8001ca8 <u1_printf>

		HAL_Delay(50);
 8000f6a:	2032      	movs	r0, #50	; 0x32
 8000f6c:	f000 ff56 	bl	8001e1c <HAL_Delay>
		ak8963_WhoAmI = mpu_r_ak8963_WhoAmI(&mpu);
 8000f70:	e754      	b.n	8000e1c <main+0x28>
 8000f72:	bf00      	nop
 8000f74:	2000021c 	.word	0x2000021c
 8000f78:	08006fa0 	.word	0x08006fa0
 8000f7c:	200001f8 	.word	0x200001f8
 8000f80:	200001f9 	.word	0x200001f9
 8000f84:	08006fb4 	.word	0x08006fb4
 8000f88:	08006fd0 	.word	0x08006fd0
 8000f8c:	08006fe8 	.word	0x08006fe8
 8000f90:	08007004 	.word	0x08007004
 8000f94:	0800701c 	.word	0x0800701c
 8000f98:	08007038 	.word	0x08007038
 8000f9c:	08007050 	.word	0x08007050
 8000fa0:	08007068 	.word	0x08007068

08000fa4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b090      	sub	sp, #64	; 0x40
 8000fa8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000faa:	f107 0318 	add.w	r3, r7, #24
 8000fae:	2228      	movs	r2, #40	; 0x28
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 f944 	bl	8004240 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fe2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fa93 	bl	8002518 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x58>
		Error_Handler();
 8000ff8:	f000 f819 	bl	800102e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2102      	movs	r1, #2
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fcfe 	bl	8002a18 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x82>
		Error_Handler();
 8001022:	f000 f804 	bl	800102e <Error_Handler>
	}
}
 8001026:	bf00      	nop
 8001028:	3740      	adds	r7, #64	; 0x40
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001032:	b672      	cpsid	i
}
 8001034:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001036:	e7fe      	b.n	8001036 <Error_Handler+0x8>

08001038 <spi_wr_byte>:
/*
 * @brief   write a byte through SPI and read feedback
 * @param   byte: byte to write
 * @return  received byte
 * */
static uint8_t spi_wr_byte(SPI_HandleTypeDef *hspi, uint8_t byte) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
	uint8_t feedback = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]

	// wait SPI serial free
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX_RX)
 8001048:	bf00      	nop
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f002 faf1 	bl	8003632 <HAL_SPI_GetState>
 8001050:	4603      	mov	r3, r0
 8001052:	2b05      	cmp	r3, #5
 8001054:	d0f9      	beq.n	800104a <spi_wr_byte+0x12>
		;

	if (HAL_SPI_TransmitReceive(hspi, &byte, &feedback, 1, 0x01f4) != HAL_OK) {
 8001056:	f107 020f 	add.w	r2, r7, #15
 800105a:	1cf9      	adds	r1, r7, #3
 800105c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f002 f942 	bl	80032ee <HAL_SPI_TransmitReceive>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <spi_wr_byte+0x3c>
		return 0xff;
 8001070:	23ff      	movs	r3, #255	; 0xff
 8001072:	e000      	b.n	8001076 <spi_wr_byte+0x3e>
	}

	return feedback;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <spi_w_bytes>:
 * @param   address: address of the first reg
 * @param   bytes: number of bytes to write
 * @param   num: number of bytes
 * */
static void spi_w_bytes(SPI_HandleTypeDef *hspi, uint8_t address,
		uint8_t *bytes, uint16_t num) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	461a      	mov	r2, r3
 800108c:	460b      	mov	r3, r1
 800108e:	72fb      	strb	r3, [r7, #11]
 8001090:	4613      	mov	r3, r2
 8001092:	813b      	strh	r3, [r7, #8]
	mpu_select();
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4815      	ldr	r0, [pc, #84]	; (80010f0 <spi_w_bytes+0x70>)
 800109c:	f001 fa24 	bl	80024e8 <HAL_GPIO_WritePin>

	spi_wr_byte(hspi, address);
 80010a0:	7afb      	ldrb	r3, [r7, #11]
 80010a2:	4619      	mov	r1, r3
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff ffc7 	bl	8001038 <spi_wr_byte>
	for (i = 0; i < num; i++)
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <spi_w_bytes+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	801a      	strh	r2, [r3, #0]
 80010b0:	e00f      	b.n	80010d2 <spi_w_bytes+0x52>
		spi_wr_byte(hspi, bytes[i]);
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <spi_w_bytes+0x74>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f7ff ffb9 	bl	8001038 <spi_wr_byte>
	for (i = 0; i < num; i++)
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <spi_w_bytes+0x74>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <spi_w_bytes+0x74>)
 80010d0:	801a      	strh	r2, [r3, #0]
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <spi_w_bytes+0x74>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	893a      	ldrh	r2, [r7, #8]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8ea      	bhi.n	80010b2 <spi_w_bytes+0x32>

	mpu_deselect();
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <spi_w_bytes+0x70>)
 80010e4:	f001 fa00 	bl	80024e8 <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	2000020c 	.word	0x2000020c

080010f8 <spi_r_bytes>:
 * @brief   read several bytes though spi
 * @param   address: address of the first reg
 * @param   num: number of bytes to read, number < DATABUF_SIZ
 * @return  data read array
 * */
static void spi_r_bytes(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t num) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
 8001104:	4613      	mov	r3, r2
 8001106:	70bb      	strb	r3, [r7, #2]
	uint8_t _address = address | 0x80;
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800110e:	b2db      	uxtb	r3, r3
 8001110:	73fb      	strb	r3, [r7, #15]

	mpu_select();
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <spi_r_bytes+0x5c>)
 800111a:	f001 f9e5 	bl	80024e8 <HAL_GPIO_WritePin>

	// may be can use HAL_SPI_TransmitReceive()
	HAL_SPI_Transmit(hspi, &_address, 1, 0x01f4);
 800111e:	f107 010f 	add.w	r1, r7, #15
 8001122:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001126:	2201      	movs	r2, #1
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f001 fe93 	bl	8002e54 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, dataBuf, num, 0x01f4); // store read data to dataBuf
 800112e:	78bb      	ldrb	r3, [r7, #2]
 8001130:	b29a      	uxth	r2, r3
 8001132:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <spi_r_bytes+0x60>)
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f001 ffc7 	bl	80030cc <HAL_SPI_Receive>

	mpu_deselect();
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <spi_r_bytes+0x5c>)
 8001146:	f001 f9cf 	bl	80024e8 <HAL_GPIO_WritePin>

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40010c00 	.word	0x40010c00
 8001158:	200001fc 	.word	0x200001fc

0800115c <mpu_w_reg>:
/*
 * @brief   write mpu9250 reg though spi
 * @param   address: address of reg to write
 * @param   byte: byte to write
 * */
static void mpu_w_reg(uint8_t address, uint8_t byte) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
	spi_w_bytes(&MPU9250_SPI, address, &byte, 1);
 800116c:	1dba      	adds	r2, r7, #6
 800116e:	79f9      	ldrb	r1, [r7, #7]
 8001170:	2301      	movs	r3, #1
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <mpu_w_reg+0x24>)
 8001174:	f7ff ff84 	bl	8001080 <spi_w_bytes>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000254 	.word	0x20000254

08001184 <mpu_r_regs>:
 * @brief   read mpu9250 regs though spi
 * @param   address: address of reg to write
 * @param   num: number of byte to read
 * @return  read bytes array
 * */
static void mpu_r_regs(uint8_t address, uint8_t num) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
	spi_r_bytes(&MPU9250_SPI, address, num);
 8001194:	79ba      	ldrb	r2, [r7, #6]
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4619      	mov	r1, r3
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <mpu_r_regs+0x24>)
 800119c:	f7ff ffac 	bl	80010f8 <spi_r_bytes>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000254 	.word	0x20000254

080011ac <mpu_w_ak8963_reg>:
/*
 * @brief   write AK8963 regs though I2C in MPU9250
 * @param   address: address of AK8963 reg to write
 * @param   byte: byte to write
 * */
static void mpu_w_ak8963_reg(uint8_t address, uint8_t byte) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	460a      	mov	r2, r1
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	4613      	mov	r3, r2
 80011ba:	71bb      	strb	r3, [r7, #6]
	mpu_w_reg(I2C_SLV0_ADDR, AK8963_I2C_ADDR);
 80011bc:	210c      	movs	r1, #12
 80011be:	2025      	movs	r0, #37	; 0x25
 80011c0:	f7ff ffcc 	bl	800115c <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_REG, address);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4619      	mov	r1, r3
 80011c8:	2026      	movs	r0, #38	; 0x26
 80011ca:	f7ff ffc7 	bl	800115c <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_DO, byte);
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	4619      	mov	r1, r3
 80011d2:	2063      	movs	r0, #99	; 0x63
 80011d4:	f7ff ffc2 	bl	800115c <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_CTRL, 0x81);
 80011d8:	2181      	movs	r1, #129	; 0x81
 80011da:	2027      	movs	r0, #39	; 0x27
 80011dc:	f7ff ffbe 	bl	800115c <mpu_w_reg>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <mpu_r_ak8963_regs>:
 * @brief read AK8963 regs though I2C in MPU9250
 * @param   address: first address of AK8963 regs to read
 * @param   num: number of byte to read
 * @return  read bytes array
 * */
static void mpu_r_ak8963_regs(uint8_t address, uint8_t num) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
	mpu_w_reg(I2C_SLV0_ADDR, AK8963_I2C_ADDR | 0x80);
 80011f8:	218c      	movs	r1, #140	; 0x8c
 80011fa:	2025      	movs	r0, #37	; 0x25
 80011fc:	f7ff ffae 	bl	800115c <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_REG, address);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4619      	mov	r1, r3
 8001204:	2026      	movs	r0, #38	; 0x26
 8001206:	f7ff ffa9 	bl	800115c <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_CTRL, 0x80 | num);
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	2027      	movs	r0, #39	; 0x27
 8001216:	f7ff ffa1 	bl	800115c <mpu_w_reg>
	HAL_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f000 fdfe 	bl	8001e1c <HAL_Delay>
	mpu_r_regs(EXT_SENS_DATA_00, num);
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	4619      	mov	r1, r3
 8001224:	2049      	movs	r0, #73	; 0x49
 8001226:	f7ff ffad 	bl	8001184 <mpu_r_regs>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <mpu_r_ak8963_WhoAmI>:
/*
 * @brief   read ak8963 WHO_AM_I reg
 * @return  AK8963 WHO_AM_I value, expected to be 0x48
 * */
uint8_t mpu_r_ak8963_WhoAmI(MPU9250 *mpu) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	mpu_r_ak8963_regs(AK8963_WHOAMI_REG, 1);
 800123c:	2101      	movs	r1, #1
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff ffd2 	bl	80011e8 <mpu_r_ak8963_regs>
	return dataBuf[0];
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <mpu_r_ak8963_WhoAmI+0x1c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001fc 	.word	0x200001fc

08001254 <mpu_r_WhoAmI>:
/*
 * @brief   read mpu9250(mpu6500) WHO_AM_I reg
 * @return  mpu9250(mpu6500) WHO_AM_I value, expected to be 0x48
 * */
uint8_t mpu_r_WhoAmI(MPU9250 *mpu) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	mpu_r_regs(WHO_AM_I, 1);
 800125c:	2101      	movs	r1, #1
 800125e:	2075      	movs	r0, #117	; 0x75
 8001260:	f7ff ff90 	bl	8001184 <mpu_r_regs>
	return dataBuf[0];
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <mpu_r_WhoAmI+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200001fc 	.word	0x200001fc

08001274 <MPU9250_StructInit>:
/*
 * @brief   init origin data
 * */
static void MPU9250_StructInit(MPU9250 *mpu) {
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < 3; i++) {
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e02b      	b.n	80012da <MPU9250_StructInit+0x66>
		mpu->mpu_data.Accel[i] = 0;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	3304      	adds	r3, #4
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
		mpu->mpu_data.Gyro[i] = 0;
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f04f 0100 	mov.w	r1, #0
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		mpu->mpu_data.Magn[i] = 0;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	330a      	adds	r3, #10
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]

		mpu->mpu_data.Accel_row[i] = 0;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2100      	movs	r1, #0
 80012b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		mpu->mpu_data.Gyro_row[i] = 0;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	2200      	movs	r2, #0
 80012c4:	80da      	strh	r2, [r3, #6]
		mpu->mpu_data.Magn_row[i] = 0.0;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	3304      	adds	r3, #4
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	2200      	movs	r2, #0
 80012d2:	809a      	strh	r2, [r3, #4]
	for (uint8_t i = 0; i < 3; i++) {
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	3301      	adds	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d9d0      	bls.n	8001282 <MPU9250_StructInit+0xe>
	}
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <MPU9250_Init>:
/*
 * @brief   init mpu9250
 * */
uint8_t MPU9250_Init(MPU9250 *mpu) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	MPU9250_StructInit(mpu);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ffbd 	bl	8001274 <MPU9250_StructInit>

	mpu_w_reg(PWR_MGMT_1, (uint8_t) 0x80); // reset MPU9250, reg107
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	206b      	movs	r0, #107	; 0x6b
 80012fe:	f7ff ff2d 	bl	800115c <mpu_w_reg>
	HAL_Delay(10);
 8001302:	200a      	movs	r0, #10
 8001304:	f000 fd8a 	bl	8001e1c <HAL_Delay>
	mpu_w_reg(USER_CTRL, (uint8_t) 0x20); // enable I2C master mode, reg106
 8001308:	2120      	movs	r1, #32
 800130a:	206a      	movs	r0, #106	; 0x6a
 800130c:	f7ff ff26 	bl	800115c <mpu_w_reg>
	mpu_w_reg(I2C_MST_CTRL, (uint8_t) 0x0D); // set I2C clock speed to 400kHz, reg36
 8001310:	210d      	movs	r1, #13
 8001312:	2024      	movs	r0, #36	; 0x24
 8001314:	f7ff ff22 	bl	800115c <mpu_w_reg>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x00); // set AK8963 to power down
 8001318:	2100      	movs	r1, #0
 800131a:	200a      	movs	r0, #10
 800131c:	f7ff ff46 	bl	80011ac <mpu_w_ak8963_reg>
	mpu_w_reg(PWR_MGMT_1, (uint8_t) 0x80); // reset MPU9250, Bit[7] will auto clear
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	206b      	movs	r0, #107	; 0x6b
 8001324:	f7ff ff1a 	bl	800115c <mpu_w_reg>
	HAL_Delay(10);
 8001328:	200a      	movs	r0, #10
 800132a:	f000 fd77 	bl	8001e1c <HAL_Delay>
	mpu_w_ak8963_reg(AK8963_CNTL2_REG, AK8963_CNTL2_SRST); // reset AK8963
 800132e:	2101      	movs	r1, #1
 8001330:	200b      	movs	r0, #11
 8001332:	f7ff ff3b 	bl	80011ac <mpu_w_ak8963_reg>
	mpu_w_reg(PWR_MGMT_1, (uint8_t) 0x01); // select clock source
 8001336:	2101      	movs	r1, #1
 8001338:	206b      	movs	r0, #107	; 0x6b
 800133a:	f7ff ff0f 	bl	800115c <mpu_w_reg>
	mpu_w_reg(PWR_MGMT_2, (uint8_t) 0x00); // enable accel and gyro
 800133e:	2100      	movs	r1, #0
 8001340:	206c      	movs	r0, #108	; 0x6c
 8001342:	f7ff ff0b 	bl	800115c <mpu_w_reg>

	/* init GYRO and ACCEL */
	mpu_w_reg(SMPLRT_DIV, (uint8_t) 0x00); // SAMPLE_RATE= Internal_Sample_Rate / (1 + SMPLRT_DIV), Internal_Sample_Rate==8K
 8001346:	2100      	movs	r1, #0
 8001348:	2019      	movs	r0, #25
 800134a:	f7ff ff07 	bl	800115c <mpu_w_reg>
	mpu_w_reg(GYRO_CONFIG, (uint8_t) MPU9250_Gyro_Range_2000dps); // gyro full scale select
 800134e:	2118      	movs	r1, #24
 8001350:	201b      	movs	r0, #27
 8001352:	f7ff ff03 	bl	800115c <mpu_w_reg>
	mpu_w_reg(ACCEL_CONFIG, (uint8_t) MPU9250_Accel_Range_16G); // accel full scale select
 8001356:	2118      	movs	r1, #24
 8001358:	201c      	movs	r0, #28
 800135a:	f7ff feff 	bl	800115c <mpu_w_reg>
	mpu_w_reg(ACCEL_CONFIG_2, (uint8_t) MPU9250_Accel_DLPFBandwidth_460);
 800135e:	2100      	movs	r1, #0
 8001360:	201d      	movs	r0, #29
 8001362:	f7ff fefb 	bl	800115c <mpu_w_reg>
	mpu_w_reg(CONFIG, (uint8_t) MPU9250_Gyro_DLPFBandwidth_250);
 8001366:	2100      	movs	r1, #0
 8001368:	201a      	movs	r0, #26
 800136a:	f7ff fef7 	bl	800115c <mpu_w_reg>
	/* init MAG */
	mpu_w_reg(USER_CTRL, (uint8_t) 0x20); // enable I2C master mode
 800136e:	2120      	movs	r1, #32
 8001370:	206a      	movs	r0, #106	; 0x6a
 8001372:	f7ff fef3 	bl	800115c <mpu_w_reg>
	mpu_w_reg(I2C_MST_CTRL, (uint8_t) 0x0D); // set I2C clock speed to 400kHz, reg36
 8001376:	210d      	movs	r1, #13
 8001378:	2024      	movs	r0, #36	; 0x24
 800137a:	f7ff feef 	bl	800115c <mpu_w_reg>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x00); // set AK8963 to power down
 800137e:	2100      	movs	r1, #0
 8001380:	200a      	movs	r0, #10
 8001382:	f7ff ff13 	bl	80011ac <mpu_w_ak8963_reg>
	HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f000 fd48 	bl	8001e1c <HAL_Delay>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x0f); // set AK8963 to Fuse ROM access mode
 800138c:	210f      	movs	r1, #15
 800138e:	200a      	movs	r0, #10
 8001390:	f7ff ff0c 	bl	80011ac <mpu_w_ak8963_reg>
	HAL_Delay(100);
 8001394:	2064      	movs	r0, #100	; 0x64
 8001396:	f000 fd41 	bl	8001e1c <HAL_Delay>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x00); // set AK8963 to power down
 800139a:	2100      	movs	r1, #0
 800139c:	200a      	movs	r0, #10
 800139e:	f7ff ff05 	bl	80011ac <mpu_w_ak8963_reg>
	HAL_Delay(100);
 80013a2:	2064      	movs	r0, #100	; 0x64
 80013a4:	f000 fd3a 	bl	8001e1c <HAL_Delay>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x16); // AK8963 working on Continuous measurement mode 2 & 16-bit output
 80013a8:	2116      	movs	r1, #22
 80013aa:	200a      	movs	r0, #10
 80013ac:	f7ff fefe 	bl	80011ac <mpu_w_ak8963_reg>
	HAL_Delay(100);
 80013b0:	2064      	movs	r0, #100	; 0x64
 80013b2:	f000 fd33 	bl	8001e1c <HAL_Delay>
	mpu_w_reg(PWR_MGMT_1, (uint8_t) 0x01); // select clock source
 80013b6:	2101      	movs	r1, #1
 80013b8:	206b      	movs	r0, #107	; 0x6b
 80013ba:	f7ff fecf 	bl	800115c <mpu_w_reg>
	mpu_r_ak8963_regs(MAG_XOUT_L, 7);
 80013be:	2107      	movs	r1, #7
 80013c0:	2003      	movs	r0, #3
 80013c2:	f7ff ff11 	bl	80011e8 <mpu_r_ak8963_regs>

	return 0x00;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <MPU9250_ReadAccel>:
/*
 * @brief   read accel origin value and calculate real value
 *          data will be stored in mpu
 * */
void MPU9250_ReadAccel(MPU9250 *mpu) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	// m/s
	mpu_r_regs(ACCEL_XOUT_H, 6);
 80013d8:	2106      	movs	r1, #6
 80013da:	203b      	movs	r0, #59	; 0x3b
 80013dc:	f7ff fed2 	bl	8001184 <mpu_r_regs>
	// calculate x axis
	mpu->mpu_data.Accel_row[0] = (dataBuf[0] << 8) | dataBuf[1];
 80013e0:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <MPU9250_ReadAccel+0xf8>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <MPU9250_ReadAccel+0xf8>)
 80013ea:	785b      	ldrb	r3, [r3, #1]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	801a      	strh	r2, [r3, #0]
	mpu->mpu_data.Accel[0] = (float) mpu->mpu_data.Accel_row[0] / 208.980;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fc4d 	bl	8000c9c <__aeabi_i2f>
 8001402:	4603      	mov	r3, r0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f80f 	bl	8000428 <__aeabi_f2d>
 800140a:	a32d      	add	r3, pc, #180	; (adr r3, 80014c0 <MPU9250_ReadAccel+0xf0>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff f98c 	bl	800072c <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff fb34 	bl	8000a88 <__aeabi_d2f>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	615a      	str	r2, [r3, #20]

	// calculate y axis
	mpu->mpu_data.Accel_row[1] = (dataBuf[2] << 8) | dataBuf[3];
 8001426:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <MPU9250_ReadAccel+0xf8>)
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <MPU9250_ReadAccel+0xf8>)
 8001430:	78db      	ldrb	r3, [r3, #3]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21a      	sxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	805a      	strh	r2, [r3, #2]
	mpu->mpu_data.Accel[1] = (float) mpu->mpu_data.Accel_row[1] / 208.980;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	885b      	ldrh	r3, [r3, #2]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc2a 	bl	8000c9c <__aeabi_i2f>
 8001448:	4603      	mov	r3, r0
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ffec 	bl	8000428 <__aeabi_f2d>
 8001450:	a31b      	add	r3, pc, #108	; (adr r3, 80014c0 <MPU9250_ReadAccel+0xf0>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f969 	bl	800072c <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fb11 	bl	8000a88 <__aeabi_d2f>
 8001466:	4602      	mov	r2, r0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]

	// calculate z axis
	mpu->mpu_data.Accel_row[2] = (dataBuf[4] << 8) | dataBuf[5];
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MPU9250_ReadAccel+0xf8>)
 800146e:	791b      	ldrb	r3, [r3, #4]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MPU9250_ReadAccel+0xf8>)
 8001476:	795b      	ldrb	r3, [r3, #5]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	809a      	strh	r2, [r3, #4]
	mpu->mpu_data.Accel[2] = (float) mpu->mpu_data.Accel_row[2] / 208.980;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	889b      	ldrh	r3, [r3, #4]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fc07 	bl	8000c9c <__aeabi_i2f>
 800148e:	4603      	mov	r3, r0
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe ffc9 	bl	8000428 <__aeabi_f2d>
 8001496:	a30a      	add	r3, pc, #40	; (adr r3, 80014c0 <MPU9250_ReadAccel+0xf0>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f946 	bl	800072c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff faee 	bl	8000a88 <__aeabi_d2f>
 80014ac:	4602      	mov	r2, r0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	61da      	str	r2, [r3, #28]
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	f3af 8000 	nop.w
 80014c0:	28f5c28f 	.word	0x28f5c28f
 80014c4:	406a1f5c 	.word	0x406a1f5c
 80014c8:	200001fc 	.word	0x200001fc
 80014cc:	00000000 	.word	0x00000000

080014d0 <MPU9250_ReadGyro>:
/*
 * @brief   read gyro origin value and calculate real value
 *          data will be stored in mpu
 * */
void MPU9250_ReadGyro(MPU9250 *mpu) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	// d/s
	mpu_r_regs(GYRO_XOUT_H, 6);
 80014d8:	2106      	movs	r1, #6
 80014da:	2043      	movs	r0, #67	; 0x43
 80014dc:	f7ff fe52 	bl	8001184 <mpu_r_regs>
	// calculate x axis
	mpu->mpu_data.Gyro_row[0] = (dataBuf[0] << 8) | dataBuf[1];
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <MPU9250_ReadGyro+0xe0>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <MPU9250_ReadGyro+0xe0>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	80da      	strh	r2, [r3, #6]
	mpu->mpu_data.Gyro[0] = mpu->mpu_data.Gyro_row[0] / 16.384;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	88db      	ldrh	r3, [r3, #6]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe ff81 	bl	8000404 <__aeabi_i2d>
 8001502:	a329      	add	r3, pc, #164	; (adr r3, 80015a8 <MPU9250_ReadGyro+0xd8>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f910 	bl	800072c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fab8 	bl	8000a88 <__aeabi_d2f>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	621a      	str	r2, [r3, #32]

	// calculate y axis
	mpu->mpu_data.Gyro_row[1] = (dataBuf[2] << 8) | dataBuf[3];
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <MPU9250_ReadGyro+0xe0>)
 8001520:	789b      	ldrb	r3, [r3, #2]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <MPU9250_ReadGyro+0xe0>)
 8001528:	78db      	ldrb	r3, [r3, #3]
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21a      	sxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	811a      	strh	r2, [r3, #8]
	mpu->mpu_data.Gyro[1] = mpu->mpu_data.Gyro_row[1] / 16.384;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	891b      	ldrh	r3, [r3, #8]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ff62 	bl	8000404 <__aeabi_i2d>
 8001540:	a319      	add	r3, pc, #100	; (adr r3, 80015a8 <MPU9250_ReadGyro+0xd8>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f8f1 	bl	800072c <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fa99 	bl	8000a88 <__aeabi_d2f>
 8001556:	4602      	mov	r2, r0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	625a      	str	r2, [r3, #36]	; 0x24

	// calculate z axis
	mpu->mpu_data.Gyro_row[2] = (dataBuf[4] << 8) | dataBuf[5];
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MPU9250_ReadGyro+0xe0>)
 800155e:	791b      	ldrb	r3, [r3, #4]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MPU9250_ReadGyro+0xe0>)
 8001566:	795b      	ldrb	r3, [r3, #5]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21a      	sxth	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	815a      	strh	r2, [r3, #10]
	mpu->mpu_data.Gyro[2] = mpu->mpu_data.Gyro_row[2] / 16.384;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	895b      	ldrh	r3, [r3, #10]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff43 	bl	8000404 <__aeabi_i2d>
 800157e:	a30a      	add	r3, pc, #40	; (adr r3, 80015a8 <MPU9250_ReadGyro+0xd8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f8d2 	bl	800072c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fa7a 	bl	8000a88 <__aeabi_d2f>
 8001594:	4602      	mov	r2, r0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80015ac:	4030624d 	.word	0x4030624d
 80015b0:	200001fc 	.word	0x200001fc
 80015b4:	00000000 	.word	0x00000000

080015b8 <MPU9250_ReadMag>:
 *          data will be stored in mpu
 *
 * @notice  this part may have some bugs, but I guess my GY-91 is broken
 *          until I get my new module, I can't judge where the problem is
 * */
void MPU9250_ReadMag(MPU9250 *mpu) {
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	uint8_t mag_adjust[3] = { 0 };
 80015c0:	4ba1      	ldr	r3, [pc, #644]	; (8001848 <MPU9250_ReadMag+0x290>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	82bb      	strh	r3, [r7, #20]
 80015c6:	2300      	movs	r3, #0
 80015c8:	75bb      	strb	r3, [r7, #22]
	uint8_t mag_buffer[6] = { 0 };
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	2300      	movs	r3, #0
 80015d0:	823b      	strh	r3, [r7, #16]

	mpu_r_ak8963_regs(AK8963_ASAX, 3);
 80015d2:	2103      	movs	r1, #3
 80015d4:	2010      	movs	r0, #16
 80015d6:	f7ff fe07 	bl	80011e8 <mpu_r_ak8963_regs>
	mag_adjust[0] = dataBuf[0];
 80015da:	4b9c      	ldr	r3, [pc, #624]	; (800184c <MPU9250_ReadMag+0x294>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	753b      	strb	r3, [r7, #20]
	mag_adjust[1] = dataBuf[1];
 80015e0:	4b9a      	ldr	r3, [pc, #616]	; (800184c <MPU9250_ReadMag+0x294>)
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	757b      	strb	r3, [r7, #21]
	mag_adjust[2] = dataBuf[2];
 80015e6:	4b99      	ldr	r3, [pc, #612]	; (800184c <MPU9250_ReadMag+0x294>)
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	75bb      	strb	r3, [r7, #22]

	// read AK8963_ST2_REG is necessary
	// ST2 register has a role as data reading end register(on page 51)

	mpu_r_ak8963_regs(MAG_XOUT_L, 1);
 80015ec:	2101      	movs	r1, #1
 80015ee:	2003      	movs	r0, #3
 80015f0:	f7ff fdfa 	bl	80011e8 <mpu_r_ak8963_regs>
	mag_buffer[0] = dataBuf[0];
 80015f4:	4b95      	ldr	r3, [pc, #596]	; (800184c <MPU9250_ReadMag+0x294>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	733b      	strb	r3, [r7, #12]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1); // data read finish reg
 80015fa:	2101      	movs	r1, #1
 80015fc:	2009      	movs	r0, #9
 80015fe:	f7ff fdf3 	bl	80011e8 <mpu_r_ak8963_regs>
	mpu_r_ak8963_regs(MAG_XOUT_H, 1);
 8001602:	2101      	movs	r1, #1
 8001604:	2004      	movs	r0, #4
 8001606:	f7ff fdef 	bl	80011e8 <mpu_r_ak8963_regs>
	mag_buffer[1] = dataBuf[0];
 800160a:	4b90      	ldr	r3, [pc, #576]	; (800184c <MPU9250_ReadMag+0x294>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	737b      	strb	r3, [r7, #13]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 8001610:	2101      	movs	r1, #1
 8001612:	2009      	movs	r0, #9
 8001614:	f7ff fde8 	bl	80011e8 <mpu_r_ak8963_regs>

	mpu_r_ak8963_regs(MAG_YOUT_L, 1);
 8001618:	2101      	movs	r1, #1
 800161a:	2005      	movs	r0, #5
 800161c:	f7ff fde4 	bl	80011e8 <mpu_r_ak8963_regs>
	mag_buffer[2] = dataBuf[0];
 8001620:	4b8a      	ldr	r3, [pc, #552]	; (800184c <MPU9250_ReadMag+0x294>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	73bb      	strb	r3, [r7, #14]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 8001626:	2101      	movs	r1, #1
 8001628:	2009      	movs	r0, #9
 800162a:	f7ff fddd 	bl	80011e8 <mpu_r_ak8963_regs>
	mpu_r_ak8963_regs(MAG_YOUT_H, 1);
 800162e:	2101      	movs	r1, #1
 8001630:	2006      	movs	r0, #6
 8001632:	f7ff fdd9 	bl	80011e8 <mpu_r_ak8963_regs>
	mag_buffer[3] = dataBuf[0];
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <MPU9250_ReadMag+0x294>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	73fb      	strb	r3, [r7, #15]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 800163c:	2101      	movs	r1, #1
 800163e:	2009      	movs	r0, #9
 8001640:	f7ff fdd2 	bl	80011e8 <mpu_r_ak8963_regs>

	mpu_r_ak8963_regs(MAG_ZOUT_L, 1);
 8001644:	2101      	movs	r1, #1
 8001646:	2007      	movs	r0, #7
 8001648:	f7ff fdce 	bl	80011e8 <mpu_r_ak8963_regs>
	mag_buffer[4] = dataBuf[0];
 800164c:	4b7f      	ldr	r3, [pc, #508]	; (800184c <MPU9250_ReadMag+0x294>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	743b      	strb	r3, [r7, #16]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 8001652:	2101      	movs	r1, #1
 8001654:	2009      	movs	r0, #9
 8001656:	f7ff fdc7 	bl	80011e8 <mpu_r_ak8963_regs>
	mpu_r_ak8963_regs(MAG_ZOUT_H, 1);
 800165a:	2101      	movs	r1, #1
 800165c:	2008      	movs	r0, #8
 800165e:	f7ff fdc3 	bl	80011e8 <mpu_r_ak8963_regs>
	mag_buffer[5] = dataBuf[0];
 8001662:	4b7a      	ldr	r3, [pc, #488]	; (800184c <MPU9250_ReadMag+0x294>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	747b      	strb	r3, [r7, #17]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 8001668:	2101      	movs	r1, #1
 800166a:	2009      	movs	r0, #9
 800166c:	f7ff fdbc 	bl	80011e8 <mpu_r_ak8963_regs>


	mpu->mpu_data.Magn_row[0] = (mag_buffer[1] << 8) | mag_buffer[0];
 8001670:	7b7b      	ldrb	r3, [r7, #13]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	7b3b      	ldrb	r3, [r7, #12]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	819a      	strh	r2, [r3, #12]
	mpu->mpu_data.Magn_row[1] = (mag_buffer[3] << 8) | mag_buffer[2];
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21a      	sxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	81da      	strh	r2, [r3, #14]
	mpu->mpu_data.Magn_row[2] = (mag_buffer[5] << 8) | mag_buffer[4];
 8001694:	7c7b      	ldrb	r3, [r7, #17]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	7c3b      	ldrb	r3, [r7, #16]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	821a      	strh	r2, [r3, #16]

	// calculate real value, check page53
	mpu->mpu_data.Magn[0] = (float) mpu->mpu_data.Magn_row[0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	899b      	ldrh	r3, [r3, #12]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff faf5 	bl	8000c9c <__aeabi_i2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe feb7 	bl	8000428 <__aeabi_f2d>
 80016ba:	4604      	mov	r4, r0
 80016bc:	460d      	mov	r5, r1
			* (((mag_adjust[0] - 128) / 256.0) + 1);
 80016be:	7d3b      	ldrb	r3, [r7, #20]
 80016c0:	3b80      	subs	r3, #128	; 0x80
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe9e 	bl	8000404 <__aeabi_i2d>
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	4b60      	ldr	r3, [pc, #384]	; (8001850 <MPU9250_ReadMag+0x298>)
 80016ce:	f7ff f82d 	bl	800072c <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <MPU9250_ReadMag+0x29c>)
 80016e0:	f7fe fd44 	bl	800016c <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe fef4 	bl	80004d8 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff f9c6 	bl	8000a88 <__aeabi_d2f>
 80016fc:	4602      	mov	r2, r0
	mpu->mpu_data.Magn[0] = (float) mpu->mpu_data.Magn_row[0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->mpu_data.Magn[0] = mpu->mpu_data.Magn_row[0] * 0.15;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	899b      	ldrh	r3, [r3, #12]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fe7b 	bl	8000404 <__aeabi_i2d>
 800170e:	a34c      	add	r3, pc, #304	; (adr r3, 8001840 <MPU9250_ReadMag+0x288>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe fee0 	bl	80004d8 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f9b2 	bl	8000a88 <__aeabi_d2f>
 8001724:	4602      	mov	r2, r0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c

	mpu->mpu_data.Magn[1] = (float) mpu->mpu_data.Magn_row[1]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	89db      	ldrh	r3, [r3, #14]
 800172e:	b21b      	sxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fab3 	bl	8000c9c <__aeabi_i2f>
 8001736:	4603      	mov	r3, r0
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fe75 	bl	8000428 <__aeabi_f2d>
 800173e:	4604      	mov	r4, r0
 8001740:	460d      	mov	r5, r1
			* (((mag_adjust[1] - 128) / 256.0) + 1);
 8001742:	7d7b      	ldrb	r3, [r7, #21]
 8001744:	3b80      	subs	r3, #128	; 0x80
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe5c 	bl	8000404 <__aeabi_i2d>
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <MPU9250_ReadMag+0x298>)
 8001752:	f7fe ffeb 	bl	800072c <__aeabi_ddiv>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <MPU9250_ReadMag+0x29c>)
 8001764:	f7fe fd02 	bl	800016c <__adddf3>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4620      	mov	r0, r4
 800176e:	4629      	mov	r1, r5
 8001770:	f7fe feb2 	bl	80004d8 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff f984 	bl	8000a88 <__aeabi_d2f>
 8001780:	4602      	mov	r2, r0
	mpu->mpu_data.Magn[1] = (float) mpu->mpu_data.Magn_row[1]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
	mpu->mpu_data.Magn[1] = mpu->mpu_data.Magn_row[1] * 0.15;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	89db      	ldrh	r3, [r3, #14]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe39 	bl	8000404 <__aeabi_i2d>
 8001792:	a32b      	add	r3, pc, #172	; (adr r3, 8001840 <MPU9250_ReadMag+0x288>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe fe9e 	bl	80004d8 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff f970 	bl	8000a88 <__aeabi_d2f>
 80017a8:	4602      	mov	r2, r0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30

	mpu->mpu_data.Magn[2] = (float) mpu->mpu_data.Magn_row[2]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	8a1b      	ldrh	r3, [r3, #16]
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fa71 	bl	8000c9c <__aeabi_i2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe33 	bl	8000428 <__aeabi_f2d>
 80017c2:	4604      	mov	r4, r0
 80017c4:	460d      	mov	r5, r1
			* (((mag_adjust[2] - 128) / 256.0) + 1);
 80017c6:	7dbb      	ldrb	r3, [r7, #22]
 80017c8:	3b80      	subs	r3, #128	; 0x80
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fe1a 	bl	8000404 <__aeabi_i2d>
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MPU9250_ReadMag+0x298>)
 80017d6:	f7fe ffa9 	bl	800072c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MPU9250_ReadMag+0x29c>)
 80017e8:	f7fe fcc0 	bl	800016c <__adddf3>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7fe fe70 	bl	80004d8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f942 	bl	8000a88 <__aeabi_d2f>
 8001804:	4602      	mov	r2, r0
	mpu->mpu_data.Magn[2] = (float) mpu->mpu_data.Magn_row[2]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
	mpu->mpu_data.Magn[2] = mpu->mpu_data.Magn_row[2] * 0.15;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	8a1b      	ldrh	r3, [r3, #16]
 800180e:	b21b      	sxth	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fdf7 	bl	8000404 <__aeabi_i2d>
 8001816:	a30a      	add	r3, pc, #40	; (adr r3, 8001840 <MPU9250_ReadMag+0x288>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fe5c 	bl	80004d8 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f92e 	bl	8000a88 <__aeabi_d2f>
 800182c:	4602      	mov	r2, r0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w
 8001840:	33333333 	.word	0x33333333
 8001844:	3fc33333 	.word	0x3fc33333
 8001848:	08007084 	.word	0x08007084
 800184c:	200001fc 	.word	0x200001fc
 8001850:	40700000 	.word	0x40700000
 8001854:	3ff00000 	.word	0x3ff00000

08001858 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_SPI1_Init+0x64>)
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <MX_SPI1_Init+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_SPI1_Init+0x64>)
 8001864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_SPI1_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_SPI1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_SPI1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_SPI1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_SPI1_Init+0x64>)
 8001884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_SPI1_Init+0x64>)
 800188c:	2208      	movs	r2, #8
 800188e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <MX_SPI1_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_SPI1_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <MX_SPI1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_SPI1_Init+0x64>)
 80018a4:	220a      	movs	r2, #10
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_SPI1_Init+0x64>)
 80018aa:	f001 fa4f 	bl	8002d4c <HAL_SPI_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018b4:	f7ff fbbb 	bl	800102e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000254 	.word	0x20000254
 80018c0:	40013000 	.word	0x40013000

080018c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_SPI_MspInit+0x88>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d12f      	bne.n	8001944 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 80018ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001914:	23a0      	movs	r3, #160	; 0xa0
 8001916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	480b      	ldr	r0, [pc, #44]	; (8001954 <HAL_SPI_MspInit+0x90>)
 8001928:	f000 fc5a 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_SPI_MspInit+0x90>)
 8001940:	f000 fc4e 	bl	80021e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40013000 	.word	0x40013000
 8001950:	40021000 	.word	0x40021000
 8001954:	40010800 	.word	0x40010800

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_MspInit+0x5c>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <HAL_MspInit+0x5c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6193      	str	r3, [r2, #24]
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_MspInit+0x5c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_MspInit+0x5c>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_MspInit+0x5c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_MspInit+0x5c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_MspInit+0x60>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_MspInit+0x60>)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010000 	.word	0x40010000

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <NMI_Handler+0x4>

080019c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <MemManage_Handler+0x4>

080019ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <UsageFault_Handler+0x4>

080019da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a02:	f000 f9ef 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <USART1_IRQHandler+0x10>)
 8001a12:	f001 fff3 	bl	80039fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200006ac 	.word	0x200006ac

08001a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	return 1;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <_kill>:

int _kill(int pid, int sig)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a38:	f002 fbd8 	bl	80041ec <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2216      	movs	r2, #22
 8001a40:	601a      	str	r2, [r3, #0]
	return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_exit>:

void _exit (int status)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a56:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffe7 	bl	8001a2e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a60:	e7fe      	b.n	8001a60 <_exit+0x12>

08001a62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e00a      	b.n	8001a8a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a74:	f3af 8000 	nop.w
 8001a78:	4601      	mov	r1, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	60ba      	str	r2, [r7, #8]
 8001a80:	b2ca      	uxtb	r2, r1
 8001a82:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dbf0      	blt.n	8001a74 <_read+0x12>
	}

return len;
 8001a92:	687b      	ldr	r3, [r7, #4]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e009      	b.n	8001ac2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	60ba      	str	r2, [r7, #8]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dbf1      	blt.n	8001aae <_write+0x12>
	}
	return len;
 8001aca:	687b      	ldr	r3, [r7, #4]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_close>:

int _close(int file)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afa:	605a      	str	r2, [r3, #4]
	return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <_isatty>:

int _isatty(int file)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	return 1;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f002 fb42 	bl	80041ec <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20005000 	.word	0x20005000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	20000210 	.word	0x20000210
 8001b9c:	20000b08 	.word	0x20000b08

08001ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <MX_USART1_UART_Init+0x50>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001be4:	f001 fe2a 	bl	800383c <HAL_UART_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bee:	f7ff fa1e 	bl	800102e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200006ac 	.word	0x200006ac
 8001bfc:	40013800 	.word	0x40013800

08001c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <HAL_UART_MspInit+0x9c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d139      	bne.n	8001c94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_UART_MspInit+0xa0>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_UART_MspInit+0xa0>)
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <HAL_UART_MspInit+0xa0>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_UART_MspInit+0xa0>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a18      	ldr	r2, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0xa0>)
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_UART_MspInit+0xa0>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <HAL_UART_MspInit+0xa4>)
 8001c66:	f000 fabb 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <HAL_UART_MspInit+0xa4>)
 8001c80:	f000 faae 	bl	80021e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	2025      	movs	r0, #37	; 0x25
 8001c8a:	f000 f9c2 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c8e:	2025      	movs	r0, #37	; 0x25
 8001c90:	f000 f9db 	bl	800204a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010800 	.word	0x40010800

08001ca8 <u1_printf>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void u1_printf(char *fmt, ...) {
 8001ca8:	b40f      	push	{r0, r1, r2, r3}
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	80fb      	strh	r3, [r7, #6]
	va_list ap;
	memset(USART1_TxBUF, 0, USART1_MAX_SENDLEN);
 8001cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <u1_printf+0x5c>)
 8001cbc:	f002 fac0 	bl	8004240 <memset>
	va_start(ap, fmt);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	603b      	str	r3, [r7, #0]
	vsprintf((char*) USART1_TxBUF, fmt, ap);
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	6939      	ldr	r1, [r7, #16]
 8001cca:	480e      	ldr	r0, [pc, #56]	; (8001d04 <u1_printf+0x5c>)
 8001ccc:	f002 ff36 	bl	8004b3c <vsiprintf>
	va_end(ap);
	i = strlen((const char*) USART1_TxBUF);
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <u1_printf+0x5c>)
 8001cd2:	f7fe fa3d 	bl	8000150 <strlen>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, USART1_TxBUF, i, USART1_MAX_SENDLEN);
 8001cda:	88fa      	ldrh	r2, [r7, #6]
 8001cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce0:	4908      	ldr	r1, [pc, #32]	; (8001d04 <u1_printf+0x5c>)
 8001ce2:	4809      	ldr	r0, [pc, #36]	; (8001d08 <u1_printf+0x60>)
 8001ce4:	f001 fdf7 	bl	80038d6 <HAL_UART_Transmit>

	memset(USART1_TxBUF, 0, USART1_MAX_SENDLEN);
 8001ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cec:	2100      	movs	r1, #0
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <u1_printf+0x5c>)
 8001cf0:	f002 faa6 	bl	8004240 <memset>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cfe:	b004      	add	sp, #16
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	200002ac 	.word	0x200002ac
 8001d08:	200006ac 	.word	0x200006ac

08001d0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d0e:	490d      	ldr	r1, [pc, #52]	; (8001d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d24:	4c0a      	ldr	r4, [pc, #40]	; (8001d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d32:	f7ff ff35 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f002 fa5f 	bl	80041f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d3a:	f7ff f85b 	bl	8000df4 <main>
  bx lr
 8001d3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d48:	0800749c 	.word	0x0800749c
  ldr r2, =_sbss
 8001d4c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d50:	20000b04 	.word	0x20000b04

08001d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC1_2_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_Init+0x28>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_Init+0x28>)
 8001d62:	f043 0310 	orr.w	r3, r3, #16
 8001d66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f947 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6e:	200f      	movs	r0, #15
 8001d70:	f000 f808 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fdf0 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40022000 	.word	0x40022000

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f95f 	bl	8002066 <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f927 	bl	8002012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_IncTick+0x1c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_IncTick+0x20>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a03      	ldr	r2, [pc, #12]	; (8001e04 <HAL_IncTick+0x20>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000af0 	.word	0x20000af0

08001e08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <HAL_GetTick+0x10>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	20000af0 	.word	0x20000af0

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff fff0 	bl	8001e08 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffe0 	bl	8001e08 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4906      	ldr	r1, [pc, #24]	; (8001efc <__NVIC_EnableIRQ+0x34>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc8:	d301      	bcc.n	8001fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <SysTick_Config+0x40>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f7ff ff90 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff2d 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002024:	f7ff ff42 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8002028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f7ff ff90 	bl	8001f54 <NVIC_EncodePriority>
 8002034:	4602      	mov	r2, r0
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff5f 	bl	8001f00 <__NVIC_SetPriority>
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff35 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffa2 	bl	8001fb8 <SysTick_Config>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002090:	2b02      	cmp	r3, #2
 8002092:	d008      	beq.n	80020a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2204      	movs	r2, #4
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e020      	b.n	80020e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 020e 	bic.w	r2, r2, #14
 80020b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f202 	lsl.w	r2, r1, r2
 80020d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002106:	2b02      	cmp	r3, #2
 8002108:	d005      	beq.n	8002116 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e051      	b.n	80021ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 020e 	bic.w	r2, r2, #14
 8002124:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <HAL_DMA_Abort_IT+0xd0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d029      	beq.n	8002194 <HAL_DMA_Abort_IT+0xa0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a20      	ldr	r2, [pc, #128]	; (80021c8 <HAL_DMA_Abort_IT+0xd4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d022      	beq.n	8002190 <HAL_DMA_Abort_IT+0x9c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <HAL_DMA_Abort_IT+0xd8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d01a      	beq.n	800218a <HAL_DMA_Abort_IT+0x96>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_DMA_Abort_IT+0xdc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d012      	beq.n	8002184 <HAL_DMA_Abort_IT+0x90>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_DMA_Abort_IT+0xe0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d00a      	beq.n	800217e <HAL_DMA_Abort_IT+0x8a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <HAL_DMA_Abort_IT+0xe4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d102      	bne.n	8002178 <HAL_DMA_Abort_IT+0x84>
 8002172:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002176:	e00e      	b.n	8002196 <HAL_DMA_Abort_IT+0xa2>
 8002178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800217c:	e00b      	b.n	8002196 <HAL_DMA_Abort_IT+0xa2>
 800217e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002182:	e008      	b.n	8002196 <HAL_DMA_Abort_IT+0xa2>
 8002184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002188:	e005      	b.n	8002196 <HAL_DMA_Abort_IT+0xa2>
 800218a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218e:	e002      	b.n	8002196 <HAL_DMA_Abort_IT+0xa2>
 8002190:	2310      	movs	r3, #16
 8002192:	e000      	b.n	8002196 <HAL_DMA_Abort_IT+0xa2>
 8002194:	2301      	movs	r3, #1
 8002196:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_DMA_Abort_IT+0xe8>)
 8002198:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
    } 
  }
  return status;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40020008 	.word	0x40020008
 80021c8:	4002001c 	.word	0x4002001c
 80021cc:	40020030 	.word	0x40020030
 80021d0:	40020044 	.word	0x40020044
 80021d4:	40020058 	.word	0x40020058
 80021d8:	4002006c 	.word	0x4002006c
 80021dc:	40020000 	.word	0x40020000

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b08b      	sub	sp, #44	; 0x2c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	e169      	b.n	80024c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021f4:	2201      	movs	r2, #1
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8158 	bne.w	80024c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a9a      	ldr	r2, [pc, #616]	; (8002480 <HAL_GPIO_Init+0x2a0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d05e      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800221c:	4a98      	ldr	r2, [pc, #608]	; (8002480 <HAL_GPIO_Init+0x2a0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d875      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002222:	4a98      	ldr	r2, [pc, #608]	; (8002484 <HAL_GPIO_Init+0x2a4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d058      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002228:	4a96      	ldr	r2, [pc, #600]	; (8002484 <HAL_GPIO_Init+0x2a4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d86f      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800222e:	4a96      	ldr	r2, [pc, #600]	; (8002488 <HAL_GPIO_Init+0x2a8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d052      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002234:	4a94      	ldr	r2, [pc, #592]	; (8002488 <HAL_GPIO_Init+0x2a8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d869      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800223a:	4a94      	ldr	r2, [pc, #592]	; (800248c <HAL_GPIO_Init+0x2ac>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04c      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002240:	4a92      	ldr	r2, [pc, #584]	; (800248c <HAL_GPIO_Init+0x2ac>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d863      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002246:	4a92      	ldr	r2, [pc, #584]	; (8002490 <HAL_GPIO_Init+0x2b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d046      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800224c:	4a90      	ldr	r2, [pc, #576]	; (8002490 <HAL_GPIO_Init+0x2b0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d85d      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002252:	2b12      	cmp	r3, #18
 8002254:	d82a      	bhi.n	80022ac <HAL_GPIO_Init+0xcc>
 8002256:	2b12      	cmp	r3, #18
 8002258:	d859      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800225a:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <HAL_GPIO_Init+0x80>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	080022db 	.word	0x080022db
 8002264:	080022b5 	.word	0x080022b5
 8002268:	080022c7 	.word	0x080022c7
 800226c:	08002309 	.word	0x08002309
 8002270:	0800230f 	.word	0x0800230f
 8002274:	0800230f 	.word	0x0800230f
 8002278:	0800230f 	.word	0x0800230f
 800227c:	0800230f 	.word	0x0800230f
 8002280:	0800230f 	.word	0x0800230f
 8002284:	0800230f 	.word	0x0800230f
 8002288:	0800230f 	.word	0x0800230f
 800228c:	0800230f 	.word	0x0800230f
 8002290:	0800230f 	.word	0x0800230f
 8002294:	0800230f 	.word	0x0800230f
 8002298:	0800230f 	.word	0x0800230f
 800229c:	0800230f 	.word	0x0800230f
 80022a0:	0800230f 	.word	0x0800230f
 80022a4:	080022bd 	.word	0x080022bd
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	4a79      	ldr	r2, [pc, #484]	; (8002494 <HAL_GPIO_Init+0x2b4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022b2:	e02c      	b.n	800230e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	623b      	str	r3, [r7, #32]
          break;
 80022ba:	e029      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	3304      	adds	r3, #4
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e024      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	3308      	adds	r3, #8
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e01f      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	330c      	adds	r3, #12
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e01a      	b.n	8002310 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022e2:	2304      	movs	r3, #4
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e013      	b.n	8002310 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f0:	2308      	movs	r3, #8
 80022f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	611a      	str	r2, [r3, #16]
          break;
 80022fa:	e009      	b.n	8002310 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022fc:	2308      	movs	r3, #8
 80022fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	615a      	str	r2, [r3, #20]
          break;
 8002306:	e003      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x130>
          break;
 800230e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2bff      	cmp	r3, #255	; 0xff
 8002314:	d801      	bhi.n	800231a <HAL_GPIO_Init+0x13a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	e001      	b.n	800231e <HAL_GPIO_Init+0x13e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	d802      	bhi.n	800232c <HAL_GPIO_Init+0x14c>
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	e002      	b.n	8002332 <HAL_GPIO_Init+0x152>
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	3b08      	subs	r3, #8
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	210f      	movs	r1, #15
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	6a39      	ldr	r1, [r7, #32]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	431a      	orrs	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80b1 	beq.w	80024c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_GPIO_Init+0x2b8>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_GPIO_Init+0x2b8>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_GPIO_Init+0x2b8>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002378:	4a48      	ldr	r2, [pc, #288]	; (800249c <HAL_GPIO_Init+0x2bc>)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <HAL_GPIO_Init+0x2c0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_GPIO_Init+0x1ec>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3f      	ldr	r2, [pc, #252]	; (80024a4 <HAL_GPIO_Init+0x2c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00d      	beq.n	80023c8 <HAL_GPIO_Init+0x1e8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3e      	ldr	r2, [pc, #248]	; (80024a8 <HAL_GPIO_Init+0x2c8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3d      	ldr	r2, [pc, #244]	; (80024ac <HAL_GPIO_Init+0x2cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_GPIO_Init+0x1e0>
 80023bc:	2303      	movs	r3, #3
 80023be:	e006      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e004      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023cc:	2300      	movs	r3, #0
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023de:	492f      	ldr	r1, [pc, #188]	; (800249c <HAL_GPIO_Init+0x2bc>)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	492c      	ldr	r1, [pc, #176]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	43db      	mvns	r3, r3
 800240e:	4928      	ldr	r1, [pc, #160]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002410:	4013      	ands	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002420:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4922      	ldr	r1, [pc, #136]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	43db      	mvns	r3, r3
 8002436:	491e      	ldr	r1, [pc, #120]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002438:	4013      	ands	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	4918      	ldr	r1, [pc, #96]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	43db      	mvns	r3, r3
 800245e:	4914      	ldr	r1, [pc, #80]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002460:	4013      	ands	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d021      	beq.n	80024b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	490e      	ldr	r1, [pc, #56]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	60cb      	str	r3, [r1, #12]
 800247c:	e021      	b.n	80024c2 <HAL_GPIO_Init+0x2e2>
 800247e:	bf00      	nop
 8002480:	10320000 	.word	0x10320000
 8002484:	10310000 	.word	0x10310000
 8002488:	10220000 	.word	0x10220000
 800248c:	10210000 	.word	0x10210000
 8002490:	10120000 	.word	0x10120000
 8002494:	10110000 	.word	0x10110000
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000
 80024a0:	40010800 	.word	0x40010800
 80024a4:	40010c00 	.word	0x40010c00
 80024a8:	40011000 	.word	0x40011000
 80024ac:	40011400 	.word	0x40011400
 80024b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_GPIO_Init+0x304>)
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	4909      	ldr	r1, [pc, #36]	; (80024e4 <HAL_GPIO_Init+0x304>)
 80024be:	4013      	ands	r3, r2
 80024c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	3301      	adds	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f ae8e 	bne.w	80021f4 <HAL_GPIO_Init+0x14>
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	372c      	adds	r7, #44	; 0x2c
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002504:	e003      	b.n	800250e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	611a      	str	r2, [r3, #16]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e26c      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8087 	beq.w	8002646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002538:	4b92      	ldr	r3, [pc, #584]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b04      	cmp	r3, #4
 8002542:	d00c      	beq.n	800255e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002544:	4b8f      	ldr	r3, [pc, #572]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d112      	bne.n	8002576 <HAL_RCC_OscConfig+0x5e>
 8002550:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d10b      	bne.n	8002576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255e:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d06c      	beq.n	8002644 <HAL_RCC_OscConfig+0x12c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d168      	bne.n	8002644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e246      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x76>
 8002580:	4b80      	ldr	r3, [pc, #512]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e02e      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x98>
 8002596:	4b7b      	ldr	r3, [pc, #492]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7a      	ldr	r2, [pc, #488]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b78      	ldr	r3, [pc, #480]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0xbc>
 80025ba:	4b72      	ldr	r3, [pc, #456]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a71      	ldr	r2, [pc, #452]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff fc08 	bl	8001e08 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff fc04 	bl	8001e08 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1fa      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xe4>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff fbf4 	bl	8001e08 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff fbf0 	bl	8001e08 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1e6      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x10c>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d063      	beq.n	800271a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002652:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800265e:	4b49      	ldr	r3, [pc, #292]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x18c>
 800266a:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x176>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1ba      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4939      	ldr	r1, [pc, #228]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e03a      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7ff fba9 	bl	8001e08 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff fba5 	bl	8001e08 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e19b      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4927      	ldr	r1, [pc, #156]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fb88 	bl	8001e08 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff fb84 	bl	8001e08 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e17a      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03a      	beq.n	800279c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d019      	beq.n	8002762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_RCC_OscConfig+0x274>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002734:	f7ff fb68 	bl	8001e08 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff fb64 	bl	8001e08 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e15a      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800275a:	2001      	movs	r0, #1
 800275c:	f000 fad8 	bl	8002d10 <RCC_Delay>
 8002760:	e01c      	b.n	800279c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_RCC_OscConfig+0x274>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7ff fb4e 	bl	8001e08 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276e:	e00f      	b.n	8002790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7ff fb4a 	bl	8001e08 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d908      	bls.n	8002790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e140      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	42420000 	.word	0x42420000
 800278c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	4b9e      	ldr	r3, [pc, #632]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e9      	bne.n	8002770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80a6 	beq.w	80028f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b97      	ldr	r3, [pc, #604]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b94      	ldr	r3, [pc, #592]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a93      	ldr	r2, [pc, #588]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	61d3      	str	r3, [r2, #28]
 80027c6:	4b91      	ldr	r3, [pc, #580]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d6:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d118      	bne.n	8002814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e2:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a8a      	ldr	r2, [pc, #552]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ee:	f7ff fb0b 	bl	8001e08 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7ff fb07 	bl	8001e08 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b64      	cmp	r3, #100	; 0x64
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0fd      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x312>
 800281c:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a7a      	ldr	r2, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e02d      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x334>
 8002832:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a75      	ldr	r2, [pc, #468]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a72      	ldr	r2, [pc, #456]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	e01c      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0x356>
 8002854:	4b6d      	ldr	r3, [pc, #436]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4a6c      	ldr	r2, [pc, #432]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6213      	str	r3, [r2, #32]
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6213      	str	r3, [r2, #32]
 800286c:	e00b      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d015      	beq.n	80028ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7ff fabb 	bl	8001e08 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7ff fab7 	bl	8001e08 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0ab      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ac:	4b57      	ldr	r3, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ee      	beq.n	8002896 <HAL_RCC_OscConfig+0x37e>
 80028b8:	e014      	b.n	80028e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7ff faa5 	bl	8001e08 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7ff faa1 	bl	8001e08 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e095      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d8:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b48      	ldr	r3, [pc, #288]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a47      	ldr	r2, [pc, #284]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8081 	beq.w	8002a02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002900:	4b42      	ldr	r3, [pc, #264]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d061      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d146      	bne.n	80029a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_OscConfig+0x4fc>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7ff fa75 	bl	8001e08 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7ff fa71 	bl	8001e08 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e067      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002948:	d108      	bne.n	800295c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800294a:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	492d      	ldr	r1, [pc, #180]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a19      	ldr	r1, [r3, #32]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	430b      	orrs	r3, r1
 800296e:	4927      	ldr	r1, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x4fc>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7ff fa45 	bl	8001e08 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7ff fa41 	bl	8001e08 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e037      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x46a>
 80029a0:	e02f      	b.n	8002a02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <HAL_RCC_OscConfig+0x4fc>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fa2e 	bl	8001e08 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff fa2a 	bl	8001e08 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e020      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x498>
 80029ce:	e018      	b.n	8002a02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e013      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42420060 	.word	0x42420060

08002a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d0      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 0207 	bic.w	r2, r3, #7
 8002a42:	4965      	ldr	r1, [pc, #404]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b8      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a74:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	494d      	ldr	r1, [pc, #308]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d040      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e073      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4936      	ldr	r1, [pc, #216]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7ff f97e 	bl	8001e08 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7ff f97a 	bl	8001e08 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e053      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d210      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4922      	ldr	r1, [pc, #136]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e032      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4916      	ldr	r1, [pc, #88]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	490e      	ldr	r1, [pc, #56]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba6:	f000 f821 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	490a      	ldr	r1, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f8dc 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08007098 	.word	0x08007098
 8002be4:	20000000 	.word	0x20000000
 8002be8:	20000004 	.word	0x20000004

08002bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	b490      	push	{r4, r7}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bf4:	1d3c      	adds	r4, r7, #4
 8002bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bfc:	f240 2301 	movw	r3, #513	; 0x201
 8002c00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x40>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x46>
 8002c2a:	e02d      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c2e:	623b      	str	r3, [r7, #32]
      break;
 8002c30:	e02d      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c3e:	4413      	add	r3, r2
 8002c40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c5b      	lsrs	r3, r3, #17
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c5e:	4413      	add	r3, r2
 8002c60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c6a:	fb02 f203 	mul.w	r2, r2, r3
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	e004      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	623b      	str	r3, [r7, #32]
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c8a:	623b      	str	r3, [r7, #32]
      break;
 8002c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc90      	pop	{r4, r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	08007088 	.word	0x08007088
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	007a1200 	.word	0x007a1200
 8002ca8:	003d0900 	.word	0x003d0900

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff2 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080070a8 	.word	0x080070a8

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffde 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0adb      	lsrs	r3, r3, #11
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	080070a8 	.word	0x080070a8

08002d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <RCC_Delay+0x34>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <RCC_Delay+0x38>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0a5b      	lsrs	r3, r3, #9
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d2c:	bf00      	nop
  }
  while (Delay --);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	60fa      	str	r2, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f9      	bne.n	8002d2c <RCC_Delay+0x1c>
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000000 	.word	0x20000000
 8002d48:	10624dd3 	.word	0x10624dd3

08002d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e076      	b.n	8002e4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6e:	d009      	beq.n	8002d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
 8002d76:	e005      	b.n	8002d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe fd90 	bl	80018c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	ea42 0103 	orr.w	r1, r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	0c1a      	lsrs	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f002 0204 	and.w	r2, r2, #4
 8002e2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_SPI_Transmit+0x22>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e126      	b.n	80030c4 <HAL_SPI_Transmit+0x270>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e7e:	f7fe ffc3 	bl	8001e08 <HAL_GetTick>
 8002e82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
 8002e96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e98:	e10b      	b.n	80030b2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_SPI_Transmit+0x52>
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002eaa:	e102      	b.n	80030b2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2203      	movs	r2, #3
 8002eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef2:	d10f      	bne.n	8002f14 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d007      	beq.n	8002f32 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3a:	d14b      	bne.n	8002fd4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_SPI_Transmit+0xf6>
 8002f44:	8afb      	ldrh	r3, [r7, #22]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d13e      	bne.n	8002fc8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	1c9a      	adds	r2, r3, #2
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f6e:	e02b      	b.n	8002fc8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d112      	bne.n	8002fa4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	881a      	ldrh	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	1c9a      	adds	r2, r3, #2
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fa2:	e011      	b.n	8002fc8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fa4:	f7fe ff30 	bl	8001e08 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d803      	bhi.n	8002fbc <HAL_SPI_Transmit+0x168>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d102      	bne.n	8002fc2 <HAL_SPI_Transmit+0x16e>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fc6:	e074      	b.n	80030b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ce      	bne.n	8002f70 <HAL_SPI_Transmit+0x11c>
 8002fd2:	e04c      	b.n	800306e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_SPI_Transmit+0x18e>
 8002fdc:	8afb      	ldrh	r3, [r7, #22]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d140      	bne.n	8003064 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330c      	adds	r3, #12
 8002fec:	7812      	ldrb	r2, [r2, #0]
 8002fee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003008:	e02c      	b.n	8003064 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d113      	bne.n	8003040 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	86da      	strh	r2, [r3, #54]	; 0x36
 800303e:	e011      	b.n	8003064 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003040:	f7fe fee2 	bl	8001e08 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d803      	bhi.n	8003058 <HAL_SPI_Transmit+0x204>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d102      	bne.n	800305e <HAL_SPI_Transmit+0x20a>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003062:	e026      	b.n	80030b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1cd      	bne.n	800300a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fbc4 	bl	8003800 <SPI_EndRxTxTransaction>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e000      	b.n	80030b2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80030b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e8:	d112      	bne.n	8003110 <HAL_SPI_Receive+0x44>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10e      	bne.n	8003110 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2204      	movs	r2, #4
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f8f1 	bl	80032ee <HAL_SPI_TransmitReceive>
 800310c:	4603      	mov	r3, r0
 800310e:	e0ea      	b.n	80032e6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_SPI_Receive+0x52>
 800311a:	2302      	movs	r3, #2
 800311c:	e0e3      	b.n	80032e6 <HAL_SPI_Receive+0x21a>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003126:	f7fe fe6f 	bl	8001e08 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d002      	beq.n	800313e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003138:	2302      	movs	r3, #2
 800313a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800313c:	e0ca      	b.n	80032d4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_SPI_Receive+0x7e>
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800314e:	e0c1      	b.n	80032d4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2204      	movs	r2, #4
 8003154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	88fa      	ldrh	r2, [r7, #6]
 8003168:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003196:	d10f      	bne.n	80031b8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d007      	beq.n	80031d6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d162      	bne.n	80032a4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031de:	e02e      	b.n	800323e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d115      	bne.n	800321a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f103 020c 	add.w	r2, r3, #12
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003218:	e011      	b.n	800323e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800321a:	f7fe fdf5 	bl	8001e08 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d803      	bhi.n	8003232 <HAL_SPI_Receive+0x166>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d102      	bne.n	8003238 <HAL_SPI_Receive+0x16c>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800323c:	e04a      	b.n	80032d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1cb      	bne.n	80031e0 <HAL_SPI_Receive+0x114>
 8003248:	e031      	b.n	80032ae <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d113      	bne.n	8003280 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	b292      	uxth	r2, r2
 8003264:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	1c9a      	adds	r2, r3, #2
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800327e:	e011      	b.n	80032a4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003280:	f7fe fdc2 	bl	8001e08 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d803      	bhi.n	8003298 <HAL_SPI_Receive+0x1cc>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d102      	bne.n	800329e <HAL_SPI_Receive+0x1d2>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032a2:	e017      	b.n	80032d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1cd      	bne.n	800324a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fa52 	bl	800375c <SPI_EndRxTransaction>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
 80032d0:	e000      	b.n	80032d4 <HAL_SPI_Receive+0x208>
  }

error :
 80032d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b08c      	sub	sp, #48	; 0x30
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032fc:	2301      	movs	r3, #1
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x26>
 8003310:	2302      	movs	r3, #2
 8003312:	e18a      	b.n	800362a <HAL_SPI_TransmitReceive+0x33c>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800331c:	f7fe fd74 	bl	8001e08 <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800333a:	2b01      	cmp	r3, #1
 800333c:	d00f      	beq.n	800335e <HAL_SPI_TransmitReceive+0x70>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003344:	d107      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d103      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x68>
 800334e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003352:	2b04      	cmp	r3, #4
 8003354:	d003      	beq.n	800335e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003356:	2302      	movs	r3, #2
 8003358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800335c:	e15b      	b.n	8003616 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x82>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x82>
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003376:	e14e      	b.n	8003616 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b04      	cmp	r3, #4
 8003382:	d003      	beq.n	800338c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2205      	movs	r2, #5
 8003388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	887a      	ldrh	r2, [r7, #2]
 80033a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	887a      	ldrh	r2, [r7, #2]
 80033ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	887a      	ldrh	r2, [r7, #2]
 80033b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d007      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e8:	d178      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x10a>
 80033f2:	8b7b      	ldrh	r3, [r7, #26]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d166      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800341c:	e053      	b.n	80034c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d11b      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x176>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d016      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x176>
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d113      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	881a      	ldrh	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	1c9a      	adds	r2, r3, #2
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d119      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x1b8>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d014      	beq.n	80034a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	b292      	uxth	r2, r2
 8003488:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	1c9a      	adds	r2, r3, #2
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034a2:	2301      	movs	r3, #1
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034a6:	f7fe fcaf 	bl	8001e08 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d807      	bhi.n	80034c6 <HAL_SPI_TransmitReceive+0x1d8>
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d003      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034c4:	e0a7      	b.n	8003616 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1a6      	bne.n	800341e <HAL_SPI_TransmitReceive+0x130>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1a1      	bne.n	800341e <HAL_SPI_TransmitReceive+0x130>
 80034da:	e07c      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_SPI_TransmitReceive+0x1fc>
 80034e4:	8b7b      	ldrh	r3, [r7, #26]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d16b      	bne.n	80035c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003510:	e057      	b.n	80035c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d11c      	bne.n	800355a <HAL_SPI_TransmitReceive+0x26c>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d017      	beq.n	800355a <HAL_SPI_TransmitReceive+0x26c>
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d114      	bne.n	800355a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	7812      	ldrb	r2, [r2, #0]
 800353c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d119      	bne.n	800359c <HAL_SPI_TransmitReceive+0x2ae>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d014      	beq.n	800359c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003598:	2301      	movs	r3, #1
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800359c:	f7fe fc34 	bl	8001e08 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d803      	bhi.n	80035b4 <HAL_SPI_TransmitReceive+0x2c6>
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d102      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x2cc>
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035c0:	e029      	b.n	8003616 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1a2      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x224>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d19d      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f910 	bl	8003800 <SPI_EndRxTxTransaction>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035f2:	e010      	b.n	8003616 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	e000      	b.n	8003616 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003614:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003626:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800362a:	4618      	mov	r0, r3
 800362c:	3730      	adds	r7, #48	; 0x30
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003640:	b2db      	uxtb	r3, r3
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800365c:	f7fe fbd4 	bl	8001e08 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	4413      	add	r3, r2
 800366a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800366c:	f7fe fbcc 	bl	8001e08 <HAL_GetTick>
 8003670:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	015b      	lsls	r3, r3, #5
 8003678:	0d1b      	lsrs	r3, r3, #20
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	fb02 f303 	mul.w	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003682:	e054      	b.n	800372e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d050      	beq.n	800372e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800368c:	f7fe fbbc 	bl	8001e08 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	429a      	cmp	r2, r3
 800369a:	d902      	bls.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d13d      	bne.n	800371e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ba:	d111      	bne.n	80036e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c4:	d004      	beq.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ce:	d107      	bne.n	80036e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e8:	d10f      	bne.n	800370a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e017      	b.n	800374e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3b01      	subs	r3, #1
 800372c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	429a      	cmp	r2, r3
 800374a:	d19b      	bne.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003770:	d111      	bne.n	8003796 <SPI_EndRxTransaction+0x3a>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377a:	d004      	beq.n	8003786 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003784:	d107      	bne.n	8003796 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003794:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379e:	d117      	bne.n	80037d0 <SPI_EndRxTransaction+0x74>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	d112      	bne.n	80037d0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2101      	movs	r1, #1
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff ff49 	bl	800364c <SPI_WaitFlagStateUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01a      	beq.n	80037f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e013      	b.n	80037f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff ff36 	bl	800364c <SPI_WaitFlagStateUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f043 0220 	orr.w	r2, r3, #32
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e000      	b.n	80037f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff ff18 	bl	800364c <SPI_WaitFlagStateUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e000      	b.n	8003834 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e03f      	b.n	80038ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fe f9cc 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fc25 	bl	80040d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b08a      	sub	sp, #40	; 0x28
 80038da:	af02      	add	r7, sp, #8
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d17c      	bne.n	80039f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_UART_Transmit+0x2c>
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e075      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_UART_Transmit+0x3e>
 8003910:	2302      	movs	r3, #2
 8003912:	e06e      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2221      	movs	r2, #33	; 0x21
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392a:	f7fe fa6d 	bl	8001e08 <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003944:	d108      	bne.n	8003958 <HAL_UART_Transmit+0x82>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d104      	bne.n	8003958 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e003      	b.n	8003960 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003968:	e02a      	b.n	80039c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2200      	movs	r2, #0
 8003972:	2180      	movs	r1, #128	; 0x80
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fa11 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e036      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003998:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	3302      	adds	r3, #2
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	e007      	b.n	80039b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1cf      	bne.n	800396a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2140      	movs	r1, #64	; 0x40
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f9e1 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e006      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e000      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_UART_IRQHandler+0x52>
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa99 	bl	8003f7e <UART_Receive_IT>
      return;
 8003a4c:	e17b      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80b1 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x1bc>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_UART_IRQHandler+0x70>
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80a6 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_UART_IRQHandler+0x90>
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_UART_IRQHandler+0xb0>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f043 0202 	orr.w	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_UART_IRQHandler+0xd0>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f043 0204 	orr.w	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00f      	beq.n	8003af6 <HAL_UART_IRQHandler+0xfa>
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <HAL_UART_IRQHandler+0xee>
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f043 0208 	orr.w	r2, r3, #8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 811e 	beq.w	8003d3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <HAL_UART_IRQHandler+0x11e>
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fa32 	bl	8003f7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <HAL_UART_IRQHandler+0x146>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d031      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f974 	bl	8003e30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d023      	beq.n	8003b9e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d013      	beq.n	8003b96 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <HAL_UART_IRQHandler+0x350>)
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe faba 	bl	80020f4 <HAL_DMA_Abort_IT>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b90:	4610      	mov	r0, r2
 8003b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	e00e      	b.n	8003bb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8ec 	bl	8003d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	e00a      	b.n	8003bb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f8e8 	bl	8003d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	e006      	b.n	8003bb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8e4 	bl	8003d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bb2:	e0c3      	b.n	8003d3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	bf00      	nop
    return;
 8003bb6:	e0c1      	b.n	8003d3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	f040 80a1 	bne.w	8003d04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 809b 	beq.w	8003d04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8095 	beq.w	8003d04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d04e      	beq.n	8003c9c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c08:	8a3b      	ldrh	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8098 	beq.w	8003d40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c14:	8a3a      	ldrh	r2, [r7, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	f080 8092 	bcs.w	8003d40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8a3a      	ldrh	r2, [r7, #16]
 8003c20:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d02b      	beq.n	8003c84 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c3a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0210 	bic.w	r2, r2, #16
 8003c78:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe f9fd 	bl	800207e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f876 	bl	8003d86 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c9a:	e051      	b.n	8003d40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d047      	beq.n	8003d44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003cb4:	8a7b      	ldrh	r3, [r7, #18]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d044      	beq.n	8003d44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cc8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0210 	bic.w	r2, r2, #16
 8003cf6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf8:	8a7b      	ldrh	r3, [r7, #18]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f842 	bl	8003d86 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d02:	e01f      	b.n	8003d44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_UART_IRQHandler+0x324>
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8c9 	bl	8003eb0 <UART_Transmit_IT>
    return;
 8003d1e:	e012      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_UART_IRQHandler+0x34a>
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f90a 	bl	8003f4e <UART_EndTransmit_IT>
    return;
 8003d3a:	e004      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
    return;
 8003d3c:	bf00      	nop
 8003d3e:	e002      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d40:	bf00      	nop
 8003d42:	e000      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d44:	bf00      	nop
  }
}
 8003d46:	3728      	adds	r7, #40	; 0x28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	08003e89 	.word	0x08003e89

08003d50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dac:	e02c      	b.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d028      	beq.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8003dbc:	f7fe f824 	bl	8001e08 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d21d      	bcs.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e00f      	b.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4013      	ands	r3, r2
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d0c3      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d107      	bne.n	8003e70 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0210 	bic.w	r2, r2, #16
 8003e6e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7ff ff66 	bl	8003d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b21      	cmp	r3, #33	; 0x21
 8003ec2:	d13e      	bne.n	8003f42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	d114      	bne.n	8003ef8 <UART_Transmit_IT+0x48>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d110      	bne.n	8003ef8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	1c9a      	adds	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]
 8003ef6:	e008      	b.n	8003f0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	1c59      	adds	r1, r3, #1
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6211      	str	r1, [r2, #32]
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4619      	mov	r1, r3
 8003f18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff feee 	bl	8003d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b22      	cmp	r3, #34	; 0x22
 8003f90:	f040 8099 	bne.w	80040c6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d117      	bne.n	8003fce <UART_Receive_IT+0x50>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d113      	bne.n	8003fce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	1c9a      	adds	r2, r3, #2
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28
 8003fcc:	e026      	b.n	800401c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe0:	d007      	beq.n	8003ff2 <UART_Receive_IT+0x74>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <UART_Receive_IT+0x82>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e008      	b.n	8004012 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400c:	b2da      	uxtb	r2, r3
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29b      	uxth	r3, r3
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4619      	mov	r1, r3
 800402a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800402c:	2b00      	cmp	r3, #0
 800402e:	d148      	bne.n	80040c2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0220 	bic.w	r2, r2, #32
 800403e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	2b01      	cmp	r3, #1
 800406e:	d123      	bne.n	80040b8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0210 	bic.w	r2, r2, #16
 8004084:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b10      	cmp	r3, #16
 8004092:	d10a      	bne.n	80040aa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040ae:	4619      	mov	r1, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fe68 	bl	8003d86 <HAL_UARTEx_RxEventCallback>
 80040b6:	e002      	b.n	80040be <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff fe52 	bl	8003d62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e002      	b.n	80040c8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800410a:	f023 030c 	bic.w	r3, r3, #12
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	430b      	orrs	r3, r1
 8004116:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <UART_SetConfig+0x114>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d103      	bne.n	8004140 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7fe fdd6 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	e002      	b.n	8004146 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004140:	f7fe fdbe 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004144:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009a      	lsls	r2, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	4a22      	ldr	r2, [pc, #136]	; (80041e8 <UART_SetConfig+0x118>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	0119      	lsls	r1, r3, #4
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	009a      	lsls	r2, r3, #2
 8004170:	441a      	add	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	fbb2 f2f3 	udiv	r2, r2, r3
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <UART_SetConfig+0x118>)
 800417e:	fba3 0302 	umull	r0, r3, r3, r2
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2064      	movs	r0, #100	; 0x64
 8004186:	fb00 f303 	mul.w	r3, r0, r3
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	3332      	adds	r3, #50	; 0x32
 8004190:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <UART_SetConfig+0x118>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419c:	4419      	add	r1, r3
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009a      	lsls	r2, r3, #2
 80041a8:	441a      	add	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <UART_SetConfig+0x118>)
 80041b6:	fba3 0302 	umull	r0, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2064      	movs	r0, #100	; 0x64
 80041be:	fb00 f303 	mul.w	r3, r0, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	3332      	adds	r3, #50	; 0x32
 80041c8:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <UART_SetConfig+0x118>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	440a      	add	r2, r1
 80041da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40013800 	.word	0x40013800
 80041e8:	51eb851f 	.word	0x51eb851f

080041ec <__errno>:
 80041ec:	4b01      	ldr	r3, [pc, #4]	; (80041f4 <__errno+0x8>)
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	2000000c 	.word	0x2000000c

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	2600      	movs	r6, #0
 80041fc:	4d0c      	ldr	r5, [pc, #48]	; (8004230 <__libc_init_array+0x38>)
 80041fe:	4c0d      	ldr	r4, [pc, #52]	; (8004234 <__libc_init_array+0x3c>)
 8004200:	1b64      	subs	r4, r4, r5
 8004202:	10a4      	asrs	r4, r4, #2
 8004204:	42a6      	cmp	r6, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	f002 febc 	bl	8006f84 <_init>
 800420c:	2600      	movs	r6, #0
 800420e:	4d0a      	ldr	r5, [pc, #40]	; (8004238 <__libc_init_array+0x40>)
 8004210:	4c0a      	ldr	r4, [pc, #40]	; (800423c <__libc_init_array+0x44>)
 8004212:	1b64      	subs	r4, r4, r5
 8004214:	10a4      	asrs	r4, r4, #2
 8004216:	42a6      	cmp	r6, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004220:	4798      	blx	r3
 8004222:	3601      	adds	r6, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	f855 3b04 	ldr.w	r3, [r5], #4
 800422a:	4798      	blx	r3
 800422c:	3601      	adds	r6, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	08007494 	.word	0x08007494
 8004234:	08007494 	.word	0x08007494
 8004238:	08007494 	.word	0x08007494
 800423c:	08007498 	.word	0x08007498

08004240 <memset>:
 8004240:	4603      	mov	r3, r0
 8004242:	4402      	add	r2, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	f803 1b01 	strb.w	r1, [r3], #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <__cvt>:
 8004250:	2b00      	cmp	r3, #0
 8004252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004256:	461f      	mov	r7, r3
 8004258:	bfbb      	ittet	lt
 800425a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800425e:	461f      	movlt	r7, r3
 8004260:	2300      	movge	r3, #0
 8004262:	232d      	movlt	r3, #45	; 0x2d
 8004264:	b088      	sub	sp, #32
 8004266:	4614      	mov	r4, r2
 8004268:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800426a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800426c:	7013      	strb	r3, [r2, #0]
 800426e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004270:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004274:	f023 0820 	bic.w	r8, r3, #32
 8004278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800427c:	d005      	beq.n	800428a <__cvt+0x3a>
 800427e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004282:	d100      	bne.n	8004286 <__cvt+0x36>
 8004284:	3501      	adds	r5, #1
 8004286:	2302      	movs	r3, #2
 8004288:	e000      	b.n	800428c <__cvt+0x3c>
 800428a:	2303      	movs	r3, #3
 800428c:	aa07      	add	r2, sp, #28
 800428e:	9204      	str	r2, [sp, #16]
 8004290:	aa06      	add	r2, sp, #24
 8004292:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004296:	e9cd 3500 	strd	r3, r5, [sp]
 800429a:	4622      	mov	r2, r4
 800429c:	463b      	mov	r3, r7
 800429e:	f000 fce7 	bl	8004c70 <_dtoa_r>
 80042a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042a6:	4606      	mov	r6, r0
 80042a8:	d102      	bne.n	80042b0 <__cvt+0x60>
 80042aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042ac:	07db      	lsls	r3, r3, #31
 80042ae:	d522      	bpl.n	80042f6 <__cvt+0xa6>
 80042b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042b4:	eb06 0905 	add.w	r9, r6, r5
 80042b8:	d110      	bne.n	80042dc <__cvt+0x8c>
 80042ba:	7833      	ldrb	r3, [r6, #0]
 80042bc:	2b30      	cmp	r3, #48	; 0x30
 80042be:	d10a      	bne.n	80042d6 <__cvt+0x86>
 80042c0:	2200      	movs	r2, #0
 80042c2:	2300      	movs	r3, #0
 80042c4:	4620      	mov	r0, r4
 80042c6:	4639      	mov	r1, r7
 80042c8:	f7fc fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 80042cc:	b918      	cbnz	r0, 80042d6 <__cvt+0x86>
 80042ce:	f1c5 0501 	rsb	r5, r5, #1
 80042d2:	f8ca 5000 	str.w	r5, [sl]
 80042d6:	f8da 3000 	ldr.w	r3, [sl]
 80042da:	4499      	add	r9, r3
 80042dc:	2200      	movs	r2, #0
 80042de:	2300      	movs	r3, #0
 80042e0:	4620      	mov	r0, r4
 80042e2:	4639      	mov	r1, r7
 80042e4:	f7fc fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80042e8:	b108      	cbz	r0, 80042ee <__cvt+0x9e>
 80042ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80042ee:	2230      	movs	r2, #48	; 0x30
 80042f0:	9b07      	ldr	r3, [sp, #28]
 80042f2:	454b      	cmp	r3, r9
 80042f4:	d307      	bcc.n	8004306 <__cvt+0xb6>
 80042f6:	4630      	mov	r0, r6
 80042f8:	9b07      	ldr	r3, [sp, #28]
 80042fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042fc:	1b9b      	subs	r3, r3, r6
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	b008      	add	sp, #32
 8004302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004306:	1c59      	adds	r1, r3, #1
 8004308:	9107      	str	r1, [sp, #28]
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e7f0      	b.n	80042f0 <__cvt+0xa0>

0800430e <__exponent>:
 800430e:	4603      	mov	r3, r0
 8004310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004312:	2900      	cmp	r1, #0
 8004314:	f803 2b02 	strb.w	r2, [r3], #2
 8004318:	bfb6      	itet	lt
 800431a:	222d      	movlt	r2, #45	; 0x2d
 800431c:	222b      	movge	r2, #43	; 0x2b
 800431e:	4249      	neglt	r1, r1
 8004320:	2909      	cmp	r1, #9
 8004322:	7042      	strb	r2, [r0, #1]
 8004324:	dd2b      	ble.n	800437e <__exponent+0x70>
 8004326:	f10d 0407 	add.w	r4, sp, #7
 800432a:	46a4      	mov	ip, r4
 800432c:	270a      	movs	r7, #10
 800432e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004332:	460a      	mov	r2, r1
 8004334:	46a6      	mov	lr, r4
 8004336:	fb07 1516 	mls	r5, r7, r6, r1
 800433a:	2a63      	cmp	r2, #99	; 0x63
 800433c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004340:	4631      	mov	r1, r6
 8004342:	f104 34ff 	add.w	r4, r4, #4294967295
 8004346:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800434a:	dcf0      	bgt.n	800432e <__exponent+0x20>
 800434c:	3130      	adds	r1, #48	; 0x30
 800434e:	f1ae 0502 	sub.w	r5, lr, #2
 8004352:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004356:	4629      	mov	r1, r5
 8004358:	1c44      	adds	r4, r0, #1
 800435a:	4561      	cmp	r1, ip
 800435c:	d30a      	bcc.n	8004374 <__exponent+0x66>
 800435e:	f10d 0209 	add.w	r2, sp, #9
 8004362:	eba2 020e 	sub.w	r2, r2, lr
 8004366:	4565      	cmp	r5, ip
 8004368:	bf88      	it	hi
 800436a:	2200      	movhi	r2, #0
 800436c:	4413      	add	r3, r2
 800436e:	1a18      	subs	r0, r3, r0
 8004370:	b003      	add	sp, #12
 8004372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004374:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004378:	f804 2f01 	strb.w	r2, [r4, #1]!
 800437c:	e7ed      	b.n	800435a <__exponent+0x4c>
 800437e:	2330      	movs	r3, #48	; 0x30
 8004380:	3130      	adds	r1, #48	; 0x30
 8004382:	7083      	strb	r3, [r0, #2]
 8004384:	70c1      	strb	r1, [r0, #3]
 8004386:	1d03      	adds	r3, r0, #4
 8004388:	e7f1      	b.n	800436e <__exponent+0x60>
	...

0800438c <_printf_float>:
 800438c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004390:	b091      	sub	sp, #68	; 0x44
 8004392:	460c      	mov	r4, r1
 8004394:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004398:	4616      	mov	r6, r2
 800439a:	461f      	mov	r7, r3
 800439c:	4605      	mov	r5, r0
 800439e:	f001 fa55 	bl	800584c <_localeconv_r>
 80043a2:	6803      	ldr	r3, [r0, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	9309      	str	r3, [sp, #36]	; 0x24
 80043a8:	f7fb fed2 	bl	8000150 <strlen>
 80043ac:	2300      	movs	r3, #0
 80043ae:	930e      	str	r3, [sp, #56]	; 0x38
 80043b0:	f8d8 3000 	ldr.w	r3, [r8]
 80043b4:	900a      	str	r0, [sp, #40]	; 0x28
 80043b6:	3307      	adds	r3, #7
 80043b8:	f023 0307 	bic.w	r3, r3, #7
 80043bc:	f103 0208 	add.w	r2, r3, #8
 80043c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043c4:	f8d4 b000 	ldr.w	fp, [r4]
 80043c8:	f8c8 2000 	str.w	r2, [r8]
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043d4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80043d8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80043dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80043de:	f04f 32ff 	mov.w	r2, #4294967295
 80043e2:	4640      	mov	r0, r8
 80043e4:	4b9c      	ldr	r3, [pc, #624]	; (8004658 <_printf_float+0x2cc>)
 80043e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043e8:	f7fc fb10 	bl	8000a0c <__aeabi_dcmpun>
 80043ec:	bb70      	cbnz	r0, 800444c <_printf_float+0xc0>
 80043ee:	f04f 32ff 	mov.w	r2, #4294967295
 80043f2:	4640      	mov	r0, r8
 80043f4:	4b98      	ldr	r3, [pc, #608]	; (8004658 <_printf_float+0x2cc>)
 80043f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043f8:	f7fc faea 	bl	80009d0 <__aeabi_dcmple>
 80043fc:	bb30      	cbnz	r0, 800444c <_printf_float+0xc0>
 80043fe:	2200      	movs	r2, #0
 8004400:	2300      	movs	r3, #0
 8004402:	4640      	mov	r0, r8
 8004404:	4651      	mov	r1, sl
 8004406:	f7fc fad9 	bl	80009bc <__aeabi_dcmplt>
 800440a:	b110      	cbz	r0, 8004412 <_printf_float+0x86>
 800440c:	232d      	movs	r3, #45	; 0x2d
 800440e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004412:	4b92      	ldr	r3, [pc, #584]	; (800465c <_printf_float+0x2d0>)
 8004414:	4892      	ldr	r0, [pc, #584]	; (8004660 <_printf_float+0x2d4>)
 8004416:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800441a:	bf94      	ite	ls
 800441c:	4698      	movls	r8, r3
 800441e:	4680      	movhi	r8, r0
 8004420:	2303      	movs	r3, #3
 8004422:	f04f 0a00 	mov.w	sl, #0
 8004426:	6123      	str	r3, [r4, #16]
 8004428:	f02b 0304 	bic.w	r3, fp, #4
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	4633      	mov	r3, r6
 8004430:	4621      	mov	r1, r4
 8004432:	4628      	mov	r0, r5
 8004434:	9700      	str	r7, [sp, #0]
 8004436:	aa0f      	add	r2, sp, #60	; 0x3c
 8004438:	f000 f9d4 	bl	80047e4 <_printf_common>
 800443c:	3001      	adds	r0, #1
 800443e:	f040 8090 	bne.w	8004562 <_printf_float+0x1d6>
 8004442:	f04f 30ff 	mov.w	r0, #4294967295
 8004446:	b011      	add	sp, #68	; 0x44
 8004448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444c:	4642      	mov	r2, r8
 800444e:	4653      	mov	r3, sl
 8004450:	4640      	mov	r0, r8
 8004452:	4651      	mov	r1, sl
 8004454:	f7fc fada 	bl	8000a0c <__aeabi_dcmpun>
 8004458:	b148      	cbz	r0, 800446e <_printf_float+0xe2>
 800445a:	f1ba 0f00 	cmp.w	sl, #0
 800445e:	bfb8      	it	lt
 8004460:	232d      	movlt	r3, #45	; 0x2d
 8004462:	4880      	ldr	r0, [pc, #512]	; (8004664 <_printf_float+0x2d8>)
 8004464:	bfb8      	it	lt
 8004466:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800446a:	4b7f      	ldr	r3, [pc, #508]	; (8004668 <_printf_float+0x2dc>)
 800446c:	e7d3      	b.n	8004416 <_printf_float+0x8a>
 800446e:	6863      	ldr	r3, [r4, #4]
 8004470:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	d142      	bne.n	80044fe <_printf_float+0x172>
 8004478:	2306      	movs	r3, #6
 800447a:	6063      	str	r3, [r4, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	9206      	str	r2, [sp, #24]
 8004480:	aa0e      	add	r2, sp, #56	; 0x38
 8004482:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004486:	aa0d      	add	r2, sp, #52	; 0x34
 8004488:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800448c:	9203      	str	r2, [sp, #12]
 800448e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004492:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	6863      	ldr	r3, [r4, #4]
 800449a:	4642      	mov	r2, r8
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	4628      	mov	r0, r5
 80044a0:	4653      	mov	r3, sl
 80044a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80044a4:	f7ff fed4 	bl	8004250 <__cvt>
 80044a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044aa:	4680      	mov	r8, r0
 80044ac:	2947      	cmp	r1, #71	; 0x47
 80044ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044b0:	d108      	bne.n	80044c4 <_printf_float+0x138>
 80044b2:	1cc8      	adds	r0, r1, #3
 80044b4:	db02      	blt.n	80044bc <_printf_float+0x130>
 80044b6:	6863      	ldr	r3, [r4, #4]
 80044b8:	4299      	cmp	r1, r3
 80044ba:	dd40      	ble.n	800453e <_printf_float+0x1b2>
 80044bc:	f1a9 0902 	sub.w	r9, r9, #2
 80044c0:	fa5f f989 	uxtb.w	r9, r9
 80044c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044c8:	d81f      	bhi.n	800450a <_printf_float+0x17e>
 80044ca:	464a      	mov	r2, r9
 80044cc:	3901      	subs	r1, #1
 80044ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044d2:	910d      	str	r1, [sp, #52]	; 0x34
 80044d4:	f7ff ff1b 	bl	800430e <__exponent>
 80044d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044da:	4682      	mov	sl, r0
 80044dc:	1813      	adds	r3, r2, r0
 80044de:	2a01      	cmp	r2, #1
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	dc02      	bgt.n	80044ea <_printf_float+0x15e>
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	07d2      	lsls	r2, r2, #31
 80044e8:	d501      	bpl.n	80044ee <_printf_float+0x162>
 80044ea:	3301      	adds	r3, #1
 80044ec:	6123      	str	r3, [r4, #16]
 80044ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d09b      	beq.n	800442e <_printf_float+0xa2>
 80044f6:	232d      	movs	r3, #45	; 0x2d
 80044f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fc:	e797      	b.n	800442e <_printf_float+0xa2>
 80044fe:	2947      	cmp	r1, #71	; 0x47
 8004500:	d1bc      	bne.n	800447c <_printf_float+0xf0>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ba      	bne.n	800447c <_printf_float+0xf0>
 8004506:	2301      	movs	r3, #1
 8004508:	e7b7      	b.n	800447a <_printf_float+0xee>
 800450a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800450e:	d118      	bne.n	8004542 <_printf_float+0x1b6>
 8004510:	2900      	cmp	r1, #0
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	dd0b      	ble.n	800452e <_printf_float+0x1a2>
 8004516:	6121      	str	r1, [r4, #16]
 8004518:	b913      	cbnz	r3, 8004520 <_printf_float+0x194>
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	07d0      	lsls	r0, r2, #31
 800451e:	d502      	bpl.n	8004526 <_printf_float+0x19a>
 8004520:	3301      	adds	r3, #1
 8004522:	440b      	add	r3, r1
 8004524:	6123      	str	r3, [r4, #16]
 8004526:	f04f 0a00 	mov.w	sl, #0
 800452a:	65a1      	str	r1, [r4, #88]	; 0x58
 800452c:	e7df      	b.n	80044ee <_printf_float+0x162>
 800452e:	b913      	cbnz	r3, 8004536 <_printf_float+0x1aa>
 8004530:	6822      	ldr	r2, [r4, #0]
 8004532:	07d2      	lsls	r2, r2, #31
 8004534:	d501      	bpl.n	800453a <_printf_float+0x1ae>
 8004536:	3302      	adds	r3, #2
 8004538:	e7f4      	b.n	8004524 <_printf_float+0x198>
 800453a:	2301      	movs	r3, #1
 800453c:	e7f2      	b.n	8004524 <_printf_float+0x198>
 800453e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004544:	4299      	cmp	r1, r3
 8004546:	db05      	blt.n	8004554 <_printf_float+0x1c8>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	6121      	str	r1, [r4, #16]
 800454c:	07d8      	lsls	r0, r3, #31
 800454e:	d5ea      	bpl.n	8004526 <_printf_float+0x19a>
 8004550:	1c4b      	adds	r3, r1, #1
 8004552:	e7e7      	b.n	8004524 <_printf_float+0x198>
 8004554:	2900      	cmp	r1, #0
 8004556:	bfcc      	ite	gt
 8004558:	2201      	movgt	r2, #1
 800455a:	f1c1 0202 	rsble	r2, r1, #2
 800455e:	4413      	add	r3, r2
 8004560:	e7e0      	b.n	8004524 <_printf_float+0x198>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	055a      	lsls	r2, r3, #21
 8004566:	d407      	bmi.n	8004578 <_printf_float+0x1ec>
 8004568:	6923      	ldr	r3, [r4, #16]
 800456a:	4642      	mov	r2, r8
 800456c:	4631      	mov	r1, r6
 800456e:	4628      	mov	r0, r5
 8004570:	47b8      	blx	r7
 8004572:	3001      	adds	r0, #1
 8004574:	d12b      	bne.n	80045ce <_printf_float+0x242>
 8004576:	e764      	b.n	8004442 <_printf_float+0xb6>
 8004578:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800457c:	f240 80dd 	bls.w	800473a <_printf_float+0x3ae>
 8004580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004584:	2200      	movs	r2, #0
 8004586:	2300      	movs	r3, #0
 8004588:	f7fc fa0e 	bl	80009a8 <__aeabi_dcmpeq>
 800458c:	2800      	cmp	r0, #0
 800458e:	d033      	beq.n	80045f8 <_printf_float+0x26c>
 8004590:	2301      	movs	r3, #1
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	4a35      	ldr	r2, [pc, #212]	; (800466c <_printf_float+0x2e0>)
 8004598:	47b8      	blx	r7
 800459a:	3001      	adds	r0, #1
 800459c:	f43f af51 	beq.w	8004442 <_printf_float+0xb6>
 80045a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045a4:	429a      	cmp	r2, r3
 80045a6:	db02      	blt.n	80045ae <_printf_float+0x222>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	07d8      	lsls	r0, r3, #31
 80045ac:	d50f      	bpl.n	80045ce <_printf_float+0x242>
 80045ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045b2:	4631      	mov	r1, r6
 80045b4:	4628      	mov	r0, r5
 80045b6:	47b8      	blx	r7
 80045b8:	3001      	adds	r0, #1
 80045ba:	f43f af42 	beq.w	8004442 <_printf_float+0xb6>
 80045be:	f04f 0800 	mov.w	r8, #0
 80045c2:	f104 091a 	add.w	r9, r4, #26
 80045c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045c8:	3b01      	subs	r3, #1
 80045ca:	4543      	cmp	r3, r8
 80045cc:	dc09      	bgt.n	80045e2 <_printf_float+0x256>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	079b      	lsls	r3, r3, #30
 80045d2:	f100 8102 	bmi.w	80047da <_printf_float+0x44e>
 80045d6:	68e0      	ldr	r0, [r4, #12]
 80045d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045da:	4298      	cmp	r0, r3
 80045dc:	bfb8      	it	lt
 80045de:	4618      	movlt	r0, r3
 80045e0:	e731      	b.n	8004446 <_printf_float+0xba>
 80045e2:	2301      	movs	r3, #1
 80045e4:	464a      	mov	r2, r9
 80045e6:	4631      	mov	r1, r6
 80045e8:	4628      	mov	r0, r5
 80045ea:	47b8      	blx	r7
 80045ec:	3001      	adds	r0, #1
 80045ee:	f43f af28 	beq.w	8004442 <_printf_float+0xb6>
 80045f2:	f108 0801 	add.w	r8, r8, #1
 80045f6:	e7e6      	b.n	80045c6 <_printf_float+0x23a>
 80045f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	dc38      	bgt.n	8004670 <_printf_float+0x2e4>
 80045fe:	2301      	movs	r3, #1
 8004600:	4631      	mov	r1, r6
 8004602:	4628      	mov	r0, r5
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <_printf_float+0x2e0>)
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f af1a 	beq.w	8004442 <_printf_float+0xb6>
 800460e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004612:	4313      	orrs	r3, r2
 8004614:	d102      	bne.n	800461c <_printf_float+0x290>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	07d9      	lsls	r1, r3, #31
 800461a:	d5d8      	bpl.n	80045ce <_printf_float+0x242>
 800461c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004620:	4631      	mov	r1, r6
 8004622:	4628      	mov	r0, r5
 8004624:	47b8      	blx	r7
 8004626:	3001      	adds	r0, #1
 8004628:	f43f af0b 	beq.w	8004442 <_printf_float+0xb6>
 800462c:	f04f 0900 	mov.w	r9, #0
 8004630:	f104 0a1a 	add.w	sl, r4, #26
 8004634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004636:	425b      	negs	r3, r3
 8004638:	454b      	cmp	r3, r9
 800463a:	dc01      	bgt.n	8004640 <_printf_float+0x2b4>
 800463c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800463e:	e794      	b.n	800456a <_printf_float+0x1de>
 8004640:	2301      	movs	r3, #1
 8004642:	4652      	mov	r2, sl
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	47b8      	blx	r7
 800464a:	3001      	adds	r0, #1
 800464c:	f43f aef9 	beq.w	8004442 <_printf_float+0xb6>
 8004650:	f109 0901 	add.w	r9, r9, #1
 8004654:	e7ee      	b.n	8004634 <_printf_float+0x2a8>
 8004656:	bf00      	nop
 8004658:	7fefffff 	.word	0x7fefffff
 800465c:	080070b4 	.word	0x080070b4
 8004660:	080070b8 	.word	0x080070b8
 8004664:	080070c0 	.word	0x080070c0
 8004668:	080070bc 	.word	0x080070bc
 800466c:	080070c4 	.word	0x080070c4
 8004670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004674:	429a      	cmp	r2, r3
 8004676:	bfa8      	it	ge
 8004678:	461a      	movge	r2, r3
 800467a:	2a00      	cmp	r2, #0
 800467c:	4691      	mov	r9, r2
 800467e:	dc37      	bgt.n	80046f0 <_printf_float+0x364>
 8004680:	f04f 0b00 	mov.w	fp, #0
 8004684:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004688:	f104 021a 	add.w	r2, r4, #26
 800468c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004690:	ebaa 0309 	sub.w	r3, sl, r9
 8004694:	455b      	cmp	r3, fp
 8004696:	dc33      	bgt.n	8004700 <_printf_float+0x374>
 8004698:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800469c:	429a      	cmp	r2, r3
 800469e:	db3b      	blt.n	8004718 <_printf_float+0x38c>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	07da      	lsls	r2, r3, #31
 80046a4:	d438      	bmi.n	8004718 <_printf_float+0x38c>
 80046a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046aa:	eba2 030a 	sub.w	r3, r2, sl
 80046ae:	eba2 0901 	sub.w	r9, r2, r1
 80046b2:	4599      	cmp	r9, r3
 80046b4:	bfa8      	it	ge
 80046b6:	4699      	movge	r9, r3
 80046b8:	f1b9 0f00 	cmp.w	r9, #0
 80046bc:	dc34      	bgt.n	8004728 <_printf_float+0x39c>
 80046be:	f04f 0800 	mov.w	r8, #0
 80046c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046c6:	f104 0a1a 	add.w	sl, r4, #26
 80046ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	eba3 0309 	sub.w	r3, r3, r9
 80046d4:	4543      	cmp	r3, r8
 80046d6:	f77f af7a 	ble.w	80045ce <_printf_float+0x242>
 80046da:	2301      	movs	r3, #1
 80046dc:	4652      	mov	r2, sl
 80046de:	4631      	mov	r1, r6
 80046e0:	4628      	mov	r0, r5
 80046e2:	47b8      	blx	r7
 80046e4:	3001      	adds	r0, #1
 80046e6:	f43f aeac 	beq.w	8004442 <_printf_float+0xb6>
 80046ea:	f108 0801 	add.w	r8, r8, #1
 80046ee:	e7ec      	b.n	80046ca <_printf_float+0x33e>
 80046f0:	4613      	mov	r3, r2
 80046f2:	4631      	mov	r1, r6
 80046f4:	4642      	mov	r2, r8
 80046f6:	4628      	mov	r0, r5
 80046f8:	47b8      	blx	r7
 80046fa:	3001      	adds	r0, #1
 80046fc:	d1c0      	bne.n	8004680 <_printf_float+0x2f4>
 80046fe:	e6a0      	b.n	8004442 <_printf_float+0xb6>
 8004700:	2301      	movs	r3, #1
 8004702:	4631      	mov	r1, r6
 8004704:	4628      	mov	r0, r5
 8004706:	920b      	str	r2, [sp, #44]	; 0x2c
 8004708:	47b8      	blx	r7
 800470a:	3001      	adds	r0, #1
 800470c:	f43f ae99 	beq.w	8004442 <_printf_float+0xb6>
 8004710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004712:	f10b 0b01 	add.w	fp, fp, #1
 8004716:	e7b9      	b.n	800468c <_printf_float+0x300>
 8004718:	4631      	mov	r1, r6
 800471a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	d1bf      	bne.n	80046a6 <_printf_float+0x31a>
 8004726:	e68c      	b.n	8004442 <_printf_float+0xb6>
 8004728:	464b      	mov	r3, r9
 800472a:	4631      	mov	r1, r6
 800472c:	4628      	mov	r0, r5
 800472e:	eb08 020a 	add.w	r2, r8, sl
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	d1c2      	bne.n	80046be <_printf_float+0x332>
 8004738:	e683      	b.n	8004442 <_printf_float+0xb6>
 800473a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800473c:	2a01      	cmp	r2, #1
 800473e:	dc01      	bgt.n	8004744 <_printf_float+0x3b8>
 8004740:	07db      	lsls	r3, r3, #31
 8004742:	d537      	bpl.n	80047b4 <_printf_float+0x428>
 8004744:	2301      	movs	r3, #1
 8004746:	4642      	mov	r2, r8
 8004748:	4631      	mov	r1, r6
 800474a:	4628      	mov	r0, r5
 800474c:	47b8      	blx	r7
 800474e:	3001      	adds	r0, #1
 8004750:	f43f ae77 	beq.w	8004442 <_printf_float+0xb6>
 8004754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	47b8      	blx	r7
 800475e:	3001      	adds	r0, #1
 8004760:	f43f ae6f 	beq.w	8004442 <_printf_float+0xb6>
 8004764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004768:	2200      	movs	r2, #0
 800476a:	2300      	movs	r3, #0
 800476c:	f7fc f91c 	bl	80009a8 <__aeabi_dcmpeq>
 8004770:	b9d8      	cbnz	r0, 80047aa <_printf_float+0x41e>
 8004772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004774:	f108 0201 	add.w	r2, r8, #1
 8004778:	3b01      	subs	r3, #1
 800477a:	4631      	mov	r1, r6
 800477c:	4628      	mov	r0, r5
 800477e:	47b8      	blx	r7
 8004780:	3001      	adds	r0, #1
 8004782:	d10e      	bne.n	80047a2 <_printf_float+0x416>
 8004784:	e65d      	b.n	8004442 <_printf_float+0xb6>
 8004786:	2301      	movs	r3, #1
 8004788:	464a      	mov	r2, r9
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	47b8      	blx	r7
 8004790:	3001      	adds	r0, #1
 8004792:	f43f ae56 	beq.w	8004442 <_printf_float+0xb6>
 8004796:	f108 0801 	add.w	r8, r8, #1
 800479a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800479c:	3b01      	subs	r3, #1
 800479e:	4543      	cmp	r3, r8
 80047a0:	dcf1      	bgt.n	8004786 <_printf_float+0x3fa>
 80047a2:	4653      	mov	r3, sl
 80047a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047a8:	e6e0      	b.n	800456c <_printf_float+0x1e0>
 80047aa:	f04f 0800 	mov.w	r8, #0
 80047ae:	f104 091a 	add.w	r9, r4, #26
 80047b2:	e7f2      	b.n	800479a <_printf_float+0x40e>
 80047b4:	2301      	movs	r3, #1
 80047b6:	4642      	mov	r2, r8
 80047b8:	e7df      	b.n	800477a <_printf_float+0x3ee>
 80047ba:	2301      	movs	r3, #1
 80047bc:	464a      	mov	r2, r9
 80047be:	4631      	mov	r1, r6
 80047c0:	4628      	mov	r0, r5
 80047c2:	47b8      	blx	r7
 80047c4:	3001      	adds	r0, #1
 80047c6:	f43f ae3c 	beq.w	8004442 <_printf_float+0xb6>
 80047ca:	f108 0801 	add.w	r8, r8, #1
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80047d2:	1a5b      	subs	r3, r3, r1
 80047d4:	4543      	cmp	r3, r8
 80047d6:	dcf0      	bgt.n	80047ba <_printf_float+0x42e>
 80047d8:	e6fd      	b.n	80045d6 <_printf_float+0x24a>
 80047da:	f04f 0800 	mov.w	r8, #0
 80047de:	f104 0919 	add.w	r9, r4, #25
 80047e2:	e7f4      	b.n	80047ce <_printf_float+0x442>

080047e4 <_printf_common>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	4616      	mov	r6, r2
 80047ea:	4699      	mov	r9, r3
 80047ec:	688a      	ldr	r2, [r1, #8]
 80047ee:	690b      	ldr	r3, [r1, #16]
 80047f0:	4607      	mov	r7, r0
 80047f2:	4293      	cmp	r3, r2
 80047f4:	bfb8      	it	lt
 80047f6:	4613      	movlt	r3, r2
 80047f8:	6033      	str	r3, [r6, #0]
 80047fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047fe:	460c      	mov	r4, r1
 8004800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004804:	b10a      	cbz	r2, 800480a <_printf_common+0x26>
 8004806:	3301      	adds	r3, #1
 8004808:	6033      	str	r3, [r6, #0]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	0699      	lsls	r1, r3, #26
 800480e:	bf42      	ittt	mi
 8004810:	6833      	ldrmi	r3, [r6, #0]
 8004812:	3302      	addmi	r3, #2
 8004814:	6033      	strmi	r3, [r6, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	f015 0506 	ands.w	r5, r5, #6
 800481c:	d106      	bne.n	800482c <_printf_common+0x48>
 800481e:	f104 0a19 	add.w	sl, r4, #25
 8004822:	68e3      	ldr	r3, [r4, #12]
 8004824:	6832      	ldr	r2, [r6, #0]
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	42ab      	cmp	r3, r5
 800482a:	dc28      	bgt.n	800487e <_printf_common+0x9a>
 800482c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004830:	1e13      	subs	r3, r2, #0
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	bf18      	it	ne
 8004836:	2301      	movne	r3, #1
 8004838:	0692      	lsls	r2, r2, #26
 800483a:	d42d      	bmi.n	8004898 <_printf_common+0xb4>
 800483c:	4649      	mov	r1, r9
 800483e:	4638      	mov	r0, r7
 8004840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004844:	47c0      	blx	r8
 8004846:	3001      	adds	r0, #1
 8004848:	d020      	beq.n	800488c <_printf_common+0xa8>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	68e5      	ldr	r5, [r4, #12]
 800484e:	f003 0306 	and.w	r3, r3, #6
 8004852:	2b04      	cmp	r3, #4
 8004854:	bf18      	it	ne
 8004856:	2500      	movne	r5, #0
 8004858:	6832      	ldr	r2, [r6, #0]
 800485a:	f04f 0600 	mov.w	r6, #0
 800485e:	68a3      	ldr	r3, [r4, #8]
 8004860:	bf08      	it	eq
 8004862:	1aad      	subeq	r5, r5, r2
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	bf08      	it	eq
 8004868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800486c:	4293      	cmp	r3, r2
 800486e:	bfc4      	itt	gt
 8004870:	1a9b      	subgt	r3, r3, r2
 8004872:	18ed      	addgt	r5, r5, r3
 8004874:	341a      	adds	r4, #26
 8004876:	42b5      	cmp	r5, r6
 8004878:	d11a      	bne.n	80048b0 <_printf_common+0xcc>
 800487a:	2000      	movs	r0, #0
 800487c:	e008      	b.n	8004890 <_printf_common+0xac>
 800487e:	2301      	movs	r3, #1
 8004880:	4652      	mov	r2, sl
 8004882:	4649      	mov	r1, r9
 8004884:	4638      	mov	r0, r7
 8004886:	47c0      	blx	r8
 8004888:	3001      	adds	r0, #1
 800488a:	d103      	bne.n	8004894 <_printf_common+0xb0>
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004894:	3501      	adds	r5, #1
 8004896:	e7c4      	b.n	8004822 <_printf_common+0x3e>
 8004898:	2030      	movs	r0, #48	; 0x30
 800489a:	18e1      	adds	r1, r4, r3
 800489c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048a6:	4422      	add	r2, r4
 80048a8:	3302      	adds	r3, #2
 80048aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048ae:	e7c5      	b.n	800483c <_printf_common+0x58>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4622      	mov	r2, r4
 80048b4:	4649      	mov	r1, r9
 80048b6:	4638      	mov	r0, r7
 80048b8:	47c0      	blx	r8
 80048ba:	3001      	adds	r0, #1
 80048bc:	d0e6      	beq.n	800488c <_printf_common+0xa8>
 80048be:	3601      	adds	r6, #1
 80048c0:	e7d9      	b.n	8004876 <_printf_common+0x92>
	...

080048c4 <_printf_i>:
 80048c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c8:	460c      	mov	r4, r1
 80048ca:	7e27      	ldrb	r7, [r4, #24]
 80048cc:	4691      	mov	r9, r2
 80048ce:	2f78      	cmp	r7, #120	; 0x78
 80048d0:	4680      	mov	r8, r0
 80048d2:	469a      	mov	sl, r3
 80048d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048da:	d807      	bhi.n	80048ec <_printf_i+0x28>
 80048dc:	2f62      	cmp	r7, #98	; 0x62
 80048de:	d80a      	bhi.n	80048f6 <_printf_i+0x32>
 80048e0:	2f00      	cmp	r7, #0
 80048e2:	f000 80d9 	beq.w	8004a98 <_printf_i+0x1d4>
 80048e6:	2f58      	cmp	r7, #88	; 0x58
 80048e8:	f000 80a4 	beq.w	8004a34 <_printf_i+0x170>
 80048ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048f4:	e03a      	b.n	800496c <_printf_i+0xa8>
 80048f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048fa:	2b15      	cmp	r3, #21
 80048fc:	d8f6      	bhi.n	80048ec <_printf_i+0x28>
 80048fe:	a001      	add	r0, pc, #4	; (adr r0, 8004904 <_printf_i+0x40>)
 8004900:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004904:	0800495d 	.word	0x0800495d
 8004908:	08004971 	.word	0x08004971
 800490c:	080048ed 	.word	0x080048ed
 8004910:	080048ed 	.word	0x080048ed
 8004914:	080048ed 	.word	0x080048ed
 8004918:	080048ed 	.word	0x080048ed
 800491c:	08004971 	.word	0x08004971
 8004920:	080048ed 	.word	0x080048ed
 8004924:	080048ed 	.word	0x080048ed
 8004928:	080048ed 	.word	0x080048ed
 800492c:	080048ed 	.word	0x080048ed
 8004930:	08004a7f 	.word	0x08004a7f
 8004934:	080049a1 	.word	0x080049a1
 8004938:	08004a61 	.word	0x08004a61
 800493c:	080048ed 	.word	0x080048ed
 8004940:	080048ed 	.word	0x080048ed
 8004944:	08004aa1 	.word	0x08004aa1
 8004948:	080048ed 	.word	0x080048ed
 800494c:	080049a1 	.word	0x080049a1
 8004950:	080048ed 	.word	0x080048ed
 8004954:	080048ed 	.word	0x080048ed
 8004958:	08004a69 	.word	0x08004a69
 800495c:	680b      	ldr	r3, [r1, #0]
 800495e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004962:	1d1a      	adds	r2, r3, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	600a      	str	r2, [r1, #0]
 8004968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800496c:	2301      	movs	r3, #1
 800496e:	e0a4      	b.n	8004aba <_printf_i+0x1f6>
 8004970:	6825      	ldr	r5, [r4, #0]
 8004972:	6808      	ldr	r0, [r1, #0]
 8004974:	062e      	lsls	r6, r5, #24
 8004976:	f100 0304 	add.w	r3, r0, #4
 800497a:	d50a      	bpl.n	8004992 <_printf_i+0xce>
 800497c:	6805      	ldr	r5, [r0, #0]
 800497e:	600b      	str	r3, [r1, #0]
 8004980:	2d00      	cmp	r5, #0
 8004982:	da03      	bge.n	800498c <_printf_i+0xc8>
 8004984:	232d      	movs	r3, #45	; 0x2d
 8004986:	426d      	negs	r5, r5
 8004988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800498c:	230a      	movs	r3, #10
 800498e:	485e      	ldr	r0, [pc, #376]	; (8004b08 <_printf_i+0x244>)
 8004990:	e019      	b.n	80049c6 <_printf_i+0x102>
 8004992:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004996:	6805      	ldr	r5, [r0, #0]
 8004998:	600b      	str	r3, [r1, #0]
 800499a:	bf18      	it	ne
 800499c:	b22d      	sxthne	r5, r5
 800499e:	e7ef      	b.n	8004980 <_printf_i+0xbc>
 80049a0:	680b      	ldr	r3, [r1, #0]
 80049a2:	6825      	ldr	r5, [r4, #0]
 80049a4:	1d18      	adds	r0, r3, #4
 80049a6:	6008      	str	r0, [r1, #0]
 80049a8:	0628      	lsls	r0, r5, #24
 80049aa:	d501      	bpl.n	80049b0 <_printf_i+0xec>
 80049ac:	681d      	ldr	r5, [r3, #0]
 80049ae:	e002      	b.n	80049b6 <_printf_i+0xf2>
 80049b0:	0669      	lsls	r1, r5, #25
 80049b2:	d5fb      	bpl.n	80049ac <_printf_i+0xe8>
 80049b4:	881d      	ldrh	r5, [r3, #0]
 80049b6:	2f6f      	cmp	r7, #111	; 0x6f
 80049b8:	bf0c      	ite	eq
 80049ba:	2308      	moveq	r3, #8
 80049bc:	230a      	movne	r3, #10
 80049be:	4852      	ldr	r0, [pc, #328]	; (8004b08 <_printf_i+0x244>)
 80049c0:	2100      	movs	r1, #0
 80049c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049c6:	6866      	ldr	r6, [r4, #4]
 80049c8:	2e00      	cmp	r6, #0
 80049ca:	bfa8      	it	ge
 80049cc:	6821      	ldrge	r1, [r4, #0]
 80049ce:	60a6      	str	r6, [r4, #8]
 80049d0:	bfa4      	itt	ge
 80049d2:	f021 0104 	bicge.w	r1, r1, #4
 80049d6:	6021      	strge	r1, [r4, #0]
 80049d8:	b90d      	cbnz	r5, 80049de <_printf_i+0x11a>
 80049da:	2e00      	cmp	r6, #0
 80049dc:	d04d      	beq.n	8004a7a <_printf_i+0x1b6>
 80049de:	4616      	mov	r6, r2
 80049e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80049e4:	fb03 5711 	mls	r7, r3, r1, r5
 80049e8:	5dc7      	ldrb	r7, [r0, r7]
 80049ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049ee:	462f      	mov	r7, r5
 80049f0:	42bb      	cmp	r3, r7
 80049f2:	460d      	mov	r5, r1
 80049f4:	d9f4      	bls.n	80049e0 <_printf_i+0x11c>
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d10b      	bne.n	8004a12 <_printf_i+0x14e>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	07df      	lsls	r7, r3, #31
 80049fe:	d508      	bpl.n	8004a12 <_printf_i+0x14e>
 8004a00:	6923      	ldr	r3, [r4, #16]
 8004a02:	6861      	ldr	r1, [r4, #4]
 8004a04:	4299      	cmp	r1, r3
 8004a06:	bfde      	ittt	le
 8004a08:	2330      	movle	r3, #48	; 0x30
 8004a0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a12:	1b92      	subs	r2, r2, r6
 8004a14:	6122      	str	r2, [r4, #16]
 8004a16:	464b      	mov	r3, r9
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f8cd a000 	str.w	sl, [sp]
 8004a20:	aa03      	add	r2, sp, #12
 8004a22:	f7ff fedf 	bl	80047e4 <_printf_common>
 8004a26:	3001      	adds	r0, #1
 8004a28:	d14c      	bne.n	8004ac4 <_printf_i+0x200>
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2e:	b004      	add	sp, #16
 8004a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a34:	4834      	ldr	r0, [pc, #208]	; (8004b08 <_printf_i+0x244>)
 8004a36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a3a:	680e      	ldr	r6, [r1, #0]
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a42:	061f      	lsls	r7, r3, #24
 8004a44:	600e      	str	r6, [r1, #0]
 8004a46:	d514      	bpl.n	8004a72 <_printf_i+0x1ae>
 8004a48:	07d9      	lsls	r1, r3, #31
 8004a4a:	bf44      	itt	mi
 8004a4c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a50:	6023      	strmi	r3, [r4, #0]
 8004a52:	b91d      	cbnz	r5, 8004a5c <_printf_i+0x198>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	f023 0320 	bic.w	r3, r3, #32
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	e7af      	b.n	80049c0 <_printf_i+0xfc>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	f043 0320 	orr.w	r3, r3, #32
 8004a66:	6023      	str	r3, [r4, #0]
 8004a68:	2378      	movs	r3, #120	; 0x78
 8004a6a:	4828      	ldr	r0, [pc, #160]	; (8004b0c <_printf_i+0x248>)
 8004a6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a70:	e7e3      	b.n	8004a3a <_printf_i+0x176>
 8004a72:	065e      	lsls	r6, r3, #25
 8004a74:	bf48      	it	mi
 8004a76:	b2ad      	uxthmi	r5, r5
 8004a78:	e7e6      	b.n	8004a48 <_printf_i+0x184>
 8004a7a:	4616      	mov	r6, r2
 8004a7c:	e7bb      	b.n	80049f6 <_printf_i+0x132>
 8004a7e:	680b      	ldr	r3, [r1, #0]
 8004a80:	6826      	ldr	r6, [r4, #0]
 8004a82:	1d1d      	adds	r5, r3, #4
 8004a84:	6960      	ldr	r0, [r4, #20]
 8004a86:	600d      	str	r5, [r1, #0]
 8004a88:	0635      	lsls	r5, r6, #24
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	d501      	bpl.n	8004a92 <_printf_i+0x1ce>
 8004a8e:	6018      	str	r0, [r3, #0]
 8004a90:	e002      	b.n	8004a98 <_printf_i+0x1d4>
 8004a92:	0671      	lsls	r1, r6, #25
 8004a94:	d5fb      	bpl.n	8004a8e <_printf_i+0x1ca>
 8004a96:	8018      	strh	r0, [r3, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4616      	mov	r6, r2
 8004a9c:	6123      	str	r3, [r4, #16]
 8004a9e:	e7ba      	b.n	8004a16 <_printf_i+0x152>
 8004aa0:	680b      	ldr	r3, [r1, #0]
 8004aa2:	1d1a      	adds	r2, r3, #4
 8004aa4:	600a      	str	r2, [r1, #0]
 8004aa6:	681e      	ldr	r6, [r3, #0]
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4630      	mov	r0, r6
 8004aac:	6862      	ldr	r2, [r4, #4]
 8004aae:	f000 fed9 	bl	8005864 <memchr>
 8004ab2:	b108      	cbz	r0, 8004ab8 <_printf_i+0x1f4>
 8004ab4:	1b80      	subs	r0, r0, r6
 8004ab6:	6060      	str	r0, [r4, #4]
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	2300      	movs	r3, #0
 8004abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac2:	e7a8      	b.n	8004a16 <_printf_i+0x152>
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	4640      	mov	r0, r8
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	47d0      	blx	sl
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d0ab      	beq.n	8004a2a <_printf_i+0x166>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	079b      	lsls	r3, r3, #30
 8004ad6:	d413      	bmi.n	8004b00 <_printf_i+0x23c>
 8004ad8:	68e0      	ldr	r0, [r4, #12]
 8004ada:	9b03      	ldr	r3, [sp, #12]
 8004adc:	4298      	cmp	r0, r3
 8004ade:	bfb8      	it	lt
 8004ae0:	4618      	movlt	r0, r3
 8004ae2:	e7a4      	b.n	8004a2e <_printf_i+0x16a>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4632      	mov	r2, r6
 8004ae8:	4649      	mov	r1, r9
 8004aea:	4640      	mov	r0, r8
 8004aec:	47d0      	blx	sl
 8004aee:	3001      	adds	r0, #1
 8004af0:	d09b      	beq.n	8004a2a <_printf_i+0x166>
 8004af2:	3501      	adds	r5, #1
 8004af4:	68e3      	ldr	r3, [r4, #12]
 8004af6:	9903      	ldr	r1, [sp, #12]
 8004af8:	1a5b      	subs	r3, r3, r1
 8004afa:	42ab      	cmp	r3, r5
 8004afc:	dcf2      	bgt.n	8004ae4 <_printf_i+0x220>
 8004afe:	e7eb      	b.n	8004ad8 <_printf_i+0x214>
 8004b00:	2500      	movs	r5, #0
 8004b02:	f104 0619 	add.w	r6, r4, #25
 8004b06:	e7f5      	b.n	8004af4 <_printf_i+0x230>
 8004b08:	080070c6 	.word	0x080070c6
 8004b0c:	080070d7 	.word	0x080070d7

08004b10 <_vsiprintf_r>:
 8004b10:	b500      	push	{lr}
 8004b12:	b09b      	sub	sp, #108	; 0x6c
 8004b14:	9100      	str	r1, [sp, #0]
 8004b16:	9104      	str	r1, [sp, #16]
 8004b18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b1c:	9105      	str	r1, [sp, #20]
 8004b1e:	9102      	str	r1, [sp, #8]
 8004b20:	4905      	ldr	r1, [pc, #20]	; (8004b38 <_vsiprintf_r+0x28>)
 8004b22:	9103      	str	r1, [sp, #12]
 8004b24:	4669      	mov	r1, sp
 8004b26:	f001 fb4b 	bl	80061c0 <_svfiprintf_r>
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	9b00      	ldr	r3, [sp, #0]
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	b01b      	add	sp, #108	; 0x6c
 8004b32:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b36:	bf00      	nop
 8004b38:	ffff0208 	.word	0xffff0208

08004b3c <vsiprintf>:
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	460a      	mov	r2, r1
 8004b40:	4601      	mov	r1, r0
 8004b42:	4802      	ldr	r0, [pc, #8]	; (8004b4c <vsiprintf+0x10>)
 8004b44:	6800      	ldr	r0, [r0, #0]
 8004b46:	f7ff bfe3 	b.w	8004b10 <_vsiprintf_r>
 8004b4a:	bf00      	nop
 8004b4c:	2000000c 	.word	0x2000000c

08004b50 <quorem>:
 8004b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	6903      	ldr	r3, [r0, #16]
 8004b56:	690c      	ldr	r4, [r1, #16]
 8004b58:	4607      	mov	r7, r0
 8004b5a:	42a3      	cmp	r3, r4
 8004b5c:	f2c0 8083 	blt.w	8004c66 <quorem+0x116>
 8004b60:	3c01      	subs	r4, #1
 8004b62:	f100 0514 	add.w	r5, r0, #20
 8004b66:	f101 0814 	add.w	r8, r1, #20
 8004b6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b88:	d332      	bcc.n	8004bf0 <quorem+0xa0>
 8004b8a:	f04f 0e00 	mov.w	lr, #0
 8004b8e:	4640      	mov	r0, r8
 8004b90:	46ac      	mov	ip, r5
 8004b92:	46f2      	mov	sl, lr
 8004b94:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b98:	b293      	uxth	r3, r2
 8004b9a:	fb06 e303 	mla	r3, r6, r3, lr
 8004b9e:	0c12      	lsrs	r2, r2, #16
 8004ba0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ba4:	fb06 e202 	mla	r2, r6, r2, lr
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	ebaa 0303 	sub.w	r3, sl, r3
 8004bae:	f8dc a000 	ldr.w	sl, [ip]
 8004bb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bb6:	fa1f fa8a 	uxth.w	sl, sl
 8004bba:	4453      	add	r3, sl
 8004bbc:	fa1f fa82 	uxth.w	sl, r2
 8004bc0:	f8dc 2000 	ldr.w	r2, [ip]
 8004bc4:	4581      	cmp	r9, r0
 8004bc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004bca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bd4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bd8:	f84c 3b04 	str.w	r3, [ip], #4
 8004bdc:	d2da      	bcs.n	8004b94 <quorem+0x44>
 8004bde:	f855 300b 	ldr.w	r3, [r5, fp]
 8004be2:	b92b      	cbnz	r3, 8004bf0 <quorem+0xa0>
 8004be4:	9b01      	ldr	r3, [sp, #4]
 8004be6:	3b04      	subs	r3, #4
 8004be8:	429d      	cmp	r5, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	d32f      	bcc.n	8004c4e <quorem+0xfe>
 8004bee:	613c      	str	r4, [r7, #16]
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	f001 f8cd 	bl	8005d90 <__mcmp>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	db25      	blt.n	8004c46 <quorem+0xf6>
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f04f 0c00 	mov.w	ip, #0
 8004c00:	3601      	adds	r6, #1
 8004c02:	f858 1b04 	ldr.w	r1, [r8], #4
 8004c06:	f8d0 e000 	ldr.w	lr, [r0]
 8004c0a:	b28b      	uxth	r3, r1
 8004c0c:	ebac 0303 	sub.w	r3, ip, r3
 8004c10:	fa1f f28e 	uxth.w	r2, lr
 8004c14:	4413      	add	r3, r2
 8004c16:	0c0a      	lsrs	r2, r1, #16
 8004c18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c26:	45c1      	cmp	r9, r8
 8004c28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c2c:	f840 3b04 	str.w	r3, [r0], #4
 8004c30:	d2e7      	bcs.n	8004c02 <quorem+0xb2>
 8004c32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c3a:	b922      	cbnz	r2, 8004c46 <quorem+0xf6>
 8004c3c:	3b04      	subs	r3, #4
 8004c3e:	429d      	cmp	r5, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	d30a      	bcc.n	8004c5a <quorem+0x10a>
 8004c44:	613c      	str	r4, [r7, #16]
 8004c46:	4630      	mov	r0, r6
 8004c48:	b003      	add	sp, #12
 8004c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	3b04      	subs	r3, #4
 8004c52:	2a00      	cmp	r2, #0
 8004c54:	d1cb      	bne.n	8004bee <quorem+0x9e>
 8004c56:	3c01      	subs	r4, #1
 8004c58:	e7c6      	b.n	8004be8 <quorem+0x98>
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	3b04      	subs	r3, #4
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	d1f0      	bne.n	8004c44 <quorem+0xf4>
 8004c62:	3c01      	subs	r4, #1
 8004c64:	e7eb      	b.n	8004c3e <quorem+0xee>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e7ee      	b.n	8004c48 <quorem+0xf8>
 8004c6a:	0000      	movs	r0, r0
 8004c6c:	0000      	movs	r0, r0
	...

08004c70 <_dtoa_r>:
 8004c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	4616      	mov	r6, r2
 8004c76:	461f      	mov	r7, r3
 8004c78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c7a:	b099      	sub	sp, #100	; 0x64
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c86:	b974      	cbnz	r4, 8004ca6 <_dtoa_r+0x36>
 8004c88:	2010      	movs	r0, #16
 8004c8a:	f000 fde3 	bl	8005854 <malloc>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	6268      	str	r0, [r5, #36]	; 0x24
 8004c92:	b920      	cbnz	r0, 8004c9e <_dtoa_r+0x2e>
 8004c94:	21ea      	movs	r1, #234	; 0xea
 8004c96:	4bae      	ldr	r3, [pc, #696]	; (8004f50 <_dtoa_r+0x2e0>)
 8004c98:	48ae      	ldr	r0, [pc, #696]	; (8004f54 <_dtoa_r+0x2e4>)
 8004c9a:	f001 fba1 	bl	80063e0 <__assert_func>
 8004c9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ca2:	6004      	str	r4, [r0, #0]
 8004ca4:	60c4      	str	r4, [r0, #12]
 8004ca6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	b151      	cbz	r1, 8004cc2 <_dtoa_r+0x52>
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4093      	lsls	r3, r2
 8004cb2:	604a      	str	r2, [r1, #4]
 8004cb4:	608b      	str	r3, [r1, #8]
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 fe30 	bl	800591c <_Bfree>
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	1e3b      	subs	r3, r7, #0
 8004cc4:	bfaf      	iteee	ge
 8004cc6:	2300      	movge	r3, #0
 8004cc8:	2201      	movlt	r2, #1
 8004cca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cce:	9305      	strlt	r3, [sp, #20]
 8004cd0:	bfa8      	it	ge
 8004cd2:	f8c8 3000 	strge.w	r3, [r8]
 8004cd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cda:	4b9f      	ldr	r3, [pc, #636]	; (8004f58 <_dtoa_r+0x2e8>)
 8004cdc:	bfb8      	it	lt
 8004cde:	f8c8 2000 	strlt.w	r2, [r8]
 8004ce2:	ea33 0309 	bics.w	r3, r3, r9
 8004ce6:	d119      	bne.n	8004d1c <_dtoa_r+0xac>
 8004ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cf4:	4333      	orrs	r3, r6
 8004cf6:	f000 8580 	beq.w	80057fa <_dtoa_r+0xb8a>
 8004cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004cfc:	b953      	cbnz	r3, 8004d14 <_dtoa_r+0xa4>
 8004cfe:	4b97      	ldr	r3, [pc, #604]	; (8004f5c <_dtoa_r+0x2ec>)
 8004d00:	e022      	b.n	8004d48 <_dtoa_r+0xd8>
 8004d02:	4b97      	ldr	r3, [pc, #604]	; (8004f60 <_dtoa_r+0x2f0>)
 8004d04:	9308      	str	r3, [sp, #32]
 8004d06:	3308      	adds	r3, #8
 8004d08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	9808      	ldr	r0, [sp, #32]
 8004d0e:	b019      	add	sp, #100	; 0x64
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	4b91      	ldr	r3, [pc, #580]	; (8004f5c <_dtoa_r+0x2ec>)
 8004d16:	9308      	str	r3, [sp, #32]
 8004d18:	3303      	adds	r3, #3
 8004d1a:	e7f5      	b.n	8004d08 <_dtoa_r+0x98>
 8004d1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f7fb fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8004d30:	4680      	mov	r8, r0
 8004d32:	b158      	cbz	r0, 8004d4c <_dtoa_r+0xdc>
 8004d34:	2301      	movs	r3, #1
 8004d36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8559 	beq.w	80057f4 <_dtoa_r+0xb84>
 8004d42:	4888      	ldr	r0, [pc, #544]	; (8004f64 <_dtoa_r+0x2f4>)
 8004d44:	6018      	str	r0, [r3, #0]
 8004d46:	1e43      	subs	r3, r0, #1
 8004d48:	9308      	str	r3, [sp, #32]
 8004d4a:	e7df      	b.n	8004d0c <_dtoa_r+0x9c>
 8004d4c:	ab16      	add	r3, sp, #88	; 0x58
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	ab17      	add	r3, sp, #92	; 0x5c
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	4628      	mov	r0, r5
 8004d56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d5a:	f001 f8c5 	bl	8005ee8 <__d2b>
 8004d5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d62:	4682      	mov	sl, r0
 8004d64:	2c00      	cmp	r4, #0
 8004d66:	d07e      	beq.n	8004e66 <_dtoa_r+0x1f6>
 8004d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d82:	2200      	movs	r2, #0
 8004d84:	4b78      	ldr	r3, [pc, #480]	; (8004f68 <_dtoa_r+0x2f8>)
 8004d86:	f7fb f9ef 	bl	8000168 <__aeabi_dsub>
 8004d8a:	a36b      	add	r3, pc, #428	; (adr r3, 8004f38 <_dtoa_r+0x2c8>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f7fb fba2 	bl	80004d8 <__aeabi_dmul>
 8004d94:	a36a      	add	r3, pc, #424	; (adr r3, 8004f40 <_dtoa_r+0x2d0>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb f9e7 	bl	800016c <__adddf3>
 8004d9e:	4606      	mov	r6, r0
 8004da0:	4620      	mov	r0, r4
 8004da2:	460f      	mov	r7, r1
 8004da4:	f7fb fb2e 	bl	8000404 <__aeabi_i2d>
 8004da8:	a367      	add	r3, pc, #412	; (adr r3, 8004f48 <_dtoa_r+0x2d8>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb fb93 	bl	80004d8 <__aeabi_dmul>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4630      	mov	r0, r6
 8004db8:	4639      	mov	r1, r7
 8004dba:	f7fb f9d7 	bl	800016c <__adddf3>
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	460f      	mov	r7, r1
 8004dc2:	f7fb fe39 	bl	8000a38 <__aeabi_d2iz>
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	4681      	mov	r9, r0
 8004dca:	2300      	movs	r3, #0
 8004dcc:	4630      	mov	r0, r6
 8004dce:	4639      	mov	r1, r7
 8004dd0:	f7fb fdf4 	bl	80009bc <__aeabi_dcmplt>
 8004dd4:	b148      	cbz	r0, 8004dea <_dtoa_r+0x17a>
 8004dd6:	4648      	mov	r0, r9
 8004dd8:	f7fb fb14 	bl	8000404 <__aeabi_i2d>
 8004ddc:	4632      	mov	r2, r6
 8004dde:	463b      	mov	r3, r7
 8004de0:	f7fb fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8004de4:	b908      	cbnz	r0, 8004dea <_dtoa_r+0x17a>
 8004de6:	f109 39ff 	add.w	r9, r9, #4294967295
 8004dea:	f1b9 0f16 	cmp.w	r9, #22
 8004dee:	d857      	bhi.n	8004ea0 <_dtoa_r+0x230>
 8004df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004df4:	4b5d      	ldr	r3, [pc, #372]	; (8004f6c <_dtoa_r+0x2fc>)
 8004df6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb fddd 	bl	80009bc <__aeabi_dcmplt>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d04e      	beq.n	8004ea4 <_dtoa_r+0x234>
 8004e06:	2300      	movs	r3, #0
 8004e08:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e10:	1b1c      	subs	r4, r3, r4
 8004e12:	1e63      	subs	r3, r4, #1
 8004e14:	9309      	str	r3, [sp, #36]	; 0x24
 8004e16:	bf49      	itett	mi
 8004e18:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e1c:	2300      	movpl	r3, #0
 8004e1e:	9306      	strmi	r3, [sp, #24]
 8004e20:	2300      	movmi	r3, #0
 8004e22:	bf54      	ite	pl
 8004e24:	9306      	strpl	r3, [sp, #24]
 8004e26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e28:	f1b9 0f00 	cmp.w	r9, #0
 8004e2c:	db3c      	blt.n	8004ea8 <_dtoa_r+0x238>
 8004e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e30:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004e34:	444b      	add	r3, r9
 8004e36:	9309      	str	r3, [sp, #36]	; 0x24
 8004e38:	2300      	movs	r3, #0
 8004e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e3e:	2b09      	cmp	r3, #9
 8004e40:	d86c      	bhi.n	8004f1c <_dtoa_r+0x2ac>
 8004e42:	2b05      	cmp	r3, #5
 8004e44:	bfc4      	itt	gt
 8004e46:	3b04      	subgt	r3, #4
 8004e48:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e4c:	bfc8      	it	gt
 8004e4e:	2400      	movgt	r4, #0
 8004e50:	f1a3 0302 	sub.w	r3, r3, #2
 8004e54:	bfd8      	it	le
 8004e56:	2401      	movle	r4, #1
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	f200 808b 	bhi.w	8004f74 <_dtoa_r+0x304>
 8004e5e:	e8df f003 	tbb	[pc, r3]
 8004e62:	4f2d      	.short	0x4f2d
 8004e64:	5b4d      	.short	0x5b4d
 8004e66:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e6a:	441c      	add	r4, r3
 8004e6c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	bfc3      	ittte	gt
 8004e74:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e78:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e7c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e80:	f1c3 0320 	rsble	r3, r3, #32
 8004e84:	bfc6      	itte	gt
 8004e86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e8a:	4318      	orrgt	r0, r3
 8004e8c:	fa06 f003 	lslle.w	r0, r6, r3
 8004e90:	f7fb faa8 	bl	80003e4 <__aeabi_ui2d>
 8004e94:	2301      	movs	r3, #1
 8004e96:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e9a:	3c01      	subs	r4, #1
 8004e9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e9e:	e770      	b.n	8004d82 <_dtoa_r+0x112>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e7b3      	b.n	8004e0c <_dtoa_r+0x19c>
 8004ea4:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ea6:	e7b2      	b.n	8004e0e <_dtoa_r+0x19e>
 8004ea8:	9b06      	ldr	r3, [sp, #24]
 8004eaa:	eba3 0309 	sub.w	r3, r3, r9
 8004eae:	9306      	str	r3, [sp, #24]
 8004eb0:	f1c9 0300 	rsb	r3, r9, #0
 8004eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	930e      	str	r3, [sp, #56]	; 0x38
 8004eba:	e7bf      	b.n	8004e3c <_dtoa_r+0x1cc>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ec0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	dc59      	bgt.n	8004f7a <_dtoa_r+0x30a>
 8004ec6:	f04f 0b01 	mov.w	fp, #1
 8004eca:	465b      	mov	r3, fp
 8004ecc:	f8cd b008 	str.w	fp, [sp, #8]
 8004ed0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ed8:	6042      	str	r2, [r0, #4]
 8004eda:	2204      	movs	r2, #4
 8004edc:	f102 0614 	add.w	r6, r2, #20
 8004ee0:	429e      	cmp	r6, r3
 8004ee2:	6841      	ldr	r1, [r0, #4]
 8004ee4:	d94f      	bls.n	8004f86 <_dtoa_r+0x316>
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 fcd8 	bl	800589c <_Balloc>
 8004eec:	9008      	str	r0, [sp, #32]
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d14d      	bne.n	8004f8e <_dtoa_r+0x31e>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <_dtoa_r+0x300>)
 8004efa:	e6cd      	b.n	8004c98 <_dtoa_r+0x28>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e7de      	b.n	8004ebe <_dtoa_r+0x24e>
 8004f00:	2300      	movs	r3, #0
 8004f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f06:	eb09 0b03 	add.w	fp, r9, r3
 8004f0a:	f10b 0301 	add.w	r3, fp, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	9302      	str	r3, [sp, #8]
 8004f12:	bfb8      	it	lt
 8004f14:	2301      	movlt	r3, #1
 8004f16:	e7dd      	b.n	8004ed4 <_dtoa_r+0x264>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e7f2      	b.n	8004f02 <_dtoa_r+0x292>
 8004f1c:	2401      	movs	r4, #1
 8004f1e:	2300      	movs	r3, #0
 8004f20:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f22:	9322      	str	r3, [sp, #136]	; 0x88
 8004f24:	f04f 3bff 	mov.w	fp, #4294967295
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2312      	movs	r3, #18
 8004f2c:	f8cd b008 	str.w	fp, [sp, #8]
 8004f30:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f32:	e7cf      	b.n	8004ed4 <_dtoa_r+0x264>
 8004f34:	f3af 8000 	nop.w
 8004f38:	636f4361 	.word	0x636f4361
 8004f3c:	3fd287a7 	.word	0x3fd287a7
 8004f40:	8b60c8b3 	.word	0x8b60c8b3
 8004f44:	3fc68a28 	.word	0x3fc68a28
 8004f48:	509f79fb 	.word	0x509f79fb
 8004f4c:	3fd34413 	.word	0x3fd34413
 8004f50:	080070f5 	.word	0x080070f5
 8004f54:	0800710c 	.word	0x0800710c
 8004f58:	7ff00000 	.word	0x7ff00000
 8004f5c:	080070f1 	.word	0x080070f1
 8004f60:	080070e8 	.word	0x080070e8
 8004f64:	080070c5 	.word	0x080070c5
 8004f68:	3ff80000 	.word	0x3ff80000
 8004f6c:	08007208 	.word	0x08007208
 8004f70:	0800716b 	.word	0x0800716b
 8004f74:	2301      	movs	r3, #1
 8004f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f78:	e7d4      	b.n	8004f24 <_dtoa_r+0x2b4>
 8004f7a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004f7e:	465b      	mov	r3, fp
 8004f80:	f8cd b008 	str.w	fp, [sp, #8]
 8004f84:	e7a6      	b.n	8004ed4 <_dtoa_r+0x264>
 8004f86:	3101      	adds	r1, #1
 8004f88:	6041      	str	r1, [r0, #4]
 8004f8a:	0052      	lsls	r2, r2, #1
 8004f8c:	e7a6      	b.n	8004edc <_dtoa_r+0x26c>
 8004f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f90:	9a08      	ldr	r2, [sp, #32]
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	9b02      	ldr	r3, [sp, #8]
 8004f96:	2b0e      	cmp	r3, #14
 8004f98:	f200 80a8 	bhi.w	80050ec <_dtoa_r+0x47c>
 8004f9c:	2c00      	cmp	r4, #0
 8004f9e:	f000 80a5 	beq.w	80050ec <_dtoa_r+0x47c>
 8004fa2:	f1b9 0f00 	cmp.w	r9, #0
 8004fa6:	dd34      	ble.n	8005012 <_dtoa_r+0x3a2>
 8004fa8:	4a9a      	ldr	r2, [pc, #616]	; (8005214 <_dtoa_r+0x5a4>)
 8004faa:	f009 030f 	and.w	r3, r9, #15
 8004fae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fb2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004fb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fbe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004fc2:	d016      	beq.n	8004ff2 <_dtoa_r+0x382>
 8004fc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fc8:	4b93      	ldr	r3, [pc, #588]	; (8005218 <_dtoa_r+0x5a8>)
 8004fca:	2703      	movs	r7, #3
 8004fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fd0:	f7fb fbac 	bl	800072c <__aeabi_ddiv>
 8004fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd8:	f004 040f 	and.w	r4, r4, #15
 8004fdc:	4e8e      	ldr	r6, [pc, #568]	; (8005218 <_dtoa_r+0x5a8>)
 8004fde:	b954      	cbnz	r4, 8004ff6 <_dtoa_r+0x386>
 8004fe0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fe8:	f7fb fba0 	bl	800072c <__aeabi_ddiv>
 8004fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ff0:	e029      	b.n	8005046 <_dtoa_r+0x3d6>
 8004ff2:	2702      	movs	r7, #2
 8004ff4:	e7f2      	b.n	8004fdc <_dtoa_r+0x36c>
 8004ff6:	07e1      	lsls	r1, r4, #31
 8004ff8:	d508      	bpl.n	800500c <_dtoa_r+0x39c>
 8004ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ffe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005002:	f7fb fa69 	bl	80004d8 <__aeabi_dmul>
 8005006:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800500a:	3701      	adds	r7, #1
 800500c:	1064      	asrs	r4, r4, #1
 800500e:	3608      	adds	r6, #8
 8005010:	e7e5      	b.n	8004fde <_dtoa_r+0x36e>
 8005012:	f000 80a5 	beq.w	8005160 <_dtoa_r+0x4f0>
 8005016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800501a:	f1c9 0400 	rsb	r4, r9, #0
 800501e:	4b7d      	ldr	r3, [pc, #500]	; (8005214 <_dtoa_r+0x5a4>)
 8005020:	f004 020f 	and.w	r2, r4, #15
 8005024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb fa54 	bl	80004d8 <__aeabi_dmul>
 8005030:	2702      	movs	r7, #2
 8005032:	2300      	movs	r3, #0
 8005034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005038:	4e77      	ldr	r6, [pc, #476]	; (8005218 <_dtoa_r+0x5a8>)
 800503a:	1124      	asrs	r4, r4, #4
 800503c:	2c00      	cmp	r4, #0
 800503e:	f040 8084 	bne.w	800514a <_dtoa_r+0x4da>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1d2      	bne.n	8004fec <_dtoa_r+0x37c>
 8005046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 808b 	beq.w	8005164 <_dtoa_r+0x4f4>
 800504e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005052:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005056:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800505a:	2200      	movs	r2, #0
 800505c:	4b6f      	ldr	r3, [pc, #444]	; (800521c <_dtoa_r+0x5ac>)
 800505e:	f7fb fcad 	bl	80009bc <__aeabi_dcmplt>
 8005062:	2800      	cmp	r0, #0
 8005064:	d07e      	beq.n	8005164 <_dtoa_r+0x4f4>
 8005066:	9b02      	ldr	r3, [sp, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d07b      	beq.n	8005164 <_dtoa_r+0x4f4>
 800506c:	f1bb 0f00 	cmp.w	fp, #0
 8005070:	dd38      	ble.n	80050e4 <_dtoa_r+0x474>
 8005072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005076:	2200      	movs	r2, #0
 8005078:	4b69      	ldr	r3, [pc, #420]	; (8005220 <_dtoa_r+0x5b0>)
 800507a:	f7fb fa2d 	bl	80004d8 <__aeabi_dmul>
 800507e:	465c      	mov	r4, fp
 8005080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005084:	f109 38ff 	add.w	r8, r9, #4294967295
 8005088:	3701      	adds	r7, #1
 800508a:	4638      	mov	r0, r7
 800508c:	f7fb f9ba 	bl	8000404 <__aeabi_i2d>
 8005090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005094:	f7fb fa20 	bl	80004d8 <__aeabi_dmul>
 8005098:	2200      	movs	r2, #0
 800509a:	4b62      	ldr	r3, [pc, #392]	; (8005224 <_dtoa_r+0x5b4>)
 800509c:	f7fb f866 	bl	800016c <__adddf3>
 80050a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050a8:	9611      	str	r6, [sp, #68]	; 0x44
 80050aa:	2c00      	cmp	r4, #0
 80050ac:	d15d      	bne.n	800516a <_dtoa_r+0x4fa>
 80050ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050b2:	2200      	movs	r2, #0
 80050b4:	4b5c      	ldr	r3, [pc, #368]	; (8005228 <_dtoa_r+0x5b8>)
 80050b6:	f7fb f857 	bl	8000168 <__aeabi_dsub>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050c2:	4633      	mov	r3, r6
 80050c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050c6:	f7fb fc97 	bl	80009f8 <__aeabi_dcmpgt>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	f040 829e 	bne.w	800560c <_dtoa_r+0x99c>
 80050d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050da:	f7fb fc6f 	bl	80009bc <__aeabi_dcmplt>
 80050de:	2800      	cmp	r0, #0
 80050e0:	f040 8292 	bne.w	8005608 <_dtoa_r+0x998>
 80050e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80050e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f2c0 8153 	blt.w	800539a <_dtoa_r+0x72a>
 80050f4:	f1b9 0f0e 	cmp.w	r9, #14
 80050f8:	f300 814f 	bgt.w	800539a <_dtoa_r+0x72a>
 80050fc:	4b45      	ldr	r3, [pc, #276]	; (8005214 <_dtoa_r+0x5a4>)
 80050fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005102:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005106:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800510a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800510c:	2b00      	cmp	r3, #0
 800510e:	f280 80db 	bge.w	80052c8 <_dtoa_r+0x658>
 8005112:	9b02      	ldr	r3, [sp, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f300 80d7 	bgt.w	80052c8 <_dtoa_r+0x658>
 800511a:	f040 8274 	bne.w	8005606 <_dtoa_r+0x996>
 800511e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005122:	2200      	movs	r2, #0
 8005124:	4b40      	ldr	r3, [pc, #256]	; (8005228 <_dtoa_r+0x5b8>)
 8005126:	f7fb f9d7 	bl	80004d8 <__aeabi_dmul>
 800512a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800512e:	f7fb fc59 	bl	80009e4 <__aeabi_dcmpge>
 8005132:	9c02      	ldr	r4, [sp, #8]
 8005134:	4626      	mov	r6, r4
 8005136:	2800      	cmp	r0, #0
 8005138:	f040 824a 	bne.w	80055d0 <_dtoa_r+0x960>
 800513c:	2331      	movs	r3, #49	; 0x31
 800513e:	9f08      	ldr	r7, [sp, #32]
 8005140:	f109 0901 	add.w	r9, r9, #1
 8005144:	f807 3b01 	strb.w	r3, [r7], #1
 8005148:	e246      	b.n	80055d8 <_dtoa_r+0x968>
 800514a:	07e2      	lsls	r2, r4, #31
 800514c:	d505      	bpl.n	800515a <_dtoa_r+0x4ea>
 800514e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005152:	f7fb f9c1 	bl	80004d8 <__aeabi_dmul>
 8005156:	2301      	movs	r3, #1
 8005158:	3701      	adds	r7, #1
 800515a:	1064      	asrs	r4, r4, #1
 800515c:	3608      	adds	r6, #8
 800515e:	e76d      	b.n	800503c <_dtoa_r+0x3cc>
 8005160:	2702      	movs	r7, #2
 8005162:	e770      	b.n	8005046 <_dtoa_r+0x3d6>
 8005164:	46c8      	mov	r8, r9
 8005166:	9c02      	ldr	r4, [sp, #8]
 8005168:	e78f      	b.n	800508a <_dtoa_r+0x41a>
 800516a:	9908      	ldr	r1, [sp, #32]
 800516c:	4b29      	ldr	r3, [pc, #164]	; (8005214 <_dtoa_r+0x5a4>)
 800516e:	4421      	add	r1, r4
 8005170:	9112      	str	r1, [sp, #72]	; 0x48
 8005172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005174:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005178:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800517c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005180:	2900      	cmp	r1, #0
 8005182:	d055      	beq.n	8005230 <_dtoa_r+0x5c0>
 8005184:	2000      	movs	r0, #0
 8005186:	4929      	ldr	r1, [pc, #164]	; (800522c <_dtoa_r+0x5bc>)
 8005188:	f7fb fad0 	bl	800072c <__aeabi_ddiv>
 800518c:	463b      	mov	r3, r7
 800518e:	4632      	mov	r2, r6
 8005190:	f7fa ffea 	bl	8000168 <__aeabi_dsub>
 8005194:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005198:	9f08      	ldr	r7, [sp, #32]
 800519a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800519e:	f7fb fc4b 	bl	8000a38 <__aeabi_d2iz>
 80051a2:	4604      	mov	r4, r0
 80051a4:	f7fb f92e 	bl	8000404 <__aeabi_i2d>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051b0:	f7fa ffda 	bl	8000168 <__aeabi_dsub>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	3430      	adds	r4, #48	; 0x30
 80051ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051c2:	f807 4b01 	strb.w	r4, [r7], #1
 80051c6:	f7fb fbf9 	bl	80009bc <__aeabi_dcmplt>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d174      	bne.n	80052b8 <_dtoa_r+0x648>
 80051ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051d2:	2000      	movs	r0, #0
 80051d4:	4911      	ldr	r1, [pc, #68]	; (800521c <_dtoa_r+0x5ac>)
 80051d6:	f7fa ffc7 	bl	8000168 <__aeabi_dsub>
 80051da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051de:	f7fb fbed 	bl	80009bc <__aeabi_dcmplt>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	f040 80b6 	bne.w	8005354 <_dtoa_r+0x6e4>
 80051e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051ea:	429f      	cmp	r7, r3
 80051ec:	f43f af7a 	beq.w	80050e4 <_dtoa_r+0x474>
 80051f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051f4:	2200      	movs	r2, #0
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <_dtoa_r+0x5b0>)
 80051f8:	f7fb f96e 	bl	80004d8 <__aeabi_dmul>
 80051fc:	2200      	movs	r2, #0
 80051fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <_dtoa_r+0x5b0>)
 8005208:	f7fb f966 	bl	80004d8 <__aeabi_dmul>
 800520c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005210:	e7c3      	b.n	800519a <_dtoa_r+0x52a>
 8005212:	bf00      	nop
 8005214:	08007208 	.word	0x08007208
 8005218:	080071e0 	.word	0x080071e0
 800521c:	3ff00000 	.word	0x3ff00000
 8005220:	40240000 	.word	0x40240000
 8005224:	401c0000 	.word	0x401c0000
 8005228:	40140000 	.word	0x40140000
 800522c:	3fe00000 	.word	0x3fe00000
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fb f950 	bl	80004d8 <__aeabi_dmul>
 8005238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800523a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800523e:	9c08      	ldr	r4, [sp, #32]
 8005240:	9314      	str	r3, [sp, #80]	; 0x50
 8005242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005246:	f7fb fbf7 	bl	8000a38 <__aeabi_d2iz>
 800524a:	9015      	str	r0, [sp, #84]	; 0x54
 800524c:	f7fb f8da 	bl	8000404 <__aeabi_i2d>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005258:	f7fa ff86 	bl	8000168 <__aeabi_dsub>
 800525c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800525e:	4606      	mov	r6, r0
 8005260:	3330      	adds	r3, #48	; 0x30
 8005262:	f804 3b01 	strb.w	r3, [r4], #1
 8005266:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005268:	460f      	mov	r7, r1
 800526a:	429c      	cmp	r4, r3
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	d124      	bne.n	80052bc <_dtoa_r+0x64c>
 8005272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005276:	4bb3      	ldr	r3, [pc, #716]	; (8005544 <_dtoa_r+0x8d4>)
 8005278:	f7fa ff78 	bl	800016c <__adddf3>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4630      	mov	r0, r6
 8005282:	4639      	mov	r1, r7
 8005284:	f7fb fbb8 	bl	80009f8 <__aeabi_dcmpgt>
 8005288:	2800      	cmp	r0, #0
 800528a:	d162      	bne.n	8005352 <_dtoa_r+0x6e2>
 800528c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005290:	2000      	movs	r0, #0
 8005292:	49ac      	ldr	r1, [pc, #688]	; (8005544 <_dtoa_r+0x8d4>)
 8005294:	f7fa ff68 	bl	8000168 <__aeabi_dsub>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4630      	mov	r0, r6
 800529e:	4639      	mov	r1, r7
 80052a0:	f7fb fb8c 	bl	80009bc <__aeabi_dcmplt>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	f43f af1d 	beq.w	80050e4 <_dtoa_r+0x474>
 80052aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052ac:	1e7b      	subs	r3, r7, #1
 80052ae:	9314      	str	r3, [sp, #80]	; 0x50
 80052b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052b4:	2b30      	cmp	r3, #48	; 0x30
 80052b6:	d0f8      	beq.n	80052aa <_dtoa_r+0x63a>
 80052b8:	46c1      	mov	r9, r8
 80052ba:	e03a      	b.n	8005332 <_dtoa_r+0x6c2>
 80052bc:	4ba2      	ldr	r3, [pc, #648]	; (8005548 <_dtoa_r+0x8d8>)
 80052be:	f7fb f90b 	bl	80004d8 <__aeabi_dmul>
 80052c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052c6:	e7bc      	b.n	8005242 <_dtoa_r+0x5d2>
 80052c8:	9f08      	ldr	r7, [sp, #32]
 80052ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052d2:	f7fb fa2b 	bl	800072c <__aeabi_ddiv>
 80052d6:	f7fb fbaf 	bl	8000a38 <__aeabi_d2iz>
 80052da:	4604      	mov	r4, r0
 80052dc:	f7fb f892 	bl	8000404 <__aeabi_i2d>
 80052e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052e4:	f7fb f8f8 	bl	80004d8 <__aeabi_dmul>
 80052e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80052ec:	460b      	mov	r3, r1
 80052ee:	4602      	mov	r2, r0
 80052f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f4:	f7fa ff38 	bl	8000168 <__aeabi_dsub>
 80052f8:	f807 6b01 	strb.w	r6, [r7], #1
 80052fc:	9e08      	ldr	r6, [sp, #32]
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	1bbe      	subs	r6, r7, r6
 8005302:	42b3      	cmp	r3, r6
 8005304:	d13a      	bne.n	800537c <_dtoa_r+0x70c>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	f7fa ff2f 	bl	800016c <__adddf3>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800531a:	f7fb fb6d 	bl	80009f8 <__aeabi_dcmpgt>
 800531e:	bb58      	cbnz	r0, 8005378 <_dtoa_r+0x708>
 8005320:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005328:	f7fb fb3e 	bl	80009a8 <__aeabi_dcmpeq>
 800532c:	b108      	cbz	r0, 8005332 <_dtoa_r+0x6c2>
 800532e:	07e1      	lsls	r1, r4, #31
 8005330:	d422      	bmi.n	8005378 <_dtoa_r+0x708>
 8005332:	4628      	mov	r0, r5
 8005334:	4651      	mov	r1, sl
 8005336:	f000 faf1 	bl	800591c <_Bfree>
 800533a:	2300      	movs	r3, #0
 800533c:	703b      	strb	r3, [r7, #0]
 800533e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005340:	f109 0001 	add.w	r0, r9, #1
 8005344:	6018      	str	r0, [r3, #0]
 8005346:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005348:	2b00      	cmp	r3, #0
 800534a:	f43f acdf 	beq.w	8004d0c <_dtoa_r+0x9c>
 800534e:	601f      	str	r7, [r3, #0]
 8005350:	e4dc      	b.n	8004d0c <_dtoa_r+0x9c>
 8005352:	4627      	mov	r7, r4
 8005354:	463b      	mov	r3, r7
 8005356:	461f      	mov	r7, r3
 8005358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800535c:	2a39      	cmp	r2, #57	; 0x39
 800535e:	d107      	bne.n	8005370 <_dtoa_r+0x700>
 8005360:	9a08      	ldr	r2, [sp, #32]
 8005362:	429a      	cmp	r2, r3
 8005364:	d1f7      	bne.n	8005356 <_dtoa_r+0x6e6>
 8005366:	2230      	movs	r2, #48	; 0x30
 8005368:	9908      	ldr	r1, [sp, #32]
 800536a:	f108 0801 	add.w	r8, r8, #1
 800536e:	700a      	strb	r2, [r1, #0]
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	3201      	adds	r2, #1
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	e79f      	b.n	80052b8 <_dtoa_r+0x648>
 8005378:	46c8      	mov	r8, r9
 800537a:	e7eb      	b.n	8005354 <_dtoa_r+0x6e4>
 800537c:	2200      	movs	r2, #0
 800537e:	4b72      	ldr	r3, [pc, #456]	; (8005548 <_dtoa_r+0x8d8>)
 8005380:	f7fb f8aa 	bl	80004d8 <__aeabi_dmul>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800538c:	2200      	movs	r2, #0
 800538e:	2300      	movs	r3, #0
 8005390:	f7fb fb0a 	bl	80009a8 <__aeabi_dcmpeq>
 8005394:	2800      	cmp	r0, #0
 8005396:	d098      	beq.n	80052ca <_dtoa_r+0x65a>
 8005398:	e7cb      	b.n	8005332 <_dtoa_r+0x6c2>
 800539a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800539c:	2a00      	cmp	r2, #0
 800539e:	f000 80cd 	beq.w	800553c <_dtoa_r+0x8cc>
 80053a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053a4:	2a01      	cmp	r2, #1
 80053a6:	f300 80af 	bgt.w	8005508 <_dtoa_r+0x898>
 80053aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053ac:	2a00      	cmp	r2, #0
 80053ae:	f000 80a7 	beq.w	8005500 <_dtoa_r+0x890>
 80053b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053b8:	9f06      	ldr	r7, [sp, #24]
 80053ba:	9a06      	ldr	r2, [sp, #24]
 80053bc:	2101      	movs	r1, #1
 80053be:	441a      	add	r2, r3
 80053c0:	9206      	str	r2, [sp, #24]
 80053c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053c4:	4628      	mov	r0, r5
 80053c6:	441a      	add	r2, r3
 80053c8:	9209      	str	r2, [sp, #36]	; 0x24
 80053ca:	f000 fb61 	bl	8005a90 <__i2b>
 80053ce:	4606      	mov	r6, r0
 80053d0:	2f00      	cmp	r7, #0
 80053d2:	dd0c      	ble.n	80053ee <_dtoa_r+0x77e>
 80053d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	dd09      	ble.n	80053ee <_dtoa_r+0x77e>
 80053da:	42bb      	cmp	r3, r7
 80053dc:	bfa8      	it	ge
 80053de:	463b      	movge	r3, r7
 80053e0:	9a06      	ldr	r2, [sp, #24]
 80053e2:	1aff      	subs	r7, r7, r3
 80053e4:	1ad2      	subs	r2, r2, r3
 80053e6:	9206      	str	r2, [sp, #24]
 80053e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	9309      	str	r3, [sp, #36]	; 0x24
 80053ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f0:	b1f3      	cbz	r3, 8005430 <_dtoa_r+0x7c0>
 80053f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80a9 	beq.w	800554c <_dtoa_r+0x8dc>
 80053fa:	2c00      	cmp	r4, #0
 80053fc:	dd10      	ble.n	8005420 <_dtoa_r+0x7b0>
 80053fe:	4631      	mov	r1, r6
 8005400:	4622      	mov	r2, r4
 8005402:	4628      	mov	r0, r5
 8005404:	f000 fbfe 	bl	8005c04 <__pow5mult>
 8005408:	4652      	mov	r2, sl
 800540a:	4601      	mov	r1, r0
 800540c:	4606      	mov	r6, r0
 800540e:	4628      	mov	r0, r5
 8005410:	f000 fb54 	bl	8005abc <__multiply>
 8005414:	4680      	mov	r8, r0
 8005416:	4651      	mov	r1, sl
 8005418:	4628      	mov	r0, r5
 800541a:	f000 fa7f 	bl	800591c <_Bfree>
 800541e:	46c2      	mov	sl, r8
 8005420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005422:	1b1a      	subs	r2, r3, r4
 8005424:	d004      	beq.n	8005430 <_dtoa_r+0x7c0>
 8005426:	4651      	mov	r1, sl
 8005428:	4628      	mov	r0, r5
 800542a:	f000 fbeb 	bl	8005c04 <__pow5mult>
 800542e:	4682      	mov	sl, r0
 8005430:	2101      	movs	r1, #1
 8005432:	4628      	mov	r0, r5
 8005434:	f000 fb2c 	bl	8005a90 <__i2b>
 8005438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800543a:	4604      	mov	r4, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	f340 8087 	ble.w	8005550 <_dtoa_r+0x8e0>
 8005442:	461a      	mov	r2, r3
 8005444:	4601      	mov	r1, r0
 8005446:	4628      	mov	r0, r5
 8005448:	f000 fbdc 	bl	8005c04 <__pow5mult>
 800544c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800544e:	4604      	mov	r4, r0
 8005450:	2b01      	cmp	r3, #1
 8005452:	f340 8080 	ble.w	8005556 <_dtoa_r+0x8e6>
 8005456:	f04f 0800 	mov.w	r8, #0
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005460:	6918      	ldr	r0, [r3, #16]
 8005462:	f000 fac7 	bl	80059f4 <__hi0bits>
 8005466:	f1c0 0020 	rsb	r0, r0, #32
 800546a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800546c:	4418      	add	r0, r3
 800546e:	f010 001f 	ands.w	r0, r0, #31
 8005472:	f000 8092 	beq.w	800559a <_dtoa_r+0x92a>
 8005476:	f1c0 0320 	rsb	r3, r0, #32
 800547a:	2b04      	cmp	r3, #4
 800547c:	f340 808a 	ble.w	8005594 <_dtoa_r+0x924>
 8005480:	f1c0 001c 	rsb	r0, r0, #28
 8005484:	9b06      	ldr	r3, [sp, #24]
 8005486:	4407      	add	r7, r0
 8005488:	4403      	add	r3, r0
 800548a:	9306      	str	r3, [sp, #24]
 800548c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548e:	4403      	add	r3, r0
 8005490:	9309      	str	r3, [sp, #36]	; 0x24
 8005492:	9b06      	ldr	r3, [sp, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	dd05      	ble.n	80054a4 <_dtoa_r+0x834>
 8005498:	4651      	mov	r1, sl
 800549a:	461a      	mov	r2, r3
 800549c:	4628      	mov	r0, r5
 800549e:	f000 fc0b 	bl	8005cb8 <__lshift>
 80054a2:	4682      	mov	sl, r0
 80054a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	dd05      	ble.n	80054b6 <_dtoa_r+0x846>
 80054aa:	4621      	mov	r1, r4
 80054ac:	461a      	mov	r2, r3
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 fc02 	bl	8005cb8 <__lshift>
 80054b4:	4604      	mov	r4, r0
 80054b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d070      	beq.n	800559e <_dtoa_r+0x92e>
 80054bc:	4621      	mov	r1, r4
 80054be:	4650      	mov	r0, sl
 80054c0:	f000 fc66 	bl	8005d90 <__mcmp>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	da6a      	bge.n	800559e <_dtoa_r+0x92e>
 80054c8:	2300      	movs	r3, #0
 80054ca:	4651      	mov	r1, sl
 80054cc:	220a      	movs	r2, #10
 80054ce:	4628      	mov	r0, r5
 80054d0:	f000 fa46 	bl	8005960 <__multadd>
 80054d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054d6:	4682      	mov	sl, r0
 80054d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 8193 	beq.w	8005808 <_dtoa_r+0xb98>
 80054e2:	4631      	mov	r1, r6
 80054e4:	2300      	movs	r3, #0
 80054e6:	220a      	movs	r2, #10
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 fa39 	bl	8005960 <__multadd>
 80054ee:	f1bb 0f00 	cmp.w	fp, #0
 80054f2:	4606      	mov	r6, r0
 80054f4:	f300 8093 	bgt.w	800561e <_dtoa_r+0x9ae>
 80054f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	dc57      	bgt.n	80055ae <_dtoa_r+0x93e>
 80054fe:	e08e      	b.n	800561e <_dtoa_r+0x9ae>
 8005500:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005502:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005506:	e756      	b.n	80053b6 <_dtoa_r+0x746>
 8005508:	9b02      	ldr	r3, [sp, #8]
 800550a:	1e5c      	subs	r4, r3, #1
 800550c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800550e:	42a3      	cmp	r3, r4
 8005510:	bfb7      	itett	lt
 8005512:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005514:	1b1c      	subge	r4, r3, r4
 8005516:	1ae2      	sublt	r2, r4, r3
 8005518:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800551a:	bfbe      	ittt	lt
 800551c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800551e:	189b      	addlt	r3, r3, r2
 8005520:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005522:	9b02      	ldr	r3, [sp, #8]
 8005524:	bfb8      	it	lt
 8005526:	2400      	movlt	r4, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	bfbb      	ittet	lt
 800552c:	9b06      	ldrlt	r3, [sp, #24]
 800552e:	9a02      	ldrlt	r2, [sp, #8]
 8005530:	9f06      	ldrge	r7, [sp, #24]
 8005532:	1a9f      	sublt	r7, r3, r2
 8005534:	bfac      	ite	ge
 8005536:	9b02      	ldrge	r3, [sp, #8]
 8005538:	2300      	movlt	r3, #0
 800553a:	e73e      	b.n	80053ba <_dtoa_r+0x74a>
 800553c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800553e:	9f06      	ldr	r7, [sp, #24]
 8005540:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005542:	e745      	b.n	80053d0 <_dtoa_r+0x760>
 8005544:	3fe00000 	.word	0x3fe00000
 8005548:	40240000 	.word	0x40240000
 800554c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800554e:	e76a      	b.n	8005426 <_dtoa_r+0x7b6>
 8005550:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005552:	2b01      	cmp	r3, #1
 8005554:	dc19      	bgt.n	800558a <_dtoa_r+0x91a>
 8005556:	9b04      	ldr	r3, [sp, #16]
 8005558:	b9bb      	cbnz	r3, 800558a <_dtoa_r+0x91a>
 800555a:	9b05      	ldr	r3, [sp, #20]
 800555c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005560:	b99b      	cbnz	r3, 800558a <_dtoa_r+0x91a>
 8005562:	9b05      	ldr	r3, [sp, #20]
 8005564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005568:	0d1b      	lsrs	r3, r3, #20
 800556a:	051b      	lsls	r3, r3, #20
 800556c:	b183      	cbz	r3, 8005590 <_dtoa_r+0x920>
 800556e:	f04f 0801 	mov.w	r8, #1
 8005572:	9b06      	ldr	r3, [sp, #24]
 8005574:	3301      	adds	r3, #1
 8005576:	9306      	str	r3, [sp, #24]
 8005578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557a:	3301      	adds	r3, #1
 800557c:	9309      	str	r3, [sp, #36]	; 0x24
 800557e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005580:	2b00      	cmp	r3, #0
 8005582:	f47f af6a 	bne.w	800545a <_dtoa_r+0x7ea>
 8005586:	2001      	movs	r0, #1
 8005588:	e76f      	b.n	800546a <_dtoa_r+0x7fa>
 800558a:	f04f 0800 	mov.w	r8, #0
 800558e:	e7f6      	b.n	800557e <_dtoa_r+0x90e>
 8005590:	4698      	mov	r8, r3
 8005592:	e7f4      	b.n	800557e <_dtoa_r+0x90e>
 8005594:	f43f af7d 	beq.w	8005492 <_dtoa_r+0x822>
 8005598:	4618      	mov	r0, r3
 800559a:	301c      	adds	r0, #28
 800559c:	e772      	b.n	8005484 <_dtoa_r+0x814>
 800559e:	9b02      	ldr	r3, [sp, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	dc36      	bgt.n	8005612 <_dtoa_r+0x9a2>
 80055a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	dd33      	ble.n	8005612 <_dtoa_r+0x9a2>
 80055aa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80055ae:	f1bb 0f00 	cmp.w	fp, #0
 80055b2:	d10d      	bne.n	80055d0 <_dtoa_r+0x960>
 80055b4:	4621      	mov	r1, r4
 80055b6:	465b      	mov	r3, fp
 80055b8:	2205      	movs	r2, #5
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 f9d0 	bl	8005960 <__multadd>
 80055c0:	4601      	mov	r1, r0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4650      	mov	r0, sl
 80055c6:	f000 fbe3 	bl	8005d90 <__mcmp>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	f73f adb6 	bgt.w	800513c <_dtoa_r+0x4cc>
 80055d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055d2:	9f08      	ldr	r7, [sp, #32]
 80055d4:	ea6f 0903 	mvn.w	r9, r3
 80055d8:	f04f 0800 	mov.w	r8, #0
 80055dc:	4621      	mov	r1, r4
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 f99c 	bl	800591c <_Bfree>
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	f43f aea4 	beq.w	8005332 <_dtoa_r+0x6c2>
 80055ea:	f1b8 0f00 	cmp.w	r8, #0
 80055ee:	d005      	beq.n	80055fc <_dtoa_r+0x98c>
 80055f0:	45b0      	cmp	r8, r6
 80055f2:	d003      	beq.n	80055fc <_dtoa_r+0x98c>
 80055f4:	4641      	mov	r1, r8
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 f990 	bl	800591c <_Bfree>
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 f98c 	bl	800591c <_Bfree>
 8005604:	e695      	b.n	8005332 <_dtoa_r+0x6c2>
 8005606:	2400      	movs	r4, #0
 8005608:	4626      	mov	r6, r4
 800560a:	e7e1      	b.n	80055d0 <_dtoa_r+0x960>
 800560c:	46c1      	mov	r9, r8
 800560e:	4626      	mov	r6, r4
 8005610:	e594      	b.n	800513c <_dtoa_r+0x4cc>
 8005612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005614:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80fc 	beq.w	8005816 <_dtoa_r+0xba6>
 800561e:	2f00      	cmp	r7, #0
 8005620:	dd05      	ble.n	800562e <_dtoa_r+0x9be>
 8005622:	4631      	mov	r1, r6
 8005624:	463a      	mov	r2, r7
 8005626:	4628      	mov	r0, r5
 8005628:	f000 fb46 	bl	8005cb8 <__lshift>
 800562c:	4606      	mov	r6, r0
 800562e:	f1b8 0f00 	cmp.w	r8, #0
 8005632:	d05c      	beq.n	80056ee <_dtoa_r+0xa7e>
 8005634:	4628      	mov	r0, r5
 8005636:	6871      	ldr	r1, [r6, #4]
 8005638:	f000 f930 	bl	800589c <_Balloc>
 800563c:	4607      	mov	r7, r0
 800563e:	b928      	cbnz	r0, 800564c <_dtoa_r+0x9dc>
 8005640:	4602      	mov	r2, r0
 8005642:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005646:	4b7e      	ldr	r3, [pc, #504]	; (8005840 <_dtoa_r+0xbd0>)
 8005648:	f7ff bb26 	b.w	8004c98 <_dtoa_r+0x28>
 800564c:	6932      	ldr	r2, [r6, #16]
 800564e:	f106 010c 	add.w	r1, r6, #12
 8005652:	3202      	adds	r2, #2
 8005654:	0092      	lsls	r2, r2, #2
 8005656:	300c      	adds	r0, #12
 8005658:	f000 f912 	bl	8005880 <memcpy>
 800565c:	2201      	movs	r2, #1
 800565e:	4639      	mov	r1, r7
 8005660:	4628      	mov	r0, r5
 8005662:	f000 fb29 	bl	8005cb8 <__lshift>
 8005666:	46b0      	mov	r8, r6
 8005668:	4606      	mov	r6, r0
 800566a:	9b08      	ldr	r3, [sp, #32]
 800566c:	3301      	adds	r3, #1
 800566e:	9302      	str	r3, [sp, #8]
 8005670:	9b08      	ldr	r3, [sp, #32]
 8005672:	445b      	add	r3, fp
 8005674:	930a      	str	r3, [sp, #40]	; 0x28
 8005676:	9b04      	ldr	r3, [sp, #16]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	9309      	str	r3, [sp, #36]	; 0x24
 800567e:	9b02      	ldr	r3, [sp, #8]
 8005680:	4621      	mov	r1, r4
 8005682:	4650      	mov	r0, sl
 8005684:	f103 3bff 	add.w	fp, r3, #4294967295
 8005688:	f7ff fa62 	bl	8004b50 <quorem>
 800568c:	4603      	mov	r3, r0
 800568e:	4641      	mov	r1, r8
 8005690:	3330      	adds	r3, #48	; 0x30
 8005692:	9004      	str	r0, [sp, #16]
 8005694:	4650      	mov	r0, sl
 8005696:	930b      	str	r3, [sp, #44]	; 0x2c
 8005698:	f000 fb7a 	bl	8005d90 <__mcmp>
 800569c:	4632      	mov	r2, r6
 800569e:	9006      	str	r0, [sp, #24]
 80056a0:	4621      	mov	r1, r4
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 fb90 	bl	8005dc8 <__mdiff>
 80056a8:	68c2      	ldr	r2, [r0, #12]
 80056aa:	4607      	mov	r7, r0
 80056ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ae:	bb02      	cbnz	r2, 80056f2 <_dtoa_r+0xa82>
 80056b0:	4601      	mov	r1, r0
 80056b2:	4650      	mov	r0, sl
 80056b4:	f000 fb6c 	bl	8005d90 <__mcmp>
 80056b8:	4602      	mov	r2, r0
 80056ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056bc:	4639      	mov	r1, r7
 80056be:	4628      	mov	r0, r5
 80056c0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056c4:	f000 f92a 	bl	800591c <_Bfree>
 80056c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056cc:	9f02      	ldr	r7, [sp, #8]
 80056ce:	ea43 0102 	orr.w	r1, r3, r2
 80056d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d4:	430b      	orrs	r3, r1
 80056d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d8:	d10d      	bne.n	80056f6 <_dtoa_r+0xa86>
 80056da:	2b39      	cmp	r3, #57	; 0x39
 80056dc:	d027      	beq.n	800572e <_dtoa_r+0xabe>
 80056de:	9a06      	ldr	r2, [sp, #24]
 80056e0:	2a00      	cmp	r2, #0
 80056e2:	dd01      	ble.n	80056e8 <_dtoa_r+0xa78>
 80056e4:	9b04      	ldr	r3, [sp, #16]
 80056e6:	3331      	adds	r3, #49	; 0x31
 80056e8:	f88b 3000 	strb.w	r3, [fp]
 80056ec:	e776      	b.n	80055dc <_dtoa_r+0x96c>
 80056ee:	4630      	mov	r0, r6
 80056f0:	e7b9      	b.n	8005666 <_dtoa_r+0x9f6>
 80056f2:	2201      	movs	r2, #1
 80056f4:	e7e2      	b.n	80056bc <_dtoa_r+0xa4c>
 80056f6:	9906      	ldr	r1, [sp, #24]
 80056f8:	2900      	cmp	r1, #0
 80056fa:	db04      	blt.n	8005706 <_dtoa_r+0xa96>
 80056fc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80056fe:	4301      	orrs	r1, r0
 8005700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005702:	4301      	orrs	r1, r0
 8005704:	d120      	bne.n	8005748 <_dtoa_r+0xad8>
 8005706:	2a00      	cmp	r2, #0
 8005708:	ddee      	ble.n	80056e8 <_dtoa_r+0xa78>
 800570a:	4651      	mov	r1, sl
 800570c:	2201      	movs	r2, #1
 800570e:	4628      	mov	r0, r5
 8005710:	9302      	str	r3, [sp, #8]
 8005712:	f000 fad1 	bl	8005cb8 <__lshift>
 8005716:	4621      	mov	r1, r4
 8005718:	4682      	mov	sl, r0
 800571a:	f000 fb39 	bl	8005d90 <__mcmp>
 800571e:	2800      	cmp	r0, #0
 8005720:	9b02      	ldr	r3, [sp, #8]
 8005722:	dc02      	bgt.n	800572a <_dtoa_r+0xaba>
 8005724:	d1e0      	bne.n	80056e8 <_dtoa_r+0xa78>
 8005726:	07da      	lsls	r2, r3, #31
 8005728:	d5de      	bpl.n	80056e8 <_dtoa_r+0xa78>
 800572a:	2b39      	cmp	r3, #57	; 0x39
 800572c:	d1da      	bne.n	80056e4 <_dtoa_r+0xa74>
 800572e:	2339      	movs	r3, #57	; 0x39
 8005730:	f88b 3000 	strb.w	r3, [fp]
 8005734:	463b      	mov	r3, r7
 8005736:	461f      	mov	r7, r3
 8005738:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800573c:	3b01      	subs	r3, #1
 800573e:	2a39      	cmp	r2, #57	; 0x39
 8005740:	d050      	beq.n	80057e4 <_dtoa_r+0xb74>
 8005742:	3201      	adds	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e749      	b.n	80055dc <_dtoa_r+0x96c>
 8005748:	2a00      	cmp	r2, #0
 800574a:	dd03      	ble.n	8005754 <_dtoa_r+0xae4>
 800574c:	2b39      	cmp	r3, #57	; 0x39
 800574e:	d0ee      	beq.n	800572e <_dtoa_r+0xabe>
 8005750:	3301      	adds	r3, #1
 8005752:	e7c9      	b.n	80056e8 <_dtoa_r+0xa78>
 8005754:	9a02      	ldr	r2, [sp, #8]
 8005756:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005758:	f802 3c01 	strb.w	r3, [r2, #-1]
 800575c:	428a      	cmp	r2, r1
 800575e:	d02a      	beq.n	80057b6 <_dtoa_r+0xb46>
 8005760:	4651      	mov	r1, sl
 8005762:	2300      	movs	r3, #0
 8005764:	220a      	movs	r2, #10
 8005766:	4628      	mov	r0, r5
 8005768:	f000 f8fa 	bl	8005960 <__multadd>
 800576c:	45b0      	cmp	r8, r6
 800576e:	4682      	mov	sl, r0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	f04f 020a 	mov.w	r2, #10
 8005778:	4641      	mov	r1, r8
 800577a:	4628      	mov	r0, r5
 800577c:	d107      	bne.n	800578e <_dtoa_r+0xb1e>
 800577e:	f000 f8ef 	bl	8005960 <__multadd>
 8005782:	4680      	mov	r8, r0
 8005784:	4606      	mov	r6, r0
 8005786:	9b02      	ldr	r3, [sp, #8]
 8005788:	3301      	adds	r3, #1
 800578a:	9302      	str	r3, [sp, #8]
 800578c:	e777      	b.n	800567e <_dtoa_r+0xa0e>
 800578e:	f000 f8e7 	bl	8005960 <__multadd>
 8005792:	4631      	mov	r1, r6
 8005794:	4680      	mov	r8, r0
 8005796:	2300      	movs	r3, #0
 8005798:	220a      	movs	r2, #10
 800579a:	4628      	mov	r0, r5
 800579c:	f000 f8e0 	bl	8005960 <__multadd>
 80057a0:	4606      	mov	r6, r0
 80057a2:	e7f0      	b.n	8005786 <_dtoa_r+0xb16>
 80057a4:	f1bb 0f00 	cmp.w	fp, #0
 80057a8:	bfcc      	ite	gt
 80057aa:	465f      	movgt	r7, fp
 80057ac:	2701      	movle	r7, #1
 80057ae:	f04f 0800 	mov.w	r8, #0
 80057b2:	9a08      	ldr	r2, [sp, #32]
 80057b4:	4417      	add	r7, r2
 80057b6:	4651      	mov	r1, sl
 80057b8:	2201      	movs	r2, #1
 80057ba:	4628      	mov	r0, r5
 80057bc:	9302      	str	r3, [sp, #8]
 80057be:	f000 fa7b 	bl	8005cb8 <__lshift>
 80057c2:	4621      	mov	r1, r4
 80057c4:	4682      	mov	sl, r0
 80057c6:	f000 fae3 	bl	8005d90 <__mcmp>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	dcb2      	bgt.n	8005734 <_dtoa_r+0xac4>
 80057ce:	d102      	bne.n	80057d6 <_dtoa_r+0xb66>
 80057d0:	9b02      	ldr	r3, [sp, #8]
 80057d2:	07db      	lsls	r3, r3, #31
 80057d4:	d4ae      	bmi.n	8005734 <_dtoa_r+0xac4>
 80057d6:	463b      	mov	r3, r7
 80057d8:	461f      	mov	r7, r3
 80057da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057de:	2a30      	cmp	r2, #48	; 0x30
 80057e0:	d0fa      	beq.n	80057d8 <_dtoa_r+0xb68>
 80057e2:	e6fb      	b.n	80055dc <_dtoa_r+0x96c>
 80057e4:	9a08      	ldr	r2, [sp, #32]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d1a5      	bne.n	8005736 <_dtoa_r+0xac6>
 80057ea:	2331      	movs	r3, #49	; 0x31
 80057ec:	f109 0901 	add.w	r9, r9, #1
 80057f0:	7013      	strb	r3, [r2, #0]
 80057f2:	e6f3      	b.n	80055dc <_dtoa_r+0x96c>
 80057f4:	4b13      	ldr	r3, [pc, #76]	; (8005844 <_dtoa_r+0xbd4>)
 80057f6:	f7ff baa7 	b.w	8004d48 <_dtoa_r+0xd8>
 80057fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f47f aa80 	bne.w	8004d02 <_dtoa_r+0x92>
 8005802:	4b11      	ldr	r3, [pc, #68]	; (8005848 <_dtoa_r+0xbd8>)
 8005804:	f7ff baa0 	b.w	8004d48 <_dtoa_r+0xd8>
 8005808:	f1bb 0f00 	cmp.w	fp, #0
 800580c:	dc03      	bgt.n	8005816 <_dtoa_r+0xba6>
 800580e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005810:	2b02      	cmp	r3, #2
 8005812:	f73f aecc 	bgt.w	80055ae <_dtoa_r+0x93e>
 8005816:	9f08      	ldr	r7, [sp, #32]
 8005818:	4621      	mov	r1, r4
 800581a:	4650      	mov	r0, sl
 800581c:	f7ff f998 	bl	8004b50 <quorem>
 8005820:	9a08      	ldr	r2, [sp, #32]
 8005822:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005826:	f807 3b01 	strb.w	r3, [r7], #1
 800582a:	1aba      	subs	r2, r7, r2
 800582c:	4593      	cmp	fp, r2
 800582e:	ddb9      	ble.n	80057a4 <_dtoa_r+0xb34>
 8005830:	4651      	mov	r1, sl
 8005832:	2300      	movs	r3, #0
 8005834:	220a      	movs	r2, #10
 8005836:	4628      	mov	r0, r5
 8005838:	f000 f892 	bl	8005960 <__multadd>
 800583c:	4682      	mov	sl, r0
 800583e:	e7eb      	b.n	8005818 <_dtoa_r+0xba8>
 8005840:	0800716b 	.word	0x0800716b
 8005844:	080070c4 	.word	0x080070c4
 8005848:	080070e8 	.word	0x080070e8

0800584c <_localeconv_r>:
 800584c:	4800      	ldr	r0, [pc, #0]	; (8005850 <_localeconv_r+0x4>)
 800584e:	4770      	bx	lr
 8005850:	20000160 	.word	0x20000160

08005854 <malloc>:
 8005854:	4b02      	ldr	r3, [pc, #8]	; (8005860 <malloc+0xc>)
 8005856:	4601      	mov	r1, r0
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f000 bbfb 	b.w	8006054 <_malloc_r>
 800585e:	bf00      	nop
 8005860:	2000000c 	.word	0x2000000c

08005864 <memchr>:
 8005864:	4603      	mov	r3, r0
 8005866:	b510      	push	{r4, lr}
 8005868:	b2c9      	uxtb	r1, r1
 800586a:	4402      	add	r2, r0
 800586c:	4293      	cmp	r3, r2
 800586e:	4618      	mov	r0, r3
 8005870:	d101      	bne.n	8005876 <memchr+0x12>
 8005872:	2000      	movs	r0, #0
 8005874:	e003      	b.n	800587e <memchr+0x1a>
 8005876:	7804      	ldrb	r4, [r0, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	428c      	cmp	r4, r1
 800587c:	d1f6      	bne.n	800586c <memchr+0x8>
 800587e:	bd10      	pop	{r4, pc}

08005880 <memcpy>:
 8005880:	440a      	add	r2, r1
 8005882:	4291      	cmp	r1, r2
 8005884:	f100 33ff 	add.w	r3, r0, #4294967295
 8005888:	d100      	bne.n	800588c <memcpy+0xc>
 800588a:	4770      	bx	lr
 800588c:	b510      	push	{r4, lr}
 800588e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005892:	4291      	cmp	r1, r2
 8005894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005898:	d1f9      	bne.n	800588e <memcpy+0xe>
 800589a:	bd10      	pop	{r4, pc}

0800589c <_Balloc>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058a0:	4604      	mov	r4, r0
 80058a2:	460d      	mov	r5, r1
 80058a4:	b976      	cbnz	r6, 80058c4 <_Balloc+0x28>
 80058a6:	2010      	movs	r0, #16
 80058a8:	f7ff ffd4 	bl	8005854 <malloc>
 80058ac:	4602      	mov	r2, r0
 80058ae:	6260      	str	r0, [r4, #36]	; 0x24
 80058b0:	b920      	cbnz	r0, 80058bc <_Balloc+0x20>
 80058b2:	2166      	movs	r1, #102	; 0x66
 80058b4:	4b17      	ldr	r3, [pc, #92]	; (8005914 <_Balloc+0x78>)
 80058b6:	4818      	ldr	r0, [pc, #96]	; (8005918 <_Balloc+0x7c>)
 80058b8:	f000 fd92 	bl	80063e0 <__assert_func>
 80058bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058c0:	6006      	str	r6, [r0, #0]
 80058c2:	60c6      	str	r6, [r0, #12]
 80058c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058c6:	68f3      	ldr	r3, [r6, #12]
 80058c8:	b183      	cbz	r3, 80058ec <_Balloc+0x50>
 80058ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058d2:	b9b8      	cbnz	r0, 8005904 <_Balloc+0x68>
 80058d4:	2101      	movs	r1, #1
 80058d6:	fa01 f605 	lsl.w	r6, r1, r5
 80058da:	1d72      	adds	r2, r6, #5
 80058dc:	4620      	mov	r0, r4
 80058de:	0092      	lsls	r2, r2, #2
 80058e0:	f000 fb5e 	bl	8005fa0 <_calloc_r>
 80058e4:	b160      	cbz	r0, 8005900 <_Balloc+0x64>
 80058e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058ea:	e00e      	b.n	800590a <_Balloc+0x6e>
 80058ec:	2221      	movs	r2, #33	; 0x21
 80058ee:	2104      	movs	r1, #4
 80058f0:	4620      	mov	r0, r4
 80058f2:	f000 fb55 	bl	8005fa0 <_calloc_r>
 80058f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058f8:	60f0      	str	r0, [r6, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e4      	bne.n	80058ca <_Balloc+0x2e>
 8005900:	2000      	movs	r0, #0
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	6802      	ldr	r2, [r0, #0]
 8005906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800590a:	2300      	movs	r3, #0
 800590c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005910:	e7f7      	b.n	8005902 <_Balloc+0x66>
 8005912:	bf00      	nop
 8005914:	080070f5 	.word	0x080070f5
 8005918:	0800717c 	.word	0x0800717c

0800591c <_Bfree>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005920:	4605      	mov	r5, r0
 8005922:	460c      	mov	r4, r1
 8005924:	b976      	cbnz	r6, 8005944 <_Bfree+0x28>
 8005926:	2010      	movs	r0, #16
 8005928:	f7ff ff94 	bl	8005854 <malloc>
 800592c:	4602      	mov	r2, r0
 800592e:	6268      	str	r0, [r5, #36]	; 0x24
 8005930:	b920      	cbnz	r0, 800593c <_Bfree+0x20>
 8005932:	218a      	movs	r1, #138	; 0x8a
 8005934:	4b08      	ldr	r3, [pc, #32]	; (8005958 <_Bfree+0x3c>)
 8005936:	4809      	ldr	r0, [pc, #36]	; (800595c <_Bfree+0x40>)
 8005938:	f000 fd52 	bl	80063e0 <__assert_func>
 800593c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005940:	6006      	str	r6, [r0, #0]
 8005942:	60c6      	str	r6, [r0, #12]
 8005944:	b13c      	cbz	r4, 8005956 <_Bfree+0x3a>
 8005946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005948:	6862      	ldr	r2, [r4, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005950:	6021      	str	r1, [r4, #0]
 8005952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	080070f5 	.word	0x080070f5
 800595c:	0800717c 	.word	0x0800717c

08005960 <__multadd>:
 8005960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005964:	4698      	mov	r8, r3
 8005966:	460c      	mov	r4, r1
 8005968:	2300      	movs	r3, #0
 800596a:	690e      	ldr	r6, [r1, #16]
 800596c:	4607      	mov	r7, r0
 800596e:	f101 0014 	add.w	r0, r1, #20
 8005972:	6805      	ldr	r5, [r0, #0]
 8005974:	3301      	adds	r3, #1
 8005976:	b2a9      	uxth	r1, r5
 8005978:	fb02 8101 	mla	r1, r2, r1, r8
 800597c:	0c2d      	lsrs	r5, r5, #16
 800597e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005982:	fb02 c505 	mla	r5, r2, r5, ip
 8005986:	b289      	uxth	r1, r1
 8005988:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800598c:	429e      	cmp	r6, r3
 800598e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005992:	f840 1b04 	str.w	r1, [r0], #4
 8005996:	dcec      	bgt.n	8005972 <__multadd+0x12>
 8005998:	f1b8 0f00 	cmp.w	r8, #0
 800599c:	d022      	beq.n	80059e4 <__multadd+0x84>
 800599e:	68a3      	ldr	r3, [r4, #8]
 80059a0:	42b3      	cmp	r3, r6
 80059a2:	dc19      	bgt.n	80059d8 <__multadd+0x78>
 80059a4:	6861      	ldr	r1, [r4, #4]
 80059a6:	4638      	mov	r0, r7
 80059a8:	3101      	adds	r1, #1
 80059aa:	f7ff ff77 	bl	800589c <_Balloc>
 80059ae:	4605      	mov	r5, r0
 80059b0:	b928      	cbnz	r0, 80059be <__multadd+0x5e>
 80059b2:	4602      	mov	r2, r0
 80059b4:	21b5      	movs	r1, #181	; 0xb5
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <__multadd+0x8c>)
 80059b8:	480d      	ldr	r0, [pc, #52]	; (80059f0 <__multadd+0x90>)
 80059ba:	f000 fd11 	bl	80063e0 <__assert_func>
 80059be:	6922      	ldr	r2, [r4, #16]
 80059c0:	f104 010c 	add.w	r1, r4, #12
 80059c4:	3202      	adds	r2, #2
 80059c6:	0092      	lsls	r2, r2, #2
 80059c8:	300c      	adds	r0, #12
 80059ca:	f7ff ff59 	bl	8005880 <memcpy>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4638      	mov	r0, r7
 80059d2:	f7ff ffa3 	bl	800591c <_Bfree>
 80059d6:	462c      	mov	r4, r5
 80059d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80059dc:	3601      	adds	r6, #1
 80059de:	f8c3 8014 	str.w	r8, [r3, #20]
 80059e2:	6126      	str	r6, [r4, #16]
 80059e4:	4620      	mov	r0, r4
 80059e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ea:	bf00      	nop
 80059ec:	0800716b 	.word	0x0800716b
 80059f0:	0800717c 	.word	0x0800717c

080059f4 <__hi0bits>:
 80059f4:	0c02      	lsrs	r2, r0, #16
 80059f6:	0412      	lsls	r2, r2, #16
 80059f8:	4603      	mov	r3, r0
 80059fa:	b9ca      	cbnz	r2, 8005a30 <__hi0bits+0x3c>
 80059fc:	0403      	lsls	r3, r0, #16
 80059fe:	2010      	movs	r0, #16
 8005a00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a04:	bf04      	itt	eq
 8005a06:	021b      	lsleq	r3, r3, #8
 8005a08:	3008      	addeq	r0, #8
 8005a0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a0e:	bf04      	itt	eq
 8005a10:	011b      	lsleq	r3, r3, #4
 8005a12:	3004      	addeq	r0, #4
 8005a14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a18:	bf04      	itt	eq
 8005a1a:	009b      	lsleq	r3, r3, #2
 8005a1c:	3002      	addeq	r0, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db05      	blt.n	8005a2e <__hi0bits+0x3a>
 8005a22:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005a26:	f100 0001 	add.w	r0, r0, #1
 8005a2a:	bf08      	it	eq
 8005a2c:	2020      	moveq	r0, #32
 8005a2e:	4770      	bx	lr
 8005a30:	2000      	movs	r0, #0
 8005a32:	e7e5      	b.n	8005a00 <__hi0bits+0xc>

08005a34 <__lo0bits>:
 8005a34:	6803      	ldr	r3, [r0, #0]
 8005a36:	4602      	mov	r2, r0
 8005a38:	f013 0007 	ands.w	r0, r3, #7
 8005a3c:	d00b      	beq.n	8005a56 <__lo0bits+0x22>
 8005a3e:	07d9      	lsls	r1, r3, #31
 8005a40:	d422      	bmi.n	8005a88 <__lo0bits+0x54>
 8005a42:	0798      	lsls	r0, r3, #30
 8005a44:	bf49      	itett	mi
 8005a46:	085b      	lsrmi	r3, r3, #1
 8005a48:	089b      	lsrpl	r3, r3, #2
 8005a4a:	2001      	movmi	r0, #1
 8005a4c:	6013      	strmi	r3, [r2, #0]
 8005a4e:	bf5c      	itt	pl
 8005a50:	2002      	movpl	r0, #2
 8005a52:	6013      	strpl	r3, [r2, #0]
 8005a54:	4770      	bx	lr
 8005a56:	b299      	uxth	r1, r3
 8005a58:	b909      	cbnz	r1, 8005a5e <__lo0bits+0x2a>
 8005a5a:	2010      	movs	r0, #16
 8005a5c:	0c1b      	lsrs	r3, r3, #16
 8005a5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a62:	bf04      	itt	eq
 8005a64:	0a1b      	lsreq	r3, r3, #8
 8005a66:	3008      	addeq	r0, #8
 8005a68:	0719      	lsls	r1, r3, #28
 8005a6a:	bf04      	itt	eq
 8005a6c:	091b      	lsreq	r3, r3, #4
 8005a6e:	3004      	addeq	r0, #4
 8005a70:	0799      	lsls	r1, r3, #30
 8005a72:	bf04      	itt	eq
 8005a74:	089b      	lsreq	r3, r3, #2
 8005a76:	3002      	addeq	r0, #2
 8005a78:	07d9      	lsls	r1, r3, #31
 8005a7a:	d403      	bmi.n	8005a84 <__lo0bits+0x50>
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	f100 0001 	add.w	r0, r0, #1
 8005a82:	d003      	beq.n	8005a8c <__lo0bits+0x58>
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4770      	bx	lr
 8005a88:	2000      	movs	r0, #0
 8005a8a:	4770      	bx	lr
 8005a8c:	2020      	movs	r0, #32
 8005a8e:	4770      	bx	lr

08005a90 <__i2b>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	460c      	mov	r4, r1
 8005a94:	2101      	movs	r1, #1
 8005a96:	f7ff ff01 	bl	800589c <_Balloc>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	b928      	cbnz	r0, 8005aaa <__i2b+0x1a>
 8005a9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <__i2b+0x24>)
 8005aa4:	4804      	ldr	r0, [pc, #16]	; (8005ab8 <__i2b+0x28>)
 8005aa6:	f000 fc9b 	bl	80063e0 <__assert_func>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	6144      	str	r4, [r0, #20]
 8005aae:	6103      	str	r3, [r0, #16]
 8005ab0:	bd10      	pop	{r4, pc}
 8005ab2:	bf00      	nop
 8005ab4:	0800716b 	.word	0x0800716b
 8005ab8:	0800717c 	.word	0x0800717c

08005abc <__multiply>:
 8005abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	4614      	mov	r4, r2
 8005ac2:	690a      	ldr	r2, [r1, #16]
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	bfbe      	ittt	lt
 8005acc:	460b      	movlt	r3, r1
 8005ace:	4625      	movlt	r5, r4
 8005ad0:	461c      	movlt	r4, r3
 8005ad2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005ad6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005ada:	68ab      	ldr	r3, [r5, #8]
 8005adc:	6869      	ldr	r1, [r5, #4]
 8005ade:	eb0a 0709 	add.w	r7, sl, r9
 8005ae2:	42bb      	cmp	r3, r7
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	bfb8      	it	lt
 8005ae8:	3101      	addlt	r1, #1
 8005aea:	f7ff fed7 	bl	800589c <_Balloc>
 8005aee:	b930      	cbnz	r0, 8005afe <__multiply+0x42>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f240 115d 	movw	r1, #349	; 0x15d
 8005af6:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <__multiply+0x140>)
 8005af8:	4841      	ldr	r0, [pc, #260]	; (8005c00 <__multiply+0x144>)
 8005afa:	f000 fc71 	bl	80063e0 <__assert_func>
 8005afe:	f100 0614 	add.w	r6, r0, #20
 8005b02:	4633      	mov	r3, r6
 8005b04:	2200      	movs	r2, #0
 8005b06:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005b0a:	4543      	cmp	r3, r8
 8005b0c:	d31e      	bcc.n	8005b4c <__multiply+0x90>
 8005b0e:	f105 0c14 	add.w	ip, r5, #20
 8005b12:	f104 0314 	add.w	r3, r4, #20
 8005b16:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005b1a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005b1e:	9202      	str	r2, [sp, #8]
 8005b20:	ebac 0205 	sub.w	r2, ip, r5
 8005b24:	3a15      	subs	r2, #21
 8005b26:	f022 0203 	bic.w	r2, r2, #3
 8005b2a:	3204      	adds	r2, #4
 8005b2c:	f105 0115 	add.w	r1, r5, #21
 8005b30:	458c      	cmp	ip, r1
 8005b32:	bf38      	it	cc
 8005b34:	2204      	movcc	r2, #4
 8005b36:	9201      	str	r2, [sp, #4]
 8005b38:	9a02      	ldr	r2, [sp, #8]
 8005b3a:	9303      	str	r3, [sp, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d808      	bhi.n	8005b52 <__multiply+0x96>
 8005b40:	2f00      	cmp	r7, #0
 8005b42:	dc55      	bgt.n	8005bf0 <__multiply+0x134>
 8005b44:	6107      	str	r7, [r0, #16]
 8005b46:	b005      	add	sp, #20
 8005b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4c:	f843 2b04 	str.w	r2, [r3], #4
 8005b50:	e7db      	b.n	8005b0a <__multiply+0x4e>
 8005b52:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b56:	f1ba 0f00 	cmp.w	sl, #0
 8005b5a:	d020      	beq.n	8005b9e <__multiply+0xe2>
 8005b5c:	46b1      	mov	r9, r6
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f105 0e14 	add.w	lr, r5, #20
 8005b64:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005b68:	f8d9 b000 	ldr.w	fp, [r9]
 8005b6c:	b2a1      	uxth	r1, r4
 8005b6e:	fa1f fb8b 	uxth.w	fp, fp
 8005b72:	fb0a b101 	mla	r1, sl, r1, fp
 8005b76:	4411      	add	r1, r2
 8005b78:	f8d9 2000 	ldr.w	r2, [r9]
 8005b7c:	0c24      	lsrs	r4, r4, #16
 8005b7e:	0c12      	lsrs	r2, r2, #16
 8005b80:	fb0a 2404 	mla	r4, sl, r4, r2
 8005b84:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005b88:	b289      	uxth	r1, r1
 8005b8a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b8e:	45f4      	cmp	ip, lr
 8005b90:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005b94:	f849 1b04 	str.w	r1, [r9], #4
 8005b98:	d8e4      	bhi.n	8005b64 <__multiply+0xa8>
 8005b9a:	9901      	ldr	r1, [sp, #4]
 8005b9c:	5072      	str	r2, [r6, r1]
 8005b9e:	9a03      	ldr	r2, [sp, #12]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ba6:	f1b9 0f00 	cmp.w	r9, #0
 8005baa:	d01f      	beq.n	8005bec <__multiply+0x130>
 8005bac:	46b6      	mov	lr, r6
 8005bae:	f04f 0a00 	mov.w	sl, #0
 8005bb2:	6834      	ldr	r4, [r6, #0]
 8005bb4:	f105 0114 	add.w	r1, r5, #20
 8005bb8:	880a      	ldrh	r2, [r1, #0]
 8005bba:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005bbe:	b2a4      	uxth	r4, r4
 8005bc0:	fb09 b202 	mla	r2, r9, r2, fp
 8005bc4:	4492      	add	sl, r2
 8005bc6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005bca:	f84e 4b04 	str.w	r4, [lr], #4
 8005bce:	f851 4b04 	ldr.w	r4, [r1], #4
 8005bd2:	f8be 2000 	ldrh.w	r2, [lr]
 8005bd6:	0c24      	lsrs	r4, r4, #16
 8005bd8:	fb09 2404 	mla	r4, r9, r4, r2
 8005bdc:	458c      	cmp	ip, r1
 8005bde:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005be2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005be6:	d8e7      	bhi.n	8005bb8 <__multiply+0xfc>
 8005be8:	9a01      	ldr	r2, [sp, #4]
 8005bea:	50b4      	str	r4, [r6, r2]
 8005bec:	3604      	adds	r6, #4
 8005bee:	e7a3      	b.n	8005b38 <__multiply+0x7c>
 8005bf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1a5      	bne.n	8005b44 <__multiply+0x88>
 8005bf8:	3f01      	subs	r7, #1
 8005bfa:	e7a1      	b.n	8005b40 <__multiply+0x84>
 8005bfc:	0800716b 	.word	0x0800716b
 8005c00:	0800717c 	.word	0x0800717c

08005c04 <__pow5mult>:
 8005c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c08:	4615      	mov	r5, r2
 8005c0a:	f012 0203 	ands.w	r2, r2, #3
 8005c0e:	4606      	mov	r6, r0
 8005c10:	460f      	mov	r7, r1
 8005c12:	d007      	beq.n	8005c24 <__pow5mult+0x20>
 8005c14:	4c25      	ldr	r4, [pc, #148]	; (8005cac <__pow5mult+0xa8>)
 8005c16:	3a01      	subs	r2, #1
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c1e:	f7ff fe9f 	bl	8005960 <__multadd>
 8005c22:	4607      	mov	r7, r0
 8005c24:	10ad      	asrs	r5, r5, #2
 8005c26:	d03d      	beq.n	8005ca4 <__pow5mult+0xa0>
 8005c28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c2a:	b97c      	cbnz	r4, 8005c4c <__pow5mult+0x48>
 8005c2c:	2010      	movs	r0, #16
 8005c2e:	f7ff fe11 	bl	8005854 <malloc>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6270      	str	r0, [r6, #36]	; 0x24
 8005c36:	b928      	cbnz	r0, 8005c44 <__pow5mult+0x40>
 8005c38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c3c:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <__pow5mult+0xac>)
 8005c3e:	481d      	ldr	r0, [pc, #116]	; (8005cb4 <__pow5mult+0xb0>)
 8005c40:	f000 fbce 	bl	80063e0 <__assert_func>
 8005c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c48:	6004      	str	r4, [r0, #0]
 8005c4a:	60c4      	str	r4, [r0, #12]
 8005c4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c54:	b94c      	cbnz	r4, 8005c6a <__pow5mult+0x66>
 8005c56:	f240 2171 	movw	r1, #625	; 0x271
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f7ff ff18 	bl	8005a90 <__i2b>
 8005c60:	2300      	movs	r3, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c68:	6003      	str	r3, [r0, #0]
 8005c6a:	f04f 0900 	mov.w	r9, #0
 8005c6e:	07eb      	lsls	r3, r5, #31
 8005c70:	d50a      	bpl.n	8005c88 <__pow5mult+0x84>
 8005c72:	4639      	mov	r1, r7
 8005c74:	4622      	mov	r2, r4
 8005c76:	4630      	mov	r0, r6
 8005c78:	f7ff ff20 	bl	8005abc <__multiply>
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4639      	mov	r1, r7
 8005c80:	4630      	mov	r0, r6
 8005c82:	f7ff fe4b 	bl	800591c <_Bfree>
 8005c86:	4647      	mov	r7, r8
 8005c88:	106d      	asrs	r5, r5, #1
 8005c8a:	d00b      	beq.n	8005ca4 <__pow5mult+0xa0>
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	b938      	cbnz	r0, 8005ca0 <__pow5mult+0x9c>
 8005c90:	4622      	mov	r2, r4
 8005c92:	4621      	mov	r1, r4
 8005c94:	4630      	mov	r0, r6
 8005c96:	f7ff ff11 	bl	8005abc <__multiply>
 8005c9a:	6020      	str	r0, [r4, #0]
 8005c9c:	f8c0 9000 	str.w	r9, [r0]
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	e7e4      	b.n	8005c6e <__pow5mult+0x6a>
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005caa:	bf00      	nop
 8005cac:	080072d0 	.word	0x080072d0
 8005cb0:	080070f5 	.word	0x080070f5
 8005cb4:	0800717c 	.word	0x0800717c

08005cb8 <__lshift>:
 8005cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	4691      	mov	r9, r2
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	6849      	ldr	r1, [r1, #4]
 8005cc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cca:	68a3      	ldr	r3, [r4, #8]
 8005ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cd0:	f108 0601 	add.w	r6, r8, #1
 8005cd4:	42b3      	cmp	r3, r6
 8005cd6:	db0b      	blt.n	8005cf0 <__lshift+0x38>
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f7ff fddf 	bl	800589c <_Balloc>
 8005cde:	4605      	mov	r5, r0
 8005ce0:	b948      	cbnz	r0, 8005cf6 <__lshift+0x3e>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ce8:	4b27      	ldr	r3, [pc, #156]	; (8005d88 <__lshift+0xd0>)
 8005cea:	4828      	ldr	r0, [pc, #160]	; (8005d8c <__lshift+0xd4>)
 8005cec:	f000 fb78 	bl	80063e0 <__assert_func>
 8005cf0:	3101      	adds	r1, #1
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	e7ee      	b.n	8005cd4 <__lshift+0x1c>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f100 0114 	add.w	r1, r0, #20
 8005cfc:	f100 0210 	add.w	r2, r0, #16
 8005d00:	4618      	mov	r0, r3
 8005d02:	4553      	cmp	r3, sl
 8005d04:	db33      	blt.n	8005d6e <__lshift+0xb6>
 8005d06:	6920      	ldr	r0, [r4, #16]
 8005d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d0c:	f104 0314 	add.w	r3, r4, #20
 8005d10:	f019 091f 	ands.w	r9, r9, #31
 8005d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d1c:	d02b      	beq.n	8005d76 <__lshift+0xbe>
 8005d1e:	468a      	mov	sl, r1
 8005d20:	2200      	movs	r2, #0
 8005d22:	f1c9 0e20 	rsb	lr, r9, #32
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	fa00 f009 	lsl.w	r0, r0, r9
 8005d2c:	4302      	orrs	r2, r0
 8005d2e:	f84a 2b04 	str.w	r2, [sl], #4
 8005d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d36:	459c      	cmp	ip, r3
 8005d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d3c:	d8f3      	bhi.n	8005d26 <__lshift+0x6e>
 8005d3e:	ebac 0304 	sub.w	r3, ip, r4
 8005d42:	3b15      	subs	r3, #21
 8005d44:	f023 0303 	bic.w	r3, r3, #3
 8005d48:	3304      	adds	r3, #4
 8005d4a:	f104 0015 	add.w	r0, r4, #21
 8005d4e:	4584      	cmp	ip, r0
 8005d50:	bf38      	it	cc
 8005d52:	2304      	movcc	r3, #4
 8005d54:	50ca      	str	r2, [r1, r3]
 8005d56:	b10a      	cbz	r2, 8005d5c <__lshift+0xa4>
 8005d58:	f108 0602 	add.w	r6, r8, #2
 8005d5c:	3e01      	subs	r6, #1
 8005d5e:	4638      	mov	r0, r7
 8005d60:	4621      	mov	r1, r4
 8005d62:	612e      	str	r6, [r5, #16]
 8005d64:	f7ff fdda 	bl	800591c <_Bfree>
 8005d68:	4628      	mov	r0, r5
 8005d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d72:	3301      	adds	r3, #1
 8005d74:	e7c5      	b.n	8005d02 <__lshift+0x4a>
 8005d76:	3904      	subs	r1, #4
 8005d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d7c:	459c      	cmp	ip, r3
 8005d7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d82:	d8f9      	bhi.n	8005d78 <__lshift+0xc0>
 8005d84:	e7ea      	b.n	8005d5c <__lshift+0xa4>
 8005d86:	bf00      	nop
 8005d88:	0800716b 	.word	0x0800716b
 8005d8c:	0800717c 	.word	0x0800717c

08005d90 <__mcmp>:
 8005d90:	4603      	mov	r3, r0
 8005d92:	690a      	ldr	r2, [r1, #16]
 8005d94:	6900      	ldr	r0, [r0, #16]
 8005d96:	b530      	push	{r4, r5, lr}
 8005d98:	1a80      	subs	r0, r0, r2
 8005d9a:	d10d      	bne.n	8005db8 <__mcmp+0x28>
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	3114      	adds	r1, #20
 8005da0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005da4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005db0:	4295      	cmp	r5, r2
 8005db2:	d002      	beq.n	8005dba <__mcmp+0x2a>
 8005db4:	d304      	bcc.n	8005dc0 <__mcmp+0x30>
 8005db6:	2001      	movs	r0, #1
 8005db8:	bd30      	pop	{r4, r5, pc}
 8005dba:	42a3      	cmp	r3, r4
 8005dbc:	d3f4      	bcc.n	8005da8 <__mcmp+0x18>
 8005dbe:	e7fb      	b.n	8005db8 <__mcmp+0x28>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	e7f8      	b.n	8005db8 <__mcmp+0x28>
	...

08005dc8 <__mdiff>:
 8005dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	460c      	mov	r4, r1
 8005dce:	4606      	mov	r6, r0
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4692      	mov	sl, r2
 8005dd6:	f7ff ffdb 	bl	8005d90 <__mcmp>
 8005dda:	1e05      	subs	r5, r0, #0
 8005ddc:	d111      	bne.n	8005e02 <__mdiff+0x3a>
 8005dde:	4629      	mov	r1, r5
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7ff fd5b 	bl	800589c <_Balloc>
 8005de6:	4602      	mov	r2, r0
 8005de8:	b928      	cbnz	r0, 8005df6 <__mdiff+0x2e>
 8005dea:	f240 2132 	movw	r1, #562	; 0x232
 8005dee:	4b3c      	ldr	r3, [pc, #240]	; (8005ee0 <__mdiff+0x118>)
 8005df0:	483c      	ldr	r0, [pc, #240]	; (8005ee4 <__mdiff+0x11c>)
 8005df2:	f000 faf5 	bl	80063e0 <__assert_func>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e02:	bfa4      	itt	ge
 8005e04:	4653      	movge	r3, sl
 8005e06:	46a2      	movge	sl, r4
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005e0e:	bfa6      	itte	ge
 8005e10:	461c      	movge	r4, r3
 8005e12:	2500      	movge	r5, #0
 8005e14:	2501      	movlt	r5, #1
 8005e16:	f7ff fd41 	bl	800589c <_Balloc>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	b918      	cbnz	r0, 8005e26 <__mdiff+0x5e>
 8005e1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e22:	4b2f      	ldr	r3, [pc, #188]	; (8005ee0 <__mdiff+0x118>)
 8005e24:	e7e4      	b.n	8005df0 <__mdiff+0x28>
 8005e26:	f100 0814 	add.w	r8, r0, #20
 8005e2a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005e2e:	60c5      	str	r5, [r0, #12]
 8005e30:	f04f 0c00 	mov.w	ip, #0
 8005e34:	f10a 0514 	add.w	r5, sl, #20
 8005e38:	f10a 0010 	add.w	r0, sl, #16
 8005e3c:	46c2      	mov	sl, r8
 8005e3e:	6926      	ldr	r6, [r4, #16]
 8005e40:	f104 0914 	add.w	r9, r4, #20
 8005e44:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005e48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e4c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005e50:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e54:	fa1f f18b 	uxth.w	r1, fp
 8005e58:	4461      	add	r1, ip
 8005e5a:	fa1f fc83 	uxth.w	ip, r3
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	eba1 010c 	sub.w	r1, r1, ip
 8005e64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e68:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e6c:	b289      	uxth	r1, r1
 8005e6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e72:	454e      	cmp	r6, r9
 8005e74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e78:	f84a 3b04 	str.w	r3, [sl], #4
 8005e7c:	d8e6      	bhi.n	8005e4c <__mdiff+0x84>
 8005e7e:	1b33      	subs	r3, r6, r4
 8005e80:	3b15      	subs	r3, #21
 8005e82:	f023 0303 	bic.w	r3, r3, #3
 8005e86:	3415      	adds	r4, #21
 8005e88:	3304      	adds	r3, #4
 8005e8a:	42a6      	cmp	r6, r4
 8005e8c:	bf38      	it	cc
 8005e8e:	2304      	movcc	r3, #4
 8005e90:	441d      	add	r5, r3
 8005e92:	4443      	add	r3, r8
 8005e94:	461e      	mov	r6, r3
 8005e96:	462c      	mov	r4, r5
 8005e98:	4574      	cmp	r4, lr
 8005e9a:	d30e      	bcc.n	8005eba <__mdiff+0xf2>
 8005e9c:	f10e 0103 	add.w	r1, lr, #3
 8005ea0:	1b49      	subs	r1, r1, r5
 8005ea2:	f021 0103 	bic.w	r1, r1, #3
 8005ea6:	3d03      	subs	r5, #3
 8005ea8:	45ae      	cmp	lr, r5
 8005eaa:	bf38      	it	cc
 8005eac:	2100      	movcc	r1, #0
 8005eae:	4419      	add	r1, r3
 8005eb0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005eb4:	b18b      	cbz	r3, 8005eda <__mdiff+0x112>
 8005eb6:	6117      	str	r7, [r2, #16]
 8005eb8:	e7a0      	b.n	8005dfc <__mdiff+0x34>
 8005eba:	f854 8b04 	ldr.w	r8, [r4], #4
 8005ebe:	fa1f f188 	uxth.w	r1, r8
 8005ec2:	4461      	add	r1, ip
 8005ec4:	1408      	asrs	r0, r1, #16
 8005ec6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005eca:	b289      	uxth	r1, r1
 8005ecc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005ed0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ed4:	f846 1b04 	str.w	r1, [r6], #4
 8005ed8:	e7de      	b.n	8005e98 <__mdiff+0xd0>
 8005eda:	3f01      	subs	r7, #1
 8005edc:	e7e8      	b.n	8005eb0 <__mdiff+0xe8>
 8005ede:	bf00      	nop
 8005ee0:	0800716b 	.word	0x0800716b
 8005ee4:	0800717c 	.word	0x0800717c

08005ee8 <__d2b>:
 8005ee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005eec:	2101      	movs	r1, #1
 8005eee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005ef2:	4690      	mov	r8, r2
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	f7ff fcd1 	bl	800589c <_Balloc>
 8005efa:	4604      	mov	r4, r0
 8005efc:	b930      	cbnz	r0, 8005f0c <__d2b+0x24>
 8005efe:	4602      	mov	r2, r0
 8005f00:	f240 310a 	movw	r1, #778	; 0x30a
 8005f04:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <__d2b+0xb0>)
 8005f06:	4825      	ldr	r0, [pc, #148]	; (8005f9c <__d2b+0xb4>)
 8005f08:	f000 fa6a 	bl	80063e0 <__assert_func>
 8005f0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005f10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005f14:	bb2d      	cbnz	r5, 8005f62 <__d2b+0x7a>
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	f1b8 0300 	subs.w	r3, r8, #0
 8005f1c:	d026      	beq.n	8005f6c <__d2b+0x84>
 8005f1e:	4668      	mov	r0, sp
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	f7ff fd87 	bl	8005a34 <__lo0bits>
 8005f26:	9900      	ldr	r1, [sp, #0]
 8005f28:	b1f0      	cbz	r0, 8005f68 <__d2b+0x80>
 8005f2a:	9a01      	ldr	r2, [sp, #4]
 8005f2c:	f1c0 0320 	rsb	r3, r0, #32
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	430b      	orrs	r3, r1
 8005f36:	40c2      	lsrs	r2, r0
 8005f38:	6163      	str	r3, [r4, #20]
 8005f3a:	9201      	str	r2, [sp, #4]
 8005f3c:	9b01      	ldr	r3, [sp, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bf14      	ite	ne
 8005f42:	2102      	movne	r1, #2
 8005f44:	2101      	moveq	r1, #1
 8005f46:	61a3      	str	r3, [r4, #24]
 8005f48:	6121      	str	r1, [r4, #16]
 8005f4a:	b1c5      	cbz	r5, 8005f7e <__d2b+0x96>
 8005f4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f50:	4405      	add	r5, r0
 8005f52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f56:	603d      	str	r5, [r7, #0]
 8005f58:	6030      	str	r0, [r6, #0]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	b002      	add	sp, #8
 8005f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f66:	e7d6      	b.n	8005f16 <__d2b+0x2e>
 8005f68:	6161      	str	r1, [r4, #20]
 8005f6a:	e7e7      	b.n	8005f3c <__d2b+0x54>
 8005f6c:	a801      	add	r0, sp, #4
 8005f6e:	f7ff fd61 	bl	8005a34 <__lo0bits>
 8005f72:	2101      	movs	r1, #1
 8005f74:	9b01      	ldr	r3, [sp, #4]
 8005f76:	6121      	str	r1, [r4, #16]
 8005f78:	6163      	str	r3, [r4, #20]
 8005f7a:	3020      	adds	r0, #32
 8005f7c:	e7e5      	b.n	8005f4a <__d2b+0x62>
 8005f7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005f82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f86:	6038      	str	r0, [r7, #0]
 8005f88:	6918      	ldr	r0, [r3, #16]
 8005f8a:	f7ff fd33 	bl	80059f4 <__hi0bits>
 8005f8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005f92:	6031      	str	r1, [r6, #0]
 8005f94:	e7e1      	b.n	8005f5a <__d2b+0x72>
 8005f96:	bf00      	nop
 8005f98:	0800716b 	.word	0x0800716b
 8005f9c:	0800717c 	.word	0x0800717c

08005fa0 <_calloc_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	fb02 f501 	mul.w	r5, r2, r1
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	f000 f854 	bl	8006054 <_malloc_r>
 8005fac:	4604      	mov	r4, r0
 8005fae:	b118      	cbz	r0, 8005fb8 <_calloc_r+0x18>
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f7fe f944 	bl	8004240 <memset>
 8005fb8:	4620      	mov	r0, r4
 8005fba:	bd38      	pop	{r3, r4, r5, pc}

08005fbc <_free_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	d043      	beq.n	800604c <_free_r+0x90>
 8005fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc8:	1f0c      	subs	r4, r1, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bfb8      	it	lt
 8005fce:	18e4      	addlt	r4, r4, r3
 8005fd0:	f000 fa62 	bl	8006498 <__malloc_lock>
 8005fd4:	4a1e      	ldr	r2, [pc, #120]	; (8006050 <_free_r+0x94>)
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	4610      	mov	r0, r2
 8005fda:	b933      	cbnz	r3, 8005fea <_free_r+0x2e>
 8005fdc:	6063      	str	r3, [r4, #4]
 8005fde:	6014      	str	r4, [r2, #0]
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe6:	f000 ba5d 	b.w	80064a4 <__malloc_unlock>
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	d90a      	bls.n	8006004 <_free_r+0x48>
 8005fee:	6821      	ldr	r1, [r4, #0]
 8005ff0:	1862      	adds	r2, r4, r1
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	bf01      	itttt	eq
 8005ff6:	681a      	ldreq	r2, [r3, #0]
 8005ff8:	685b      	ldreq	r3, [r3, #4]
 8005ffa:	1852      	addeq	r2, r2, r1
 8005ffc:	6022      	streq	r2, [r4, #0]
 8005ffe:	6063      	str	r3, [r4, #4]
 8006000:	6004      	str	r4, [r0, #0]
 8006002:	e7ed      	b.n	8005fe0 <_free_r+0x24>
 8006004:	461a      	mov	r2, r3
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	b10b      	cbz	r3, 800600e <_free_r+0x52>
 800600a:	42a3      	cmp	r3, r4
 800600c:	d9fa      	bls.n	8006004 <_free_r+0x48>
 800600e:	6811      	ldr	r1, [r2, #0]
 8006010:	1850      	adds	r0, r2, r1
 8006012:	42a0      	cmp	r0, r4
 8006014:	d10b      	bne.n	800602e <_free_r+0x72>
 8006016:	6820      	ldr	r0, [r4, #0]
 8006018:	4401      	add	r1, r0
 800601a:	1850      	adds	r0, r2, r1
 800601c:	4283      	cmp	r3, r0
 800601e:	6011      	str	r1, [r2, #0]
 8006020:	d1de      	bne.n	8005fe0 <_free_r+0x24>
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4401      	add	r1, r0
 8006028:	6011      	str	r1, [r2, #0]
 800602a:	6053      	str	r3, [r2, #4]
 800602c:	e7d8      	b.n	8005fe0 <_free_r+0x24>
 800602e:	d902      	bls.n	8006036 <_free_r+0x7a>
 8006030:	230c      	movs	r3, #12
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	e7d4      	b.n	8005fe0 <_free_r+0x24>
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	1821      	adds	r1, r4, r0
 800603a:	428b      	cmp	r3, r1
 800603c:	bf01      	itttt	eq
 800603e:	6819      	ldreq	r1, [r3, #0]
 8006040:	685b      	ldreq	r3, [r3, #4]
 8006042:	1809      	addeq	r1, r1, r0
 8006044:	6021      	streq	r1, [r4, #0]
 8006046:	6063      	str	r3, [r4, #4]
 8006048:	6054      	str	r4, [r2, #4]
 800604a:	e7c9      	b.n	8005fe0 <_free_r+0x24>
 800604c:	bd38      	pop	{r3, r4, r5, pc}
 800604e:	bf00      	nop
 8006050:	20000214 	.word	0x20000214

08006054 <_malloc_r>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	1ccd      	adds	r5, r1, #3
 8006058:	f025 0503 	bic.w	r5, r5, #3
 800605c:	3508      	adds	r5, #8
 800605e:	2d0c      	cmp	r5, #12
 8006060:	bf38      	it	cc
 8006062:	250c      	movcc	r5, #12
 8006064:	2d00      	cmp	r5, #0
 8006066:	4606      	mov	r6, r0
 8006068:	db01      	blt.n	800606e <_malloc_r+0x1a>
 800606a:	42a9      	cmp	r1, r5
 800606c:	d903      	bls.n	8006076 <_malloc_r+0x22>
 800606e:	230c      	movs	r3, #12
 8006070:	6033      	str	r3, [r6, #0]
 8006072:	2000      	movs	r0, #0
 8006074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006076:	f000 fa0f 	bl	8006498 <__malloc_lock>
 800607a:	4921      	ldr	r1, [pc, #132]	; (8006100 <_malloc_r+0xac>)
 800607c:	680a      	ldr	r2, [r1, #0]
 800607e:	4614      	mov	r4, r2
 8006080:	b99c      	cbnz	r4, 80060aa <_malloc_r+0x56>
 8006082:	4f20      	ldr	r7, [pc, #128]	; (8006104 <_malloc_r+0xb0>)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	b923      	cbnz	r3, 8006092 <_malloc_r+0x3e>
 8006088:	4621      	mov	r1, r4
 800608a:	4630      	mov	r0, r6
 800608c:	f000 f998 	bl	80063c0 <_sbrk_r>
 8006090:	6038      	str	r0, [r7, #0]
 8006092:	4629      	mov	r1, r5
 8006094:	4630      	mov	r0, r6
 8006096:	f000 f993 	bl	80063c0 <_sbrk_r>
 800609a:	1c43      	adds	r3, r0, #1
 800609c:	d123      	bne.n	80060e6 <_malloc_r+0x92>
 800609e:	230c      	movs	r3, #12
 80060a0:	4630      	mov	r0, r6
 80060a2:	6033      	str	r3, [r6, #0]
 80060a4:	f000 f9fe 	bl	80064a4 <__malloc_unlock>
 80060a8:	e7e3      	b.n	8006072 <_malloc_r+0x1e>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	1b5b      	subs	r3, r3, r5
 80060ae:	d417      	bmi.n	80060e0 <_malloc_r+0x8c>
 80060b0:	2b0b      	cmp	r3, #11
 80060b2:	d903      	bls.n	80060bc <_malloc_r+0x68>
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	441c      	add	r4, r3
 80060b8:	6025      	str	r5, [r4, #0]
 80060ba:	e004      	b.n	80060c6 <_malloc_r+0x72>
 80060bc:	6863      	ldr	r3, [r4, #4]
 80060be:	42a2      	cmp	r2, r4
 80060c0:	bf0c      	ite	eq
 80060c2:	600b      	streq	r3, [r1, #0]
 80060c4:	6053      	strne	r3, [r2, #4]
 80060c6:	4630      	mov	r0, r6
 80060c8:	f000 f9ec 	bl	80064a4 <__malloc_unlock>
 80060cc:	f104 000b 	add.w	r0, r4, #11
 80060d0:	1d23      	adds	r3, r4, #4
 80060d2:	f020 0007 	bic.w	r0, r0, #7
 80060d6:	1ac2      	subs	r2, r0, r3
 80060d8:	d0cc      	beq.n	8006074 <_malloc_r+0x20>
 80060da:	1a1b      	subs	r3, r3, r0
 80060dc:	50a3      	str	r3, [r4, r2]
 80060de:	e7c9      	b.n	8006074 <_malloc_r+0x20>
 80060e0:	4622      	mov	r2, r4
 80060e2:	6864      	ldr	r4, [r4, #4]
 80060e4:	e7cc      	b.n	8006080 <_malloc_r+0x2c>
 80060e6:	1cc4      	adds	r4, r0, #3
 80060e8:	f024 0403 	bic.w	r4, r4, #3
 80060ec:	42a0      	cmp	r0, r4
 80060ee:	d0e3      	beq.n	80060b8 <_malloc_r+0x64>
 80060f0:	1a21      	subs	r1, r4, r0
 80060f2:	4630      	mov	r0, r6
 80060f4:	f000 f964 	bl	80063c0 <_sbrk_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	d1dd      	bne.n	80060b8 <_malloc_r+0x64>
 80060fc:	e7cf      	b.n	800609e <_malloc_r+0x4a>
 80060fe:	bf00      	nop
 8006100:	20000214 	.word	0x20000214
 8006104:	20000218 	.word	0x20000218

08006108 <__ssputs_r>:
 8006108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	688e      	ldr	r6, [r1, #8]
 800610e:	4682      	mov	sl, r0
 8006110:	429e      	cmp	r6, r3
 8006112:	460c      	mov	r4, r1
 8006114:	4690      	mov	r8, r2
 8006116:	461f      	mov	r7, r3
 8006118:	d838      	bhi.n	800618c <__ssputs_r+0x84>
 800611a:	898a      	ldrh	r2, [r1, #12]
 800611c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006120:	d032      	beq.n	8006188 <__ssputs_r+0x80>
 8006122:	6825      	ldr	r5, [r4, #0]
 8006124:	6909      	ldr	r1, [r1, #16]
 8006126:	3301      	adds	r3, #1
 8006128:	eba5 0901 	sub.w	r9, r5, r1
 800612c:	6965      	ldr	r5, [r4, #20]
 800612e:	444b      	add	r3, r9
 8006130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006138:	106d      	asrs	r5, r5, #1
 800613a:	429d      	cmp	r5, r3
 800613c:	bf38      	it	cc
 800613e:	461d      	movcc	r5, r3
 8006140:	0553      	lsls	r3, r2, #21
 8006142:	d531      	bpl.n	80061a8 <__ssputs_r+0xa0>
 8006144:	4629      	mov	r1, r5
 8006146:	f7ff ff85 	bl	8006054 <_malloc_r>
 800614a:	4606      	mov	r6, r0
 800614c:	b950      	cbnz	r0, 8006164 <__ssputs_r+0x5c>
 800614e:	230c      	movs	r3, #12
 8006150:	f04f 30ff 	mov.w	r0, #4294967295
 8006154:	f8ca 3000 	str.w	r3, [sl]
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006164:	464a      	mov	r2, r9
 8006166:	6921      	ldr	r1, [r4, #16]
 8006168:	f7ff fb8a 	bl	8005880 <memcpy>
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006176:	81a3      	strh	r3, [r4, #12]
 8006178:	6126      	str	r6, [r4, #16]
 800617a:	444e      	add	r6, r9
 800617c:	6026      	str	r6, [r4, #0]
 800617e:	463e      	mov	r6, r7
 8006180:	6165      	str	r5, [r4, #20]
 8006182:	eba5 0509 	sub.w	r5, r5, r9
 8006186:	60a5      	str	r5, [r4, #8]
 8006188:	42be      	cmp	r6, r7
 800618a:	d900      	bls.n	800618e <__ssputs_r+0x86>
 800618c:	463e      	mov	r6, r7
 800618e:	4632      	mov	r2, r6
 8006190:	4641      	mov	r1, r8
 8006192:	6820      	ldr	r0, [r4, #0]
 8006194:	f000 f966 	bl	8006464 <memmove>
 8006198:	68a3      	ldr	r3, [r4, #8]
 800619a:	6822      	ldr	r2, [r4, #0]
 800619c:	1b9b      	subs	r3, r3, r6
 800619e:	4432      	add	r2, r6
 80061a0:	2000      	movs	r0, #0
 80061a2:	60a3      	str	r3, [r4, #8]
 80061a4:	6022      	str	r2, [r4, #0]
 80061a6:	e7db      	b.n	8006160 <__ssputs_r+0x58>
 80061a8:	462a      	mov	r2, r5
 80061aa:	f000 f981 	bl	80064b0 <_realloc_r>
 80061ae:	4606      	mov	r6, r0
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d1e1      	bne.n	8006178 <__ssputs_r+0x70>
 80061b4:	4650      	mov	r0, sl
 80061b6:	6921      	ldr	r1, [r4, #16]
 80061b8:	f7ff ff00 	bl	8005fbc <_free_r>
 80061bc:	e7c7      	b.n	800614e <__ssputs_r+0x46>
	...

080061c0 <_svfiprintf_r>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	4698      	mov	r8, r3
 80061c6:	898b      	ldrh	r3, [r1, #12]
 80061c8:	4607      	mov	r7, r0
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	460d      	mov	r5, r1
 80061ce:	4614      	mov	r4, r2
 80061d0:	b09d      	sub	sp, #116	; 0x74
 80061d2:	d50e      	bpl.n	80061f2 <_svfiprintf_r+0x32>
 80061d4:	690b      	ldr	r3, [r1, #16]
 80061d6:	b963      	cbnz	r3, 80061f2 <_svfiprintf_r+0x32>
 80061d8:	2140      	movs	r1, #64	; 0x40
 80061da:	f7ff ff3b 	bl	8006054 <_malloc_r>
 80061de:	6028      	str	r0, [r5, #0]
 80061e0:	6128      	str	r0, [r5, #16]
 80061e2:	b920      	cbnz	r0, 80061ee <_svfiprintf_r+0x2e>
 80061e4:	230c      	movs	r3, #12
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	e0d1      	b.n	8006392 <_svfiprintf_r+0x1d2>
 80061ee:	2340      	movs	r3, #64	; 0x40
 80061f0:	616b      	str	r3, [r5, #20]
 80061f2:	2300      	movs	r3, #0
 80061f4:	9309      	str	r3, [sp, #36]	; 0x24
 80061f6:	2320      	movs	r3, #32
 80061f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061fc:	2330      	movs	r3, #48	; 0x30
 80061fe:	f04f 0901 	mov.w	r9, #1
 8006202:	f8cd 800c 	str.w	r8, [sp, #12]
 8006206:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80063ac <_svfiprintf_r+0x1ec>
 800620a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800620e:	4623      	mov	r3, r4
 8006210:	469a      	mov	sl, r3
 8006212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006216:	b10a      	cbz	r2, 800621c <_svfiprintf_r+0x5c>
 8006218:	2a25      	cmp	r2, #37	; 0x25
 800621a:	d1f9      	bne.n	8006210 <_svfiprintf_r+0x50>
 800621c:	ebba 0b04 	subs.w	fp, sl, r4
 8006220:	d00b      	beq.n	800623a <_svfiprintf_r+0x7a>
 8006222:	465b      	mov	r3, fp
 8006224:	4622      	mov	r2, r4
 8006226:	4629      	mov	r1, r5
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff ff6d 	bl	8006108 <__ssputs_r>
 800622e:	3001      	adds	r0, #1
 8006230:	f000 80aa 	beq.w	8006388 <_svfiprintf_r+0x1c8>
 8006234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006236:	445a      	add	r2, fp
 8006238:	9209      	str	r2, [sp, #36]	; 0x24
 800623a:	f89a 3000 	ldrb.w	r3, [sl]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80a2 	beq.w	8006388 <_svfiprintf_r+0x1c8>
 8006244:	2300      	movs	r3, #0
 8006246:	f04f 32ff 	mov.w	r2, #4294967295
 800624a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800624e:	f10a 0a01 	add.w	sl, sl, #1
 8006252:	9304      	str	r3, [sp, #16]
 8006254:	9307      	str	r3, [sp, #28]
 8006256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800625a:	931a      	str	r3, [sp, #104]	; 0x68
 800625c:	4654      	mov	r4, sl
 800625e:	2205      	movs	r2, #5
 8006260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006264:	4851      	ldr	r0, [pc, #324]	; (80063ac <_svfiprintf_r+0x1ec>)
 8006266:	f7ff fafd 	bl	8005864 <memchr>
 800626a:	9a04      	ldr	r2, [sp, #16]
 800626c:	b9d8      	cbnz	r0, 80062a6 <_svfiprintf_r+0xe6>
 800626e:	06d0      	lsls	r0, r2, #27
 8006270:	bf44      	itt	mi
 8006272:	2320      	movmi	r3, #32
 8006274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006278:	0711      	lsls	r1, r2, #28
 800627a:	bf44      	itt	mi
 800627c:	232b      	movmi	r3, #43	; 0x2b
 800627e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006282:	f89a 3000 	ldrb.w	r3, [sl]
 8006286:	2b2a      	cmp	r3, #42	; 0x2a
 8006288:	d015      	beq.n	80062b6 <_svfiprintf_r+0xf6>
 800628a:	4654      	mov	r4, sl
 800628c:	2000      	movs	r0, #0
 800628e:	f04f 0c0a 	mov.w	ip, #10
 8006292:	9a07      	ldr	r2, [sp, #28]
 8006294:	4621      	mov	r1, r4
 8006296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800629a:	3b30      	subs	r3, #48	; 0x30
 800629c:	2b09      	cmp	r3, #9
 800629e:	d94e      	bls.n	800633e <_svfiprintf_r+0x17e>
 80062a0:	b1b0      	cbz	r0, 80062d0 <_svfiprintf_r+0x110>
 80062a2:	9207      	str	r2, [sp, #28]
 80062a4:	e014      	b.n	80062d0 <_svfiprintf_r+0x110>
 80062a6:	eba0 0308 	sub.w	r3, r0, r8
 80062aa:	fa09 f303 	lsl.w	r3, r9, r3
 80062ae:	4313      	orrs	r3, r2
 80062b0:	46a2      	mov	sl, r4
 80062b2:	9304      	str	r3, [sp, #16]
 80062b4:	e7d2      	b.n	800625c <_svfiprintf_r+0x9c>
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	1d19      	adds	r1, r3, #4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	9103      	str	r1, [sp, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bfbb      	ittet	lt
 80062c2:	425b      	neglt	r3, r3
 80062c4:	f042 0202 	orrlt.w	r2, r2, #2
 80062c8:	9307      	strge	r3, [sp, #28]
 80062ca:	9307      	strlt	r3, [sp, #28]
 80062cc:	bfb8      	it	lt
 80062ce:	9204      	strlt	r2, [sp, #16]
 80062d0:	7823      	ldrb	r3, [r4, #0]
 80062d2:	2b2e      	cmp	r3, #46	; 0x2e
 80062d4:	d10c      	bne.n	80062f0 <_svfiprintf_r+0x130>
 80062d6:	7863      	ldrb	r3, [r4, #1]
 80062d8:	2b2a      	cmp	r3, #42	; 0x2a
 80062da:	d135      	bne.n	8006348 <_svfiprintf_r+0x188>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	3402      	adds	r4, #2
 80062e0:	1d1a      	adds	r2, r3, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	9203      	str	r2, [sp, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bfb8      	it	lt
 80062ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80062ee:	9305      	str	r3, [sp, #20]
 80062f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063bc <_svfiprintf_r+0x1fc>
 80062f4:	2203      	movs	r2, #3
 80062f6:	4650      	mov	r0, sl
 80062f8:	7821      	ldrb	r1, [r4, #0]
 80062fa:	f7ff fab3 	bl	8005864 <memchr>
 80062fe:	b140      	cbz	r0, 8006312 <_svfiprintf_r+0x152>
 8006300:	2340      	movs	r3, #64	; 0x40
 8006302:	eba0 000a 	sub.w	r0, r0, sl
 8006306:	fa03 f000 	lsl.w	r0, r3, r0
 800630a:	9b04      	ldr	r3, [sp, #16]
 800630c:	3401      	adds	r4, #1
 800630e:	4303      	orrs	r3, r0
 8006310:	9304      	str	r3, [sp, #16]
 8006312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006316:	2206      	movs	r2, #6
 8006318:	4825      	ldr	r0, [pc, #148]	; (80063b0 <_svfiprintf_r+0x1f0>)
 800631a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800631e:	f7ff faa1 	bl	8005864 <memchr>
 8006322:	2800      	cmp	r0, #0
 8006324:	d038      	beq.n	8006398 <_svfiprintf_r+0x1d8>
 8006326:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <_svfiprintf_r+0x1f4>)
 8006328:	bb1b      	cbnz	r3, 8006372 <_svfiprintf_r+0x1b2>
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	3307      	adds	r3, #7
 800632e:	f023 0307 	bic.w	r3, r3, #7
 8006332:	3308      	adds	r3, #8
 8006334:	9303      	str	r3, [sp, #12]
 8006336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006338:	4433      	add	r3, r6
 800633a:	9309      	str	r3, [sp, #36]	; 0x24
 800633c:	e767      	b.n	800620e <_svfiprintf_r+0x4e>
 800633e:	460c      	mov	r4, r1
 8006340:	2001      	movs	r0, #1
 8006342:	fb0c 3202 	mla	r2, ip, r2, r3
 8006346:	e7a5      	b.n	8006294 <_svfiprintf_r+0xd4>
 8006348:	2300      	movs	r3, #0
 800634a:	f04f 0c0a 	mov.w	ip, #10
 800634e:	4619      	mov	r1, r3
 8006350:	3401      	adds	r4, #1
 8006352:	9305      	str	r3, [sp, #20]
 8006354:	4620      	mov	r0, r4
 8006356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800635a:	3a30      	subs	r2, #48	; 0x30
 800635c:	2a09      	cmp	r2, #9
 800635e:	d903      	bls.n	8006368 <_svfiprintf_r+0x1a8>
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0c5      	beq.n	80062f0 <_svfiprintf_r+0x130>
 8006364:	9105      	str	r1, [sp, #20]
 8006366:	e7c3      	b.n	80062f0 <_svfiprintf_r+0x130>
 8006368:	4604      	mov	r4, r0
 800636a:	2301      	movs	r3, #1
 800636c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006370:	e7f0      	b.n	8006354 <_svfiprintf_r+0x194>
 8006372:	ab03      	add	r3, sp, #12
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	462a      	mov	r2, r5
 8006378:	4638      	mov	r0, r7
 800637a:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <_svfiprintf_r+0x1f8>)
 800637c:	a904      	add	r1, sp, #16
 800637e:	f7fe f805 	bl	800438c <_printf_float>
 8006382:	1c42      	adds	r2, r0, #1
 8006384:	4606      	mov	r6, r0
 8006386:	d1d6      	bne.n	8006336 <_svfiprintf_r+0x176>
 8006388:	89ab      	ldrh	r3, [r5, #12]
 800638a:	065b      	lsls	r3, r3, #25
 800638c:	f53f af2c 	bmi.w	80061e8 <_svfiprintf_r+0x28>
 8006390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006392:	b01d      	add	sp, #116	; 0x74
 8006394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006398:	ab03      	add	r3, sp, #12
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	462a      	mov	r2, r5
 800639e:	4638      	mov	r0, r7
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <_svfiprintf_r+0x1f8>)
 80063a2:	a904      	add	r1, sp, #16
 80063a4:	f7fe fa8e 	bl	80048c4 <_printf_i>
 80063a8:	e7eb      	b.n	8006382 <_svfiprintf_r+0x1c2>
 80063aa:	bf00      	nop
 80063ac:	080072dc 	.word	0x080072dc
 80063b0:	080072e6 	.word	0x080072e6
 80063b4:	0800438d 	.word	0x0800438d
 80063b8:	08006109 	.word	0x08006109
 80063bc:	080072e2 	.word	0x080072e2

080063c0 <_sbrk_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	2300      	movs	r3, #0
 80063c4:	4d05      	ldr	r5, [pc, #20]	; (80063dc <_sbrk_r+0x1c>)
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	f7fb fbb2 	bl	8001b34 <_sbrk>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_sbrk_r+0x1a>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_sbrk_r+0x1a>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	20000af4 	.word	0x20000af4

080063e0 <__assert_func>:
 80063e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063e2:	4614      	mov	r4, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	4b09      	ldr	r3, [pc, #36]	; (800640c <__assert_func+0x2c>)
 80063e8:	4605      	mov	r5, r0
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68d8      	ldr	r0, [r3, #12]
 80063ee:	b14c      	cbz	r4, 8006404 <__assert_func+0x24>
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <__assert_func+0x30>)
 80063f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063f6:	9100      	str	r1, [sp, #0]
 80063f8:	462b      	mov	r3, r5
 80063fa:	4906      	ldr	r1, [pc, #24]	; (8006414 <__assert_func+0x34>)
 80063fc:	f000 f80e 	bl	800641c <fiprintf>
 8006400:	f000 faa2 	bl	8006948 <abort>
 8006404:	4b04      	ldr	r3, [pc, #16]	; (8006418 <__assert_func+0x38>)
 8006406:	461c      	mov	r4, r3
 8006408:	e7f3      	b.n	80063f2 <__assert_func+0x12>
 800640a:	bf00      	nop
 800640c:	2000000c 	.word	0x2000000c
 8006410:	080072ed 	.word	0x080072ed
 8006414:	080072fa 	.word	0x080072fa
 8006418:	08007328 	.word	0x08007328

0800641c <fiprintf>:
 800641c:	b40e      	push	{r1, r2, r3}
 800641e:	b503      	push	{r0, r1, lr}
 8006420:	4601      	mov	r1, r0
 8006422:	ab03      	add	r3, sp, #12
 8006424:	4805      	ldr	r0, [pc, #20]	; (800643c <fiprintf+0x20>)
 8006426:	f853 2b04 	ldr.w	r2, [r3], #4
 800642a:	6800      	ldr	r0, [r0, #0]
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	f000 f88d 	bl	800654c <_vfiprintf_r>
 8006432:	b002      	add	sp, #8
 8006434:	f85d eb04 	ldr.w	lr, [sp], #4
 8006438:	b003      	add	sp, #12
 800643a:	4770      	bx	lr
 800643c:	2000000c 	.word	0x2000000c

08006440 <__ascii_mbtowc>:
 8006440:	b082      	sub	sp, #8
 8006442:	b901      	cbnz	r1, 8006446 <__ascii_mbtowc+0x6>
 8006444:	a901      	add	r1, sp, #4
 8006446:	b142      	cbz	r2, 800645a <__ascii_mbtowc+0x1a>
 8006448:	b14b      	cbz	r3, 800645e <__ascii_mbtowc+0x1e>
 800644a:	7813      	ldrb	r3, [r2, #0]
 800644c:	600b      	str	r3, [r1, #0]
 800644e:	7812      	ldrb	r2, [r2, #0]
 8006450:	1e10      	subs	r0, r2, #0
 8006452:	bf18      	it	ne
 8006454:	2001      	movne	r0, #1
 8006456:	b002      	add	sp, #8
 8006458:	4770      	bx	lr
 800645a:	4610      	mov	r0, r2
 800645c:	e7fb      	b.n	8006456 <__ascii_mbtowc+0x16>
 800645e:	f06f 0001 	mvn.w	r0, #1
 8006462:	e7f8      	b.n	8006456 <__ascii_mbtowc+0x16>

08006464 <memmove>:
 8006464:	4288      	cmp	r0, r1
 8006466:	b510      	push	{r4, lr}
 8006468:	eb01 0402 	add.w	r4, r1, r2
 800646c:	d902      	bls.n	8006474 <memmove+0x10>
 800646e:	4284      	cmp	r4, r0
 8006470:	4623      	mov	r3, r4
 8006472:	d807      	bhi.n	8006484 <memmove+0x20>
 8006474:	1e43      	subs	r3, r0, #1
 8006476:	42a1      	cmp	r1, r4
 8006478:	d008      	beq.n	800648c <memmove+0x28>
 800647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006482:	e7f8      	b.n	8006476 <memmove+0x12>
 8006484:	4601      	mov	r1, r0
 8006486:	4402      	add	r2, r0
 8006488:	428a      	cmp	r2, r1
 800648a:	d100      	bne.n	800648e <memmove+0x2a>
 800648c:	bd10      	pop	{r4, pc}
 800648e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006496:	e7f7      	b.n	8006488 <memmove+0x24>

08006498 <__malloc_lock>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__malloc_lock+0x8>)
 800649a:	f000 bc15 	b.w	8006cc8 <__retarget_lock_acquire_recursive>
 800649e:	bf00      	nop
 80064a0:	20000afc 	.word	0x20000afc

080064a4 <__malloc_unlock>:
 80064a4:	4801      	ldr	r0, [pc, #4]	; (80064ac <__malloc_unlock+0x8>)
 80064a6:	f000 bc10 	b.w	8006cca <__retarget_lock_release_recursive>
 80064aa:	bf00      	nop
 80064ac:	20000afc 	.word	0x20000afc

080064b0 <_realloc_r>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	4607      	mov	r7, r0
 80064b4:	4614      	mov	r4, r2
 80064b6:	460e      	mov	r6, r1
 80064b8:	b921      	cbnz	r1, 80064c4 <_realloc_r+0x14>
 80064ba:	4611      	mov	r1, r2
 80064bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064c0:	f7ff bdc8 	b.w	8006054 <_malloc_r>
 80064c4:	b922      	cbnz	r2, 80064d0 <_realloc_r+0x20>
 80064c6:	f7ff fd79 	bl	8005fbc <_free_r>
 80064ca:	4625      	mov	r5, r4
 80064cc:	4628      	mov	r0, r5
 80064ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d0:	f000 fc60 	bl	8006d94 <_malloc_usable_size_r>
 80064d4:	42a0      	cmp	r0, r4
 80064d6:	d20f      	bcs.n	80064f8 <_realloc_r+0x48>
 80064d8:	4621      	mov	r1, r4
 80064da:	4638      	mov	r0, r7
 80064dc:	f7ff fdba 	bl	8006054 <_malloc_r>
 80064e0:	4605      	mov	r5, r0
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d0f2      	beq.n	80064cc <_realloc_r+0x1c>
 80064e6:	4631      	mov	r1, r6
 80064e8:	4622      	mov	r2, r4
 80064ea:	f7ff f9c9 	bl	8005880 <memcpy>
 80064ee:	4631      	mov	r1, r6
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7ff fd63 	bl	8005fbc <_free_r>
 80064f6:	e7e9      	b.n	80064cc <_realloc_r+0x1c>
 80064f8:	4635      	mov	r5, r6
 80064fa:	e7e7      	b.n	80064cc <_realloc_r+0x1c>

080064fc <__sfputc_r>:
 80064fc:	6893      	ldr	r3, [r2, #8]
 80064fe:	b410      	push	{r4}
 8006500:	3b01      	subs	r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	6093      	str	r3, [r2, #8]
 8006506:	da07      	bge.n	8006518 <__sfputc_r+0x1c>
 8006508:	6994      	ldr	r4, [r2, #24]
 800650a:	42a3      	cmp	r3, r4
 800650c:	db01      	blt.n	8006512 <__sfputc_r+0x16>
 800650e:	290a      	cmp	r1, #10
 8006510:	d102      	bne.n	8006518 <__sfputc_r+0x1c>
 8006512:	bc10      	pop	{r4}
 8006514:	f000 b94a 	b.w	80067ac <__swbuf_r>
 8006518:	6813      	ldr	r3, [r2, #0]
 800651a:	1c58      	adds	r0, r3, #1
 800651c:	6010      	str	r0, [r2, #0]
 800651e:	7019      	strb	r1, [r3, #0]
 8006520:	4608      	mov	r0, r1
 8006522:	bc10      	pop	{r4}
 8006524:	4770      	bx	lr

08006526 <__sfputs_r>:
 8006526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006528:	4606      	mov	r6, r0
 800652a:	460f      	mov	r7, r1
 800652c:	4614      	mov	r4, r2
 800652e:	18d5      	adds	r5, r2, r3
 8006530:	42ac      	cmp	r4, r5
 8006532:	d101      	bne.n	8006538 <__sfputs_r+0x12>
 8006534:	2000      	movs	r0, #0
 8006536:	e007      	b.n	8006548 <__sfputs_r+0x22>
 8006538:	463a      	mov	r2, r7
 800653a:	4630      	mov	r0, r6
 800653c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006540:	f7ff ffdc 	bl	80064fc <__sfputc_r>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d1f3      	bne.n	8006530 <__sfputs_r+0xa>
 8006548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800654c <_vfiprintf_r>:
 800654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006550:	460d      	mov	r5, r1
 8006552:	4614      	mov	r4, r2
 8006554:	4698      	mov	r8, r3
 8006556:	4606      	mov	r6, r0
 8006558:	b09d      	sub	sp, #116	; 0x74
 800655a:	b118      	cbz	r0, 8006564 <_vfiprintf_r+0x18>
 800655c:	6983      	ldr	r3, [r0, #24]
 800655e:	b90b      	cbnz	r3, 8006564 <_vfiprintf_r+0x18>
 8006560:	f000 fb14 	bl	8006b8c <__sinit>
 8006564:	4b89      	ldr	r3, [pc, #548]	; (800678c <_vfiprintf_r+0x240>)
 8006566:	429d      	cmp	r5, r3
 8006568:	d11b      	bne.n	80065a2 <_vfiprintf_r+0x56>
 800656a:	6875      	ldr	r5, [r6, #4]
 800656c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800656e:	07d9      	lsls	r1, r3, #31
 8006570:	d405      	bmi.n	800657e <_vfiprintf_r+0x32>
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	059a      	lsls	r2, r3, #22
 8006576:	d402      	bmi.n	800657e <_vfiprintf_r+0x32>
 8006578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800657a:	f000 fba5 	bl	8006cc8 <__retarget_lock_acquire_recursive>
 800657e:	89ab      	ldrh	r3, [r5, #12]
 8006580:	071b      	lsls	r3, r3, #28
 8006582:	d501      	bpl.n	8006588 <_vfiprintf_r+0x3c>
 8006584:	692b      	ldr	r3, [r5, #16]
 8006586:	b9eb      	cbnz	r3, 80065c4 <_vfiprintf_r+0x78>
 8006588:	4629      	mov	r1, r5
 800658a:	4630      	mov	r0, r6
 800658c:	f000 f96e 	bl	800686c <__swsetup_r>
 8006590:	b1c0      	cbz	r0, 80065c4 <_vfiprintf_r+0x78>
 8006592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006594:	07dc      	lsls	r4, r3, #31
 8006596:	d50e      	bpl.n	80065b6 <_vfiprintf_r+0x6a>
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	b01d      	add	sp, #116	; 0x74
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	4b7b      	ldr	r3, [pc, #492]	; (8006790 <_vfiprintf_r+0x244>)
 80065a4:	429d      	cmp	r5, r3
 80065a6:	d101      	bne.n	80065ac <_vfiprintf_r+0x60>
 80065a8:	68b5      	ldr	r5, [r6, #8]
 80065aa:	e7df      	b.n	800656c <_vfiprintf_r+0x20>
 80065ac:	4b79      	ldr	r3, [pc, #484]	; (8006794 <_vfiprintf_r+0x248>)
 80065ae:	429d      	cmp	r5, r3
 80065b0:	bf08      	it	eq
 80065b2:	68f5      	ldreq	r5, [r6, #12]
 80065b4:	e7da      	b.n	800656c <_vfiprintf_r+0x20>
 80065b6:	89ab      	ldrh	r3, [r5, #12]
 80065b8:	0598      	lsls	r0, r3, #22
 80065ba:	d4ed      	bmi.n	8006598 <_vfiprintf_r+0x4c>
 80065bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065be:	f000 fb84 	bl	8006cca <__retarget_lock_release_recursive>
 80065c2:	e7e9      	b.n	8006598 <_vfiprintf_r+0x4c>
 80065c4:	2300      	movs	r3, #0
 80065c6:	9309      	str	r3, [sp, #36]	; 0x24
 80065c8:	2320      	movs	r3, #32
 80065ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065ce:	2330      	movs	r3, #48	; 0x30
 80065d0:	f04f 0901 	mov.w	r9, #1
 80065d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80065d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006798 <_vfiprintf_r+0x24c>
 80065dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065e0:	4623      	mov	r3, r4
 80065e2:	469a      	mov	sl, r3
 80065e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065e8:	b10a      	cbz	r2, 80065ee <_vfiprintf_r+0xa2>
 80065ea:	2a25      	cmp	r2, #37	; 0x25
 80065ec:	d1f9      	bne.n	80065e2 <_vfiprintf_r+0x96>
 80065ee:	ebba 0b04 	subs.w	fp, sl, r4
 80065f2:	d00b      	beq.n	800660c <_vfiprintf_r+0xc0>
 80065f4:	465b      	mov	r3, fp
 80065f6:	4622      	mov	r2, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7ff ff93 	bl	8006526 <__sfputs_r>
 8006600:	3001      	adds	r0, #1
 8006602:	f000 80aa 	beq.w	800675a <_vfiprintf_r+0x20e>
 8006606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006608:	445a      	add	r2, fp
 800660a:	9209      	str	r2, [sp, #36]	; 0x24
 800660c:	f89a 3000 	ldrb.w	r3, [sl]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80a2 	beq.w	800675a <_vfiprintf_r+0x20e>
 8006616:	2300      	movs	r3, #0
 8006618:	f04f 32ff 	mov.w	r2, #4294967295
 800661c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006620:	f10a 0a01 	add.w	sl, sl, #1
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	9307      	str	r3, [sp, #28]
 8006628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800662c:	931a      	str	r3, [sp, #104]	; 0x68
 800662e:	4654      	mov	r4, sl
 8006630:	2205      	movs	r2, #5
 8006632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006636:	4858      	ldr	r0, [pc, #352]	; (8006798 <_vfiprintf_r+0x24c>)
 8006638:	f7ff f914 	bl	8005864 <memchr>
 800663c:	9a04      	ldr	r2, [sp, #16]
 800663e:	b9d8      	cbnz	r0, 8006678 <_vfiprintf_r+0x12c>
 8006640:	06d1      	lsls	r1, r2, #27
 8006642:	bf44      	itt	mi
 8006644:	2320      	movmi	r3, #32
 8006646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800664a:	0713      	lsls	r3, r2, #28
 800664c:	bf44      	itt	mi
 800664e:	232b      	movmi	r3, #43	; 0x2b
 8006650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006654:	f89a 3000 	ldrb.w	r3, [sl]
 8006658:	2b2a      	cmp	r3, #42	; 0x2a
 800665a:	d015      	beq.n	8006688 <_vfiprintf_r+0x13c>
 800665c:	4654      	mov	r4, sl
 800665e:	2000      	movs	r0, #0
 8006660:	f04f 0c0a 	mov.w	ip, #10
 8006664:	9a07      	ldr	r2, [sp, #28]
 8006666:	4621      	mov	r1, r4
 8006668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800666c:	3b30      	subs	r3, #48	; 0x30
 800666e:	2b09      	cmp	r3, #9
 8006670:	d94e      	bls.n	8006710 <_vfiprintf_r+0x1c4>
 8006672:	b1b0      	cbz	r0, 80066a2 <_vfiprintf_r+0x156>
 8006674:	9207      	str	r2, [sp, #28]
 8006676:	e014      	b.n	80066a2 <_vfiprintf_r+0x156>
 8006678:	eba0 0308 	sub.w	r3, r0, r8
 800667c:	fa09 f303 	lsl.w	r3, r9, r3
 8006680:	4313      	orrs	r3, r2
 8006682:	46a2      	mov	sl, r4
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	e7d2      	b.n	800662e <_vfiprintf_r+0xe2>
 8006688:	9b03      	ldr	r3, [sp, #12]
 800668a:	1d19      	adds	r1, r3, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	9103      	str	r1, [sp, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	bfbb      	ittet	lt
 8006694:	425b      	neglt	r3, r3
 8006696:	f042 0202 	orrlt.w	r2, r2, #2
 800669a:	9307      	strge	r3, [sp, #28]
 800669c:	9307      	strlt	r3, [sp, #28]
 800669e:	bfb8      	it	lt
 80066a0:	9204      	strlt	r2, [sp, #16]
 80066a2:	7823      	ldrb	r3, [r4, #0]
 80066a4:	2b2e      	cmp	r3, #46	; 0x2e
 80066a6:	d10c      	bne.n	80066c2 <_vfiprintf_r+0x176>
 80066a8:	7863      	ldrb	r3, [r4, #1]
 80066aa:	2b2a      	cmp	r3, #42	; 0x2a
 80066ac:	d135      	bne.n	800671a <_vfiprintf_r+0x1ce>
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	3402      	adds	r4, #2
 80066b2:	1d1a      	adds	r2, r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	9203      	str	r2, [sp, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bfb8      	it	lt
 80066bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80066c0:	9305      	str	r3, [sp, #20]
 80066c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067a8 <_vfiprintf_r+0x25c>
 80066c6:	2203      	movs	r2, #3
 80066c8:	4650      	mov	r0, sl
 80066ca:	7821      	ldrb	r1, [r4, #0]
 80066cc:	f7ff f8ca 	bl	8005864 <memchr>
 80066d0:	b140      	cbz	r0, 80066e4 <_vfiprintf_r+0x198>
 80066d2:	2340      	movs	r3, #64	; 0x40
 80066d4:	eba0 000a 	sub.w	r0, r0, sl
 80066d8:	fa03 f000 	lsl.w	r0, r3, r0
 80066dc:	9b04      	ldr	r3, [sp, #16]
 80066de:	3401      	adds	r4, #1
 80066e0:	4303      	orrs	r3, r0
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e8:	2206      	movs	r2, #6
 80066ea:	482c      	ldr	r0, [pc, #176]	; (800679c <_vfiprintf_r+0x250>)
 80066ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066f0:	f7ff f8b8 	bl	8005864 <memchr>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d03f      	beq.n	8006778 <_vfiprintf_r+0x22c>
 80066f8:	4b29      	ldr	r3, [pc, #164]	; (80067a0 <_vfiprintf_r+0x254>)
 80066fa:	bb1b      	cbnz	r3, 8006744 <_vfiprintf_r+0x1f8>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	3307      	adds	r3, #7
 8006700:	f023 0307 	bic.w	r3, r3, #7
 8006704:	3308      	adds	r3, #8
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670a:	443b      	add	r3, r7
 800670c:	9309      	str	r3, [sp, #36]	; 0x24
 800670e:	e767      	b.n	80065e0 <_vfiprintf_r+0x94>
 8006710:	460c      	mov	r4, r1
 8006712:	2001      	movs	r0, #1
 8006714:	fb0c 3202 	mla	r2, ip, r2, r3
 8006718:	e7a5      	b.n	8006666 <_vfiprintf_r+0x11a>
 800671a:	2300      	movs	r3, #0
 800671c:	f04f 0c0a 	mov.w	ip, #10
 8006720:	4619      	mov	r1, r3
 8006722:	3401      	adds	r4, #1
 8006724:	9305      	str	r3, [sp, #20]
 8006726:	4620      	mov	r0, r4
 8006728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672c:	3a30      	subs	r2, #48	; 0x30
 800672e:	2a09      	cmp	r2, #9
 8006730:	d903      	bls.n	800673a <_vfiprintf_r+0x1ee>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c5      	beq.n	80066c2 <_vfiprintf_r+0x176>
 8006736:	9105      	str	r1, [sp, #20]
 8006738:	e7c3      	b.n	80066c2 <_vfiprintf_r+0x176>
 800673a:	4604      	mov	r4, r0
 800673c:	2301      	movs	r3, #1
 800673e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006742:	e7f0      	b.n	8006726 <_vfiprintf_r+0x1da>
 8006744:	ab03      	add	r3, sp, #12
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	462a      	mov	r2, r5
 800674a:	4630      	mov	r0, r6
 800674c:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <_vfiprintf_r+0x258>)
 800674e:	a904      	add	r1, sp, #16
 8006750:	f7fd fe1c 	bl	800438c <_printf_float>
 8006754:	4607      	mov	r7, r0
 8006756:	1c78      	adds	r0, r7, #1
 8006758:	d1d6      	bne.n	8006708 <_vfiprintf_r+0x1bc>
 800675a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800675c:	07d9      	lsls	r1, r3, #31
 800675e:	d405      	bmi.n	800676c <_vfiprintf_r+0x220>
 8006760:	89ab      	ldrh	r3, [r5, #12]
 8006762:	059a      	lsls	r2, r3, #22
 8006764:	d402      	bmi.n	800676c <_vfiprintf_r+0x220>
 8006766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006768:	f000 faaf 	bl	8006cca <__retarget_lock_release_recursive>
 800676c:	89ab      	ldrh	r3, [r5, #12]
 800676e:	065b      	lsls	r3, r3, #25
 8006770:	f53f af12 	bmi.w	8006598 <_vfiprintf_r+0x4c>
 8006774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006776:	e711      	b.n	800659c <_vfiprintf_r+0x50>
 8006778:	ab03      	add	r3, sp, #12
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	462a      	mov	r2, r5
 800677e:	4630      	mov	r0, r6
 8006780:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <_vfiprintf_r+0x258>)
 8006782:	a904      	add	r1, sp, #16
 8006784:	f7fe f89e 	bl	80048c4 <_printf_i>
 8006788:	e7e4      	b.n	8006754 <_vfiprintf_r+0x208>
 800678a:	bf00      	nop
 800678c:	08007454 	.word	0x08007454
 8006790:	08007474 	.word	0x08007474
 8006794:	08007434 	.word	0x08007434
 8006798:	080072dc 	.word	0x080072dc
 800679c:	080072e6 	.word	0x080072e6
 80067a0:	0800438d 	.word	0x0800438d
 80067a4:	08006527 	.word	0x08006527
 80067a8:	080072e2 	.word	0x080072e2

080067ac <__swbuf_r>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	460e      	mov	r6, r1
 80067b0:	4614      	mov	r4, r2
 80067b2:	4605      	mov	r5, r0
 80067b4:	b118      	cbz	r0, 80067be <__swbuf_r+0x12>
 80067b6:	6983      	ldr	r3, [r0, #24]
 80067b8:	b90b      	cbnz	r3, 80067be <__swbuf_r+0x12>
 80067ba:	f000 f9e7 	bl	8006b8c <__sinit>
 80067be:	4b21      	ldr	r3, [pc, #132]	; (8006844 <__swbuf_r+0x98>)
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d12b      	bne.n	800681c <__swbuf_r+0x70>
 80067c4:	686c      	ldr	r4, [r5, #4]
 80067c6:	69a3      	ldr	r3, [r4, #24]
 80067c8:	60a3      	str	r3, [r4, #8]
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	071a      	lsls	r2, r3, #28
 80067ce:	d52f      	bpl.n	8006830 <__swbuf_r+0x84>
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	b36b      	cbz	r3, 8006830 <__swbuf_r+0x84>
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	6820      	ldr	r0, [r4, #0]
 80067d8:	b2f6      	uxtb	r6, r6
 80067da:	1ac0      	subs	r0, r0, r3
 80067dc:	6963      	ldr	r3, [r4, #20]
 80067de:	4637      	mov	r7, r6
 80067e0:	4283      	cmp	r3, r0
 80067e2:	dc04      	bgt.n	80067ee <__swbuf_r+0x42>
 80067e4:	4621      	mov	r1, r4
 80067e6:	4628      	mov	r0, r5
 80067e8:	f000 f93c 	bl	8006a64 <_fflush_r>
 80067ec:	bb30      	cbnz	r0, 800683c <__swbuf_r+0x90>
 80067ee:	68a3      	ldr	r3, [r4, #8]
 80067f0:	3001      	adds	r0, #1
 80067f2:	3b01      	subs	r3, #1
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	6022      	str	r2, [r4, #0]
 80067fc:	701e      	strb	r6, [r3, #0]
 80067fe:	6963      	ldr	r3, [r4, #20]
 8006800:	4283      	cmp	r3, r0
 8006802:	d004      	beq.n	800680e <__swbuf_r+0x62>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	07db      	lsls	r3, r3, #31
 8006808:	d506      	bpl.n	8006818 <__swbuf_r+0x6c>
 800680a:	2e0a      	cmp	r6, #10
 800680c:	d104      	bne.n	8006818 <__swbuf_r+0x6c>
 800680e:	4621      	mov	r1, r4
 8006810:	4628      	mov	r0, r5
 8006812:	f000 f927 	bl	8006a64 <_fflush_r>
 8006816:	b988      	cbnz	r0, 800683c <__swbuf_r+0x90>
 8006818:	4638      	mov	r0, r7
 800681a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <__swbuf_r+0x9c>)
 800681e:	429c      	cmp	r4, r3
 8006820:	d101      	bne.n	8006826 <__swbuf_r+0x7a>
 8006822:	68ac      	ldr	r4, [r5, #8]
 8006824:	e7cf      	b.n	80067c6 <__swbuf_r+0x1a>
 8006826:	4b09      	ldr	r3, [pc, #36]	; (800684c <__swbuf_r+0xa0>)
 8006828:	429c      	cmp	r4, r3
 800682a:	bf08      	it	eq
 800682c:	68ec      	ldreq	r4, [r5, #12]
 800682e:	e7ca      	b.n	80067c6 <__swbuf_r+0x1a>
 8006830:	4621      	mov	r1, r4
 8006832:	4628      	mov	r0, r5
 8006834:	f000 f81a 	bl	800686c <__swsetup_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	d0cb      	beq.n	80067d4 <__swbuf_r+0x28>
 800683c:	f04f 37ff 	mov.w	r7, #4294967295
 8006840:	e7ea      	b.n	8006818 <__swbuf_r+0x6c>
 8006842:	bf00      	nop
 8006844:	08007454 	.word	0x08007454
 8006848:	08007474 	.word	0x08007474
 800684c:	08007434 	.word	0x08007434

08006850 <__ascii_wctomb>:
 8006850:	4603      	mov	r3, r0
 8006852:	4608      	mov	r0, r1
 8006854:	b141      	cbz	r1, 8006868 <__ascii_wctomb+0x18>
 8006856:	2aff      	cmp	r2, #255	; 0xff
 8006858:	d904      	bls.n	8006864 <__ascii_wctomb+0x14>
 800685a:	228a      	movs	r2, #138	; 0x8a
 800685c:	f04f 30ff 	mov.w	r0, #4294967295
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	4770      	bx	lr
 8006864:	2001      	movs	r0, #1
 8006866:	700a      	strb	r2, [r1, #0]
 8006868:	4770      	bx	lr
	...

0800686c <__swsetup_r>:
 800686c:	4b32      	ldr	r3, [pc, #200]	; (8006938 <__swsetup_r+0xcc>)
 800686e:	b570      	push	{r4, r5, r6, lr}
 8006870:	681d      	ldr	r5, [r3, #0]
 8006872:	4606      	mov	r6, r0
 8006874:	460c      	mov	r4, r1
 8006876:	b125      	cbz	r5, 8006882 <__swsetup_r+0x16>
 8006878:	69ab      	ldr	r3, [r5, #24]
 800687a:	b913      	cbnz	r3, 8006882 <__swsetup_r+0x16>
 800687c:	4628      	mov	r0, r5
 800687e:	f000 f985 	bl	8006b8c <__sinit>
 8006882:	4b2e      	ldr	r3, [pc, #184]	; (800693c <__swsetup_r+0xd0>)
 8006884:	429c      	cmp	r4, r3
 8006886:	d10f      	bne.n	80068a8 <__swsetup_r+0x3c>
 8006888:	686c      	ldr	r4, [r5, #4]
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006890:	0719      	lsls	r1, r3, #28
 8006892:	d42c      	bmi.n	80068ee <__swsetup_r+0x82>
 8006894:	06dd      	lsls	r5, r3, #27
 8006896:	d411      	bmi.n	80068bc <__swsetup_r+0x50>
 8006898:	2309      	movs	r3, #9
 800689a:	6033      	str	r3, [r6, #0]
 800689c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	e03e      	b.n	8006926 <__swsetup_r+0xba>
 80068a8:	4b25      	ldr	r3, [pc, #148]	; (8006940 <__swsetup_r+0xd4>)
 80068aa:	429c      	cmp	r4, r3
 80068ac:	d101      	bne.n	80068b2 <__swsetup_r+0x46>
 80068ae:	68ac      	ldr	r4, [r5, #8]
 80068b0:	e7eb      	b.n	800688a <__swsetup_r+0x1e>
 80068b2:	4b24      	ldr	r3, [pc, #144]	; (8006944 <__swsetup_r+0xd8>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	bf08      	it	eq
 80068b8:	68ec      	ldreq	r4, [r5, #12]
 80068ba:	e7e6      	b.n	800688a <__swsetup_r+0x1e>
 80068bc:	0758      	lsls	r0, r3, #29
 80068be:	d512      	bpl.n	80068e6 <__swsetup_r+0x7a>
 80068c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068c2:	b141      	cbz	r1, 80068d6 <__swsetup_r+0x6a>
 80068c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068c8:	4299      	cmp	r1, r3
 80068ca:	d002      	beq.n	80068d2 <__swsetup_r+0x66>
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7ff fb75 	bl	8005fbc <_free_r>
 80068d2:	2300      	movs	r3, #0
 80068d4:	6363      	str	r3, [r4, #52]	; 0x34
 80068d6:	89a3      	ldrh	r3, [r4, #12]
 80068d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	2300      	movs	r3, #0
 80068e0:	6063      	str	r3, [r4, #4]
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f043 0308 	orr.w	r3, r3, #8
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	b94b      	cbnz	r3, 8006906 <__swsetup_r+0x9a>
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fc:	d003      	beq.n	8006906 <__swsetup_r+0x9a>
 80068fe:	4621      	mov	r1, r4
 8006900:	4630      	mov	r0, r6
 8006902:	f000 fa07 	bl	8006d14 <__smakebuf_r>
 8006906:	89a0      	ldrh	r0, [r4, #12]
 8006908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800690c:	f010 0301 	ands.w	r3, r0, #1
 8006910:	d00a      	beq.n	8006928 <__swsetup_r+0xbc>
 8006912:	2300      	movs	r3, #0
 8006914:	60a3      	str	r3, [r4, #8]
 8006916:	6963      	ldr	r3, [r4, #20]
 8006918:	425b      	negs	r3, r3
 800691a:	61a3      	str	r3, [r4, #24]
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	b943      	cbnz	r3, 8006932 <__swsetup_r+0xc6>
 8006920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006924:	d1ba      	bne.n	800689c <__swsetup_r+0x30>
 8006926:	bd70      	pop	{r4, r5, r6, pc}
 8006928:	0781      	lsls	r1, r0, #30
 800692a:	bf58      	it	pl
 800692c:	6963      	ldrpl	r3, [r4, #20]
 800692e:	60a3      	str	r3, [r4, #8]
 8006930:	e7f4      	b.n	800691c <__swsetup_r+0xb0>
 8006932:	2000      	movs	r0, #0
 8006934:	e7f7      	b.n	8006926 <__swsetup_r+0xba>
 8006936:	bf00      	nop
 8006938:	2000000c 	.word	0x2000000c
 800693c:	08007454 	.word	0x08007454
 8006940:	08007474 	.word	0x08007474
 8006944:	08007434 	.word	0x08007434

08006948 <abort>:
 8006948:	2006      	movs	r0, #6
 800694a:	b508      	push	{r3, lr}
 800694c:	f000 fa52 	bl	8006df4 <raise>
 8006950:	2001      	movs	r0, #1
 8006952:	f7fb f87c 	bl	8001a4e <_exit>
	...

08006958 <__sflush_r>:
 8006958:	898a      	ldrh	r2, [r1, #12]
 800695a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695e:	4605      	mov	r5, r0
 8006960:	0710      	lsls	r0, r2, #28
 8006962:	460c      	mov	r4, r1
 8006964:	d458      	bmi.n	8006a18 <__sflush_r+0xc0>
 8006966:	684b      	ldr	r3, [r1, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	dc05      	bgt.n	8006978 <__sflush_r+0x20>
 800696c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	dc02      	bgt.n	8006978 <__sflush_r+0x20>
 8006972:	2000      	movs	r0, #0
 8006974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800697a:	2e00      	cmp	r6, #0
 800697c:	d0f9      	beq.n	8006972 <__sflush_r+0x1a>
 800697e:	2300      	movs	r3, #0
 8006980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006984:	682f      	ldr	r7, [r5, #0]
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	d032      	beq.n	80069f0 <__sflush_r+0x98>
 800698a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	075a      	lsls	r2, r3, #29
 8006990:	d505      	bpl.n	800699e <__sflush_r+0x46>
 8006992:	6863      	ldr	r3, [r4, #4]
 8006994:	1ac0      	subs	r0, r0, r3
 8006996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006998:	b10b      	cbz	r3, 800699e <__sflush_r+0x46>
 800699a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800699c:	1ac0      	subs	r0, r0, r3
 800699e:	2300      	movs	r3, #0
 80069a0:	4602      	mov	r2, r0
 80069a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069a4:	4628      	mov	r0, r5
 80069a6:	6a21      	ldr	r1, [r4, #32]
 80069a8:	47b0      	blx	r6
 80069aa:	1c43      	adds	r3, r0, #1
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	d106      	bne.n	80069be <__sflush_r+0x66>
 80069b0:	6829      	ldr	r1, [r5, #0]
 80069b2:	291d      	cmp	r1, #29
 80069b4:	d82c      	bhi.n	8006a10 <__sflush_r+0xb8>
 80069b6:	4a2a      	ldr	r2, [pc, #168]	; (8006a60 <__sflush_r+0x108>)
 80069b8:	40ca      	lsrs	r2, r1
 80069ba:	07d6      	lsls	r6, r2, #31
 80069bc:	d528      	bpl.n	8006a10 <__sflush_r+0xb8>
 80069be:	2200      	movs	r2, #0
 80069c0:	6062      	str	r2, [r4, #4]
 80069c2:	6922      	ldr	r2, [r4, #16]
 80069c4:	04d9      	lsls	r1, r3, #19
 80069c6:	6022      	str	r2, [r4, #0]
 80069c8:	d504      	bpl.n	80069d4 <__sflush_r+0x7c>
 80069ca:	1c42      	adds	r2, r0, #1
 80069cc:	d101      	bne.n	80069d2 <__sflush_r+0x7a>
 80069ce:	682b      	ldr	r3, [r5, #0]
 80069d0:	b903      	cbnz	r3, 80069d4 <__sflush_r+0x7c>
 80069d2:	6560      	str	r0, [r4, #84]	; 0x54
 80069d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069d6:	602f      	str	r7, [r5, #0]
 80069d8:	2900      	cmp	r1, #0
 80069da:	d0ca      	beq.n	8006972 <__sflush_r+0x1a>
 80069dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069e0:	4299      	cmp	r1, r3
 80069e2:	d002      	beq.n	80069ea <__sflush_r+0x92>
 80069e4:	4628      	mov	r0, r5
 80069e6:	f7ff fae9 	bl	8005fbc <_free_r>
 80069ea:	2000      	movs	r0, #0
 80069ec:	6360      	str	r0, [r4, #52]	; 0x34
 80069ee:	e7c1      	b.n	8006974 <__sflush_r+0x1c>
 80069f0:	6a21      	ldr	r1, [r4, #32]
 80069f2:	2301      	movs	r3, #1
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b0      	blx	r6
 80069f8:	1c41      	adds	r1, r0, #1
 80069fa:	d1c7      	bne.n	800698c <__sflush_r+0x34>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0c4      	beq.n	800698c <__sflush_r+0x34>
 8006a02:	2b1d      	cmp	r3, #29
 8006a04:	d001      	beq.n	8006a0a <__sflush_r+0xb2>
 8006a06:	2b16      	cmp	r3, #22
 8006a08:	d101      	bne.n	8006a0e <__sflush_r+0xb6>
 8006a0a:	602f      	str	r7, [r5, #0]
 8006a0c:	e7b1      	b.n	8006972 <__sflush_r+0x1a>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	e7ad      	b.n	8006974 <__sflush_r+0x1c>
 8006a18:	690f      	ldr	r7, [r1, #16]
 8006a1a:	2f00      	cmp	r7, #0
 8006a1c:	d0a9      	beq.n	8006972 <__sflush_r+0x1a>
 8006a1e:	0793      	lsls	r3, r2, #30
 8006a20:	bf18      	it	ne
 8006a22:	2300      	movne	r3, #0
 8006a24:	680e      	ldr	r6, [r1, #0]
 8006a26:	bf08      	it	eq
 8006a28:	694b      	ldreq	r3, [r1, #20]
 8006a2a:	eba6 0807 	sub.w	r8, r6, r7
 8006a2e:	600f      	str	r7, [r1, #0]
 8006a30:	608b      	str	r3, [r1, #8]
 8006a32:	f1b8 0f00 	cmp.w	r8, #0
 8006a36:	dd9c      	ble.n	8006972 <__sflush_r+0x1a>
 8006a38:	4643      	mov	r3, r8
 8006a3a:	463a      	mov	r2, r7
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	6a21      	ldr	r1, [r4, #32]
 8006a40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a42:	47b0      	blx	r6
 8006a44:	2800      	cmp	r0, #0
 8006a46:	dc06      	bgt.n	8006a56 <__sflush_r+0xfe>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	e78e      	b.n	8006974 <__sflush_r+0x1c>
 8006a56:	4407      	add	r7, r0
 8006a58:	eba8 0800 	sub.w	r8, r8, r0
 8006a5c:	e7e9      	b.n	8006a32 <__sflush_r+0xda>
 8006a5e:	bf00      	nop
 8006a60:	20400001 	.word	0x20400001

08006a64 <_fflush_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	690b      	ldr	r3, [r1, #16]
 8006a68:	4605      	mov	r5, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	b913      	cbnz	r3, 8006a74 <_fflush_r+0x10>
 8006a6e:	2500      	movs	r5, #0
 8006a70:	4628      	mov	r0, r5
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	b118      	cbz	r0, 8006a7e <_fflush_r+0x1a>
 8006a76:	6983      	ldr	r3, [r0, #24]
 8006a78:	b90b      	cbnz	r3, 8006a7e <_fflush_r+0x1a>
 8006a7a:	f000 f887 	bl	8006b8c <__sinit>
 8006a7e:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <_fflush_r+0x6c>)
 8006a80:	429c      	cmp	r4, r3
 8006a82:	d11b      	bne.n	8006abc <_fflush_r+0x58>
 8006a84:	686c      	ldr	r4, [r5, #4]
 8006a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0ef      	beq.n	8006a6e <_fflush_r+0xa>
 8006a8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a90:	07d0      	lsls	r0, r2, #31
 8006a92:	d404      	bmi.n	8006a9e <_fflush_r+0x3a>
 8006a94:	0599      	lsls	r1, r3, #22
 8006a96:	d402      	bmi.n	8006a9e <_fflush_r+0x3a>
 8006a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a9a:	f000 f915 	bl	8006cc8 <__retarget_lock_acquire_recursive>
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	f7ff ff59 	bl	8006958 <__sflush_r>
 8006aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	07da      	lsls	r2, r3, #31
 8006aac:	d4e0      	bmi.n	8006a70 <_fflush_r+0xc>
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	059b      	lsls	r3, r3, #22
 8006ab2:	d4dd      	bmi.n	8006a70 <_fflush_r+0xc>
 8006ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab6:	f000 f908 	bl	8006cca <__retarget_lock_release_recursive>
 8006aba:	e7d9      	b.n	8006a70 <_fflush_r+0xc>
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <_fflush_r+0x70>)
 8006abe:	429c      	cmp	r4, r3
 8006ac0:	d101      	bne.n	8006ac6 <_fflush_r+0x62>
 8006ac2:	68ac      	ldr	r4, [r5, #8]
 8006ac4:	e7df      	b.n	8006a86 <_fflush_r+0x22>
 8006ac6:	4b04      	ldr	r3, [pc, #16]	; (8006ad8 <_fflush_r+0x74>)
 8006ac8:	429c      	cmp	r4, r3
 8006aca:	bf08      	it	eq
 8006acc:	68ec      	ldreq	r4, [r5, #12]
 8006ace:	e7da      	b.n	8006a86 <_fflush_r+0x22>
 8006ad0:	08007454 	.word	0x08007454
 8006ad4:	08007474 	.word	0x08007474
 8006ad8:	08007434 	.word	0x08007434

08006adc <std>:
 8006adc:	2300      	movs	r3, #0
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aea:	6083      	str	r3, [r0, #8]
 8006aec:	8181      	strh	r1, [r0, #12]
 8006aee:	6643      	str	r3, [r0, #100]	; 0x64
 8006af0:	81c2      	strh	r2, [r0, #14]
 8006af2:	6183      	str	r3, [r0, #24]
 8006af4:	4619      	mov	r1, r3
 8006af6:	2208      	movs	r2, #8
 8006af8:	305c      	adds	r0, #92	; 0x5c
 8006afa:	f7fd fba1 	bl	8004240 <memset>
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <std+0x38>)
 8006b00:	6224      	str	r4, [r4, #32]
 8006b02:	6263      	str	r3, [r4, #36]	; 0x24
 8006b04:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <std+0x3c>)
 8006b06:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b08:	4b04      	ldr	r3, [pc, #16]	; (8006b1c <std+0x40>)
 8006b0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b0c:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <std+0x44>)
 8006b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	08006e2d 	.word	0x08006e2d
 8006b18:	08006e4f 	.word	0x08006e4f
 8006b1c:	08006e87 	.word	0x08006e87
 8006b20:	08006eab 	.word	0x08006eab

08006b24 <_cleanup_r>:
 8006b24:	4901      	ldr	r1, [pc, #4]	; (8006b2c <_cleanup_r+0x8>)
 8006b26:	f000 b8af 	b.w	8006c88 <_fwalk_reent>
 8006b2a:	bf00      	nop
 8006b2c:	08006a65 	.word	0x08006a65

08006b30 <__sfmoreglue>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	2568      	movs	r5, #104	; 0x68
 8006b34:	1e4a      	subs	r2, r1, #1
 8006b36:	4355      	muls	r5, r2
 8006b38:	460e      	mov	r6, r1
 8006b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b3e:	f7ff fa89 	bl	8006054 <_malloc_r>
 8006b42:	4604      	mov	r4, r0
 8006b44:	b140      	cbz	r0, 8006b58 <__sfmoreglue+0x28>
 8006b46:	2100      	movs	r1, #0
 8006b48:	e9c0 1600 	strd	r1, r6, [r0]
 8006b4c:	300c      	adds	r0, #12
 8006b4e:	60a0      	str	r0, [r4, #8]
 8006b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b54:	f7fd fb74 	bl	8004240 <memset>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}

08006b5c <__sfp_lock_acquire>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sfp_lock_acquire+0x8>)
 8006b5e:	f000 b8b3 	b.w	8006cc8 <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	20000b00 	.word	0x20000b00

08006b68 <__sfp_lock_release>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sfp_lock_release+0x8>)
 8006b6a:	f000 b8ae 	b.w	8006cca <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20000b00 	.word	0x20000b00

08006b74 <__sinit_lock_acquire>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__sinit_lock_acquire+0x8>)
 8006b76:	f000 b8a7 	b.w	8006cc8 <__retarget_lock_acquire_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20000afb 	.word	0x20000afb

08006b80 <__sinit_lock_release>:
 8006b80:	4801      	ldr	r0, [pc, #4]	; (8006b88 <__sinit_lock_release+0x8>)
 8006b82:	f000 b8a2 	b.w	8006cca <__retarget_lock_release_recursive>
 8006b86:	bf00      	nop
 8006b88:	20000afb 	.word	0x20000afb

08006b8c <__sinit>:
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	4604      	mov	r4, r0
 8006b90:	f7ff fff0 	bl	8006b74 <__sinit_lock_acquire>
 8006b94:	69a3      	ldr	r3, [r4, #24]
 8006b96:	b11b      	cbz	r3, 8006ba0 <__sinit+0x14>
 8006b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9c:	f7ff bff0 	b.w	8006b80 <__sinit_lock_release>
 8006ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ba6:	4b13      	ldr	r3, [pc, #76]	; (8006bf4 <__sinit+0x68>)
 8006ba8:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <__sinit+0x6c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	bf08      	it	eq
 8006bb2:	2301      	moveq	r3, #1
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	bf08      	it	eq
 8006bb8:	61a3      	streq	r3, [r4, #24]
 8006bba:	f000 f81f 	bl	8006bfc <__sfp>
 8006bbe:	6060      	str	r0, [r4, #4]
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 f81b 	bl	8006bfc <__sfp>
 8006bc6:	60a0      	str	r0, [r4, #8]
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 f817 	bl	8006bfc <__sfp>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2104      	movs	r1, #4
 8006bd2:	60e0      	str	r0, [r4, #12]
 8006bd4:	6860      	ldr	r0, [r4, #4]
 8006bd6:	f7ff ff81 	bl	8006adc <std>
 8006bda:	2201      	movs	r2, #1
 8006bdc:	2109      	movs	r1, #9
 8006bde:	68a0      	ldr	r0, [r4, #8]
 8006be0:	f7ff ff7c 	bl	8006adc <std>
 8006be4:	2202      	movs	r2, #2
 8006be6:	2112      	movs	r1, #18
 8006be8:	68e0      	ldr	r0, [r4, #12]
 8006bea:	f7ff ff77 	bl	8006adc <std>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	61a3      	str	r3, [r4, #24]
 8006bf2:	e7d1      	b.n	8006b98 <__sinit+0xc>
 8006bf4:	080070b0 	.word	0x080070b0
 8006bf8:	08006b25 	.word	0x08006b25

08006bfc <__sfp>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	4607      	mov	r7, r0
 8006c00:	f7ff ffac 	bl	8006b5c <__sfp_lock_acquire>
 8006c04:	4b1e      	ldr	r3, [pc, #120]	; (8006c80 <__sfp+0x84>)
 8006c06:	681e      	ldr	r6, [r3, #0]
 8006c08:	69b3      	ldr	r3, [r6, #24]
 8006c0a:	b913      	cbnz	r3, 8006c12 <__sfp+0x16>
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f7ff ffbd 	bl	8006b8c <__sinit>
 8006c12:	3648      	adds	r6, #72	; 0x48
 8006c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	d503      	bpl.n	8006c24 <__sfp+0x28>
 8006c1c:	6833      	ldr	r3, [r6, #0]
 8006c1e:	b30b      	cbz	r3, 8006c64 <__sfp+0x68>
 8006c20:	6836      	ldr	r6, [r6, #0]
 8006c22:	e7f7      	b.n	8006c14 <__sfp+0x18>
 8006c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c28:	b9d5      	cbnz	r5, 8006c60 <__sfp+0x64>
 8006c2a:	4b16      	ldr	r3, [pc, #88]	; (8006c84 <__sfp+0x88>)
 8006c2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c30:	60e3      	str	r3, [r4, #12]
 8006c32:	6665      	str	r5, [r4, #100]	; 0x64
 8006c34:	f000 f847 	bl	8006cc6 <__retarget_lock_init_recursive>
 8006c38:	f7ff ff96 	bl	8006b68 <__sfp_lock_release>
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	4629      	mov	r1, r5
 8006c40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c48:	6025      	str	r5, [r4, #0]
 8006c4a:	61a5      	str	r5, [r4, #24]
 8006c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c50:	f7fd faf6 	bl	8004240 <memset>
 8006c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c60:	3468      	adds	r4, #104	; 0x68
 8006c62:	e7d9      	b.n	8006c18 <__sfp+0x1c>
 8006c64:	2104      	movs	r1, #4
 8006c66:	4638      	mov	r0, r7
 8006c68:	f7ff ff62 	bl	8006b30 <__sfmoreglue>
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	6030      	str	r0, [r6, #0]
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d1d5      	bne.n	8006c20 <__sfp+0x24>
 8006c74:	f7ff ff78 	bl	8006b68 <__sfp_lock_release>
 8006c78:	230c      	movs	r3, #12
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	e7ee      	b.n	8006c5c <__sfp+0x60>
 8006c7e:	bf00      	nop
 8006c80:	080070b0 	.word	0x080070b0
 8006c84:	ffff0001 	.word	0xffff0001

08006c88 <_fwalk_reent>:
 8006c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	4688      	mov	r8, r1
 8006c90:	2700      	movs	r7, #0
 8006c92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8006c9e:	d505      	bpl.n	8006cac <_fwalk_reent+0x24>
 8006ca0:	6824      	ldr	r4, [r4, #0]
 8006ca2:	2c00      	cmp	r4, #0
 8006ca4:	d1f7      	bne.n	8006c96 <_fwalk_reent+0xe>
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cac:	89ab      	ldrh	r3, [r5, #12]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d907      	bls.n	8006cc2 <_fwalk_reent+0x3a>
 8006cb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	d003      	beq.n	8006cc2 <_fwalk_reent+0x3a>
 8006cba:	4629      	mov	r1, r5
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	47c0      	blx	r8
 8006cc0:	4307      	orrs	r7, r0
 8006cc2:	3568      	adds	r5, #104	; 0x68
 8006cc4:	e7e9      	b.n	8006c9a <_fwalk_reent+0x12>

08006cc6 <__retarget_lock_init_recursive>:
 8006cc6:	4770      	bx	lr

08006cc8 <__retarget_lock_acquire_recursive>:
 8006cc8:	4770      	bx	lr

08006cca <__retarget_lock_release_recursive>:
 8006cca:	4770      	bx	lr

08006ccc <__swhatbuf_r>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	460e      	mov	r6, r1
 8006cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	461d      	mov	r5, r3
 8006cda:	b096      	sub	sp, #88	; 0x58
 8006cdc:	da07      	bge.n	8006cee <__swhatbuf_r+0x22>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	89b3      	ldrh	r3, [r6, #12]
 8006ce4:	061a      	lsls	r2, r3, #24
 8006ce6:	d410      	bmi.n	8006d0a <__swhatbuf_r+0x3e>
 8006ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cec:	e00e      	b.n	8006d0c <__swhatbuf_r+0x40>
 8006cee:	466a      	mov	r2, sp
 8006cf0:	f000 f902 	bl	8006ef8 <_fstat_r>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	dbf2      	blt.n	8006cde <__swhatbuf_r+0x12>
 8006cf8:	9a01      	ldr	r2, [sp, #4]
 8006cfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d02:	425a      	negs	r2, r3
 8006d04:	415a      	adcs	r2, r3
 8006d06:	602a      	str	r2, [r5, #0]
 8006d08:	e7ee      	b.n	8006ce8 <__swhatbuf_r+0x1c>
 8006d0a:	2340      	movs	r3, #64	; 0x40
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	6023      	str	r3, [r4, #0]
 8006d10:	b016      	add	sp, #88	; 0x58
 8006d12:	bd70      	pop	{r4, r5, r6, pc}

08006d14 <__smakebuf_r>:
 8006d14:	898b      	ldrh	r3, [r1, #12]
 8006d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d18:	079d      	lsls	r5, r3, #30
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	d507      	bpl.n	8006d30 <__smakebuf_r+0x1c>
 8006d20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	6123      	str	r3, [r4, #16]
 8006d28:	2301      	movs	r3, #1
 8006d2a:	6163      	str	r3, [r4, #20]
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	466a      	mov	r2, sp
 8006d32:	ab01      	add	r3, sp, #4
 8006d34:	f7ff ffca 	bl	8006ccc <__swhatbuf_r>
 8006d38:	9900      	ldr	r1, [sp, #0]
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7ff f989 	bl	8006054 <_malloc_r>
 8006d42:	b948      	cbnz	r0, 8006d58 <__smakebuf_r+0x44>
 8006d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d48:	059a      	lsls	r2, r3, #22
 8006d4a:	d4ef      	bmi.n	8006d2c <__smakebuf_r+0x18>
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	f043 0302 	orr.w	r3, r3, #2
 8006d54:	81a3      	strh	r3, [r4, #12]
 8006d56:	e7e3      	b.n	8006d20 <__smakebuf_r+0xc>
 8006d58:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <__smakebuf_r+0x7c>)
 8006d5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	6020      	str	r0, [r4, #0]
 8006d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d64:	81a3      	strh	r3, [r4, #12]
 8006d66:	9b00      	ldr	r3, [sp, #0]
 8006d68:	6120      	str	r0, [r4, #16]
 8006d6a:	6163      	str	r3, [r4, #20]
 8006d6c:	9b01      	ldr	r3, [sp, #4]
 8006d6e:	b15b      	cbz	r3, 8006d88 <__smakebuf_r+0x74>
 8006d70:	4630      	mov	r0, r6
 8006d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d76:	f000 f8d1 	bl	8006f1c <_isatty_r>
 8006d7a:	b128      	cbz	r0, 8006d88 <__smakebuf_r+0x74>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	89a0      	ldrh	r0, [r4, #12]
 8006d8a:	4305      	orrs	r5, r0
 8006d8c:	81a5      	strh	r5, [r4, #12]
 8006d8e:	e7cd      	b.n	8006d2c <__smakebuf_r+0x18>
 8006d90:	08006b25 	.word	0x08006b25

08006d94 <_malloc_usable_size_r>:
 8006d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d98:	1f18      	subs	r0, r3, #4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bfbc      	itt	lt
 8006d9e:	580b      	ldrlt	r3, [r1, r0]
 8006da0:	18c0      	addlt	r0, r0, r3
 8006da2:	4770      	bx	lr

08006da4 <_raise_r>:
 8006da4:	291f      	cmp	r1, #31
 8006da6:	b538      	push	{r3, r4, r5, lr}
 8006da8:	4604      	mov	r4, r0
 8006daa:	460d      	mov	r5, r1
 8006dac:	d904      	bls.n	8006db8 <_raise_r+0x14>
 8006dae:	2316      	movs	r3, #22
 8006db0:	6003      	str	r3, [r0, #0]
 8006db2:	f04f 30ff 	mov.w	r0, #4294967295
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006dba:	b112      	cbz	r2, 8006dc2 <_raise_r+0x1e>
 8006dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dc0:	b94b      	cbnz	r3, 8006dd6 <_raise_r+0x32>
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f830 	bl	8006e28 <_getpid_r>
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4601      	mov	r1, r0
 8006dcc:	4620      	mov	r0, r4
 8006dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dd2:	f000 b817 	b.w	8006e04 <_kill_r>
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d00a      	beq.n	8006df0 <_raise_r+0x4c>
 8006dda:	1c59      	adds	r1, r3, #1
 8006ddc:	d103      	bne.n	8006de6 <_raise_r+0x42>
 8006dde:	2316      	movs	r3, #22
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	2001      	movs	r0, #1
 8006de4:	e7e7      	b.n	8006db6 <_raise_r+0x12>
 8006de6:	2400      	movs	r4, #0
 8006de8:	4628      	mov	r0, r5
 8006dea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dee:	4798      	blx	r3
 8006df0:	2000      	movs	r0, #0
 8006df2:	e7e0      	b.n	8006db6 <_raise_r+0x12>

08006df4 <raise>:
 8006df4:	4b02      	ldr	r3, [pc, #8]	; (8006e00 <raise+0xc>)
 8006df6:	4601      	mov	r1, r0
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f7ff bfd3 	b.w	8006da4 <_raise_r>
 8006dfe:	bf00      	nop
 8006e00:	2000000c 	.word	0x2000000c

08006e04 <_kill_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	2300      	movs	r3, #0
 8006e08:	4d06      	ldr	r5, [pc, #24]	; (8006e24 <_kill_r+0x20>)
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	f7fa fe0c 	bl	8001a2e <_kill>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d102      	bne.n	8006e20 <_kill_r+0x1c>
 8006e1a:	682b      	ldr	r3, [r5, #0]
 8006e1c:	b103      	cbz	r3, 8006e20 <_kill_r+0x1c>
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	bf00      	nop
 8006e24:	20000af4 	.word	0x20000af4

08006e28 <_getpid_r>:
 8006e28:	f7fa bdfa 	b.w	8001a20 <_getpid>

08006e2c <__sread>:
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	460c      	mov	r4, r1
 8006e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e34:	f000 f894 	bl	8006f60 <_read_r>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	bfab      	itete	ge
 8006e3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e40:	181b      	addge	r3, r3, r0
 8006e42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e46:	bfac      	ite	ge
 8006e48:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e4a:	81a3      	strhlt	r3, [r4, #12]
 8006e4c:	bd10      	pop	{r4, pc}

08006e4e <__swrite>:
 8006e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e52:	461f      	mov	r7, r3
 8006e54:	898b      	ldrh	r3, [r1, #12]
 8006e56:	4605      	mov	r5, r0
 8006e58:	05db      	lsls	r3, r3, #23
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	4616      	mov	r6, r2
 8006e5e:	d505      	bpl.n	8006e6c <__swrite+0x1e>
 8006e60:	2302      	movs	r3, #2
 8006e62:	2200      	movs	r2, #0
 8006e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e68:	f000 f868 	bl	8006f3c <_lseek_r>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	4632      	mov	r2, r6
 8006e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	4628      	mov	r0, r5
 8006e78:	463b      	mov	r3, r7
 8006e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e82:	f000 b817 	b.w	8006eb4 <_write_r>

08006e86 <__sseek>:
 8006e86:	b510      	push	{r4, lr}
 8006e88:	460c      	mov	r4, r1
 8006e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8e:	f000 f855 	bl	8006f3c <_lseek_r>
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	bf15      	itete	ne
 8006e98:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ea2:	81a3      	strheq	r3, [r4, #12]
 8006ea4:	bf18      	it	ne
 8006ea6:	81a3      	strhne	r3, [r4, #12]
 8006ea8:	bd10      	pop	{r4, pc}

08006eaa <__sclose>:
 8006eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eae:	f000 b813 	b.w	8006ed8 <_close_r>
	...

08006eb4 <_write_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	4608      	mov	r0, r1
 8006eba:	4611      	mov	r1, r2
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4d05      	ldr	r5, [pc, #20]	; (8006ed4 <_write_r+0x20>)
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f7fa fdea 	bl	8001a9c <_write>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_write_r+0x1e>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_write_r+0x1e>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20000af4 	.word	0x20000af4

08006ed8 <_close_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	2300      	movs	r3, #0
 8006edc:	4d05      	ldr	r5, [pc, #20]	; (8006ef4 <_close_r+0x1c>)
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa fdf6 	bl	8001ad4 <_close>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_close_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_close_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	20000af4 	.word	0x20000af4

08006ef8 <_fstat_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	2300      	movs	r3, #0
 8006efc:	4d06      	ldr	r5, [pc, #24]	; (8006f18 <_fstat_r+0x20>)
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	f7fa fdf0 	bl	8001aea <_fstat>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	d102      	bne.n	8006f14 <_fstat_r+0x1c>
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	b103      	cbz	r3, 8006f14 <_fstat_r+0x1c>
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	bd38      	pop	{r3, r4, r5, pc}
 8006f16:	bf00      	nop
 8006f18:	20000af4 	.word	0x20000af4

08006f1c <_isatty_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4d05      	ldr	r5, [pc, #20]	; (8006f38 <_isatty_r+0x1c>)
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fa fdee 	bl	8001b08 <_isatty>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_isatty_r+0x1a>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_isatty_r+0x1a>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	20000af4 	.word	0x20000af4

08006f3c <_lseek_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	4611      	mov	r1, r2
 8006f44:	2200      	movs	r2, #0
 8006f46:	4d05      	ldr	r5, [pc, #20]	; (8006f5c <_lseek_r+0x20>)
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f7fa fde6 	bl	8001b1c <_lseek>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_lseek_r+0x1e>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_lseek_r+0x1e>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	20000af4 	.word	0x20000af4

08006f60 <_read_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4d05      	ldr	r5, [pc, #20]	; (8006f80 <_read_r+0x20>)
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fa fd77 	bl	8001a62 <_read>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_read_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_read_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20000af4 	.word	0x20000af4

08006f84 <_init>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	bf00      	nop
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr

08006f90 <_fini>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr
